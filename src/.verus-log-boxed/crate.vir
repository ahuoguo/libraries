(@ "no location" (Datatype :path "slice%." :proxy None :owning_module None :visibility (Visibility :restricted_to None) :transparency
  (DatatypeTransparency Never) :typ_params (
   (tuple "sliceT%" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> DummySliceVariant ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/core.rs:14:1: 14:49 (#0)" (Datatype :path "core!option.Option." :proxy (@ "pervasive/std_specs/core.rs:14:1: 14:49 (#0)"
   "vstd!std_specs.core.ExOption."
  ) :owning_module "vstd!std_specs.core." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible
   (Visibility :restricted_to None)
  ) :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> None ())
   (-> Some ((-> _0 (tuple (Typ TypParam "V") Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/core.rs:19:1: 19:55 (#0)" (Datatype :path "core!result.Result." :proxy (@ "pervasive/std_specs/core.rs:19:1: 19:55 (#0)"
   "vstd!std_specs.core.ExResult."
  ) :owning_module "vstd!std_specs.core." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible
   (Visibility :restricted_to None)
  ) :typ_params (
   (tuple "T" (GenericBound Traits ()) (AcceptRecursiveType Accept))
   (tuple "E" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> Ok ((-> _0 (tuple (Typ TypParam "T") Exec (Visibility :restricted_to None)))))
   (-> Err ((-> _0 (tuple (Typ TypParam "E") Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/core.rs:23:1: 23:48 (#0)" (Datatype :path "core!ops.range.Range." :proxy (@ "pervasive/std_specs/core.rs:23:1: 23:48 (#0)"
   "vstd!std_specs.core.ExRange."
  ) :owning_module "vstd!std_specs.core." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible
   (Visibility :restricted_to None)
  ) :typ_params (
   (tuple "Idx" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> Range ((-> start (tuple (Typ TypParam "Idx") Exec (Visibility :restricted_to None))) (-> end (tuple (Typ TypParam "Idx")
       Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/core.rs:32:1: 32:45 (#0)" (Datatype :path "core!time.Duration." :proxy (@ "pervasive/std_specs/core.rs:32:1: 32:45 (#0)"
   "vstd!std_specs.core.ExDuration."
  ) :owning_module "vstd!std_specs.core." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never)
  :typ_params () :variants (
   (-> Duration ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/core.rs:37:1: 37:67 (#0)" (Datatype :path "core!marker.PhantomData." :proxy (@ "pervasive/std_specs/core.rs:37:1: 37:67 (#0)"
   "vstd!std_specs.core.ExPhantomData."
  ) :owning_module "vstd!std_specs.core." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never)
  :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> PhantomData ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/vec.rs:17:1: 17:46 (#0)" (Datatype :path "alloc!vec.Vec." :proxy (@ "pervasive/std_specs/vec.rs:17:1: 17:46 (#0)"
   "vstd!std_specs.vec.ExVec."
  ) :owning_module "vstd!std_specs.vec." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never)
  :typ_params (
   (tuple "T" (GenericBound Traits ()) (AcceptRecursiveType Accept))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")) (AcceptRecursiveType Reject))
  ) :variants (
   (-> Vec ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/vec.rs:21:1: 21:43 (#0)" (Datatype :path "alloc!alloc.Global." :proxy (@ "pervasive/std_specs/vec.rs:21:1: 21:43 (#0)"
   "vstd!std_specs.vec.ExGlobal."
  ) :owning_module "vstd!std_specs.vec." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never)
  :typ_params () :variants (
   (-> Global ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/map.rs:37:1: 39:2 (#0)" (Datatype :path "vstd!map.Map." :proxy None :owning_module "vstd!map." :visibility (Visibility
   :restricted_to None
  ) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType Reject))
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> Map ())
  ) :mode Proof :ext_equal true))

(@ "pervasive/option.rs:14:1: 17:2 (#0)" (Datatype :path "vstd!option.Option." :proxy None :owning_module "vstd!option." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None)) :typ_params
  (
   (tuple "A" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> None ())
   (-> Some ((-> _0 (tuple (Typ TypParam "A") Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal true))

(@ "pervasive/result.rs:12:1: 15:2 (#0)" (Datatype :path "vstd!result.Result." :proxy None :owning_module "vstd!result." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None)) :typ_params
  (
   (tuple "T" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "E" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> Ok ((-> _0 (tuple (Typ TypParam "T") Exec (Visibility :restricted_to None)))))
   (-> Err ((-> _0 (tuple (Typ TypParam "E") Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/seq.rs:34:1: 36:2 (#0)" (Datatype :path "vstd!seq.Seq." :proxy None :owning_module "vstd!seq." :visibility (Visibility
   :restricted_to None
  ) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "A" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> Seq ())
  ) :mode Exec :ext_equal true))

(@ "pervasive/set.rs:36:1: 38:2 (#0)" (Datatype :path "vstd!set.Set." :proxy None :owning_module "vstd!set." :visibility (Visibility
   :restricted_to None
  ) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "A" (GenericBound Traits ()) (AcceptRecursiveType Reject))
  ) :variants (
   (-> Set ())
  ) :mode Exec :ext_equal true))

(@ "pervasive/cell.rs:249:1: 249:23 (#0)" (Datatype :path "vstd!cell.InvCellPred." :proxy None :owning_module "vstd!cell."
  :visibility (Visibility :restricted_to "vstd!cell.") :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to
    "vstd!cell.")
  ) :typ_params () :variants (
   (-> InvCellPred ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/cell.rs:55:1: 57:2 (#0)" (Datatype :path "vstd!cell.PCell." :proxy None :owning_module "vstd!cell." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> PCell ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/cell.rs:74:1: 77:2 (#0)" (Datatype :path "vstd!cell.PointsTo." :proxy None :owning_module "vstd!cell." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> PointsTo ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/cell.rs:79:1: 82:2 (#0)" (Datatype :path "vstd!cell.PointsToData." :proxy None :owning_module "vstd!cell." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None)) :typ_params
  (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> PointsToData ((-> pcell (tuple (Typ Datatype "vstd!cell.CellId." ()) Exec (Visibility :restricted_to None))) (-> value (
       tuple (Typ Datatype "core!option.Option." ((Typ TypParam "V"))) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/cell.rs:108:1: 110:2 (#0)" (Datatype :path "vstd!cell.CellId." :proxy None :owning_module "vstd!cell." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> CellId ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/cell.rs:261:1: 265:2 (#0)" (Datatype :path "vstd!cell.InvCell." :proxy None :owning_module "vstd!cell." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to "vstd!cell."))
  :typ_params (
   (tuple "T" (GenericBound Traits ()) (AcceptRecursiveType Reject))
  ) :variants (
   (-> InvCell ((-> possible_values (tuple (Typ Decorate (TypDecoration Ghost) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))))
       Exec (Visibility :restricted_to "vstd!cell."))
     ) (-> pcell (tuple (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))) Exec (Visibility :restricted_to "vstd!cell.")))
     (-> perm_inv (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype
             "vstd!set.Set." ((Typ TypParam "T"))
            ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
          ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))
       ) Exec (Visibility :restricted_to "vstd!cell.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/invariant.rs:125:1: 128:2 (#0)" (Datatype :path "vstd!invariant.AtomicInvariant." :proxy None :owning_module
  "vstd!invariant." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType Accept))
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> AtomicInvariant ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/invariant.rs:167:1: 170:2 (#0)" (Datatype :path "vstd!invariant.LocalInvariant." :proxy None :owning_module "vstd!invariant."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType Accept))
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> LocalInvariant ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/invariant.rs:236:1: 236:32 (#0)" (Datatype :path "vstd!invariant.InvariantBlockGuard." :proxy None :owning_module
  "vstd!invariant." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params () :variants (
   (-> InvariantBlockGuard ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#216)" (Datatype :path "vstd!atomic.PAtomicBool." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicBool ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#216)" (Datatype :path "vstd!atomic.PermissionBool." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionBool ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#216)" (Datatype :path "vstd!atomic.PermissionDataBool." :proxy None :owning_module
  "vstd!atomic." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to
    None)
  ) :typ_params () :variants (
   (-> PermissionDataBool ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple
       (Typ Bool) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#238)" (Datatype :path "vstd!atomic.PAtomicU8." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicU8 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#238)" (Datatype :path "vstd!atomic.PermissionU8." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionU8 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#238)" (Datatype :path "vstd!atomic.PermissionDataU8." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataU8 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (Typ
        Int (IntRange U 8)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#260)" (Datatype :path "vstd!atomic.PAtomicU16." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicU16 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#260)" (Datatype :path "vstd!atomic.PermissionU16." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionU16 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#260)" (Datatype :path "vstd!atomic.PermissionDataU16." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataU16 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (
        Typ Int (IntRange U 16)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#282)" (Datatype :path "vstd!atomic.PAtomicU32." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicU32 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#282)" (Datatype :path "vstd!atomic.PermissionU32." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionU32 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#282)" (Datatype :path "vstd!atomic.PermissionDataU32." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataU32 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (
        Typ Int (IntRange U 32)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#304)" (Datatype :path "vstd!atomic.PAtomicU64." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicU64 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#304)" (Datatype :path "vstd!atomic.PermissionU64." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionU64 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#304)" (Datatype :path "vstd!atomic.PermissionDataU64." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataU64 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (
        Typ Int (IntRange U 64)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#326)" (Datatype :path "vstd!atomic.PAtomicUsize." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicUsize ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#326)" (Datatype :path "vstd!atomic.PermissionUsize." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionUsize ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#326)" (Datatype :path "vstd!atomic.PermissionDataUsize." :proxy None :owning_module
  "vstd!atomic." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to
    None)
  ) :typ_params () :variants (
   (-> PermissionDataUsize ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple
       (Typ Int (IntRange USize)) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#348)" (Datatype :path "vstd!atomic.PAtomicI8." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicI8 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#348)" (Datatype :path "vstd!atomic.PermissionI8." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionI8 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#348)" (Datatype :path "vstd!atomic.PermissionDataI8." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataI8 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (Typ
        Int (IntRange I 8)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#370)" (Datatype :path "vstd!atomic.PAtomicI16." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicI16 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#370)" (Datatype :path "vstd!atomic.PermissionI16." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionI16 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#370)" (Datatype :path "vstd!atomic.PermissionDataI16." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataI16 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (
        Typ Int (IntRange I 16)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#392)" (Datatype :path "vstd!atomic.PAtomicI32." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicI32 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#392)" (Datatype :path "vstd!atomic.PermissionI32." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionI32 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#392)" (Datatype :path "vstd!atomic.PermissionDataI32." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataI32 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (
        Typ Int (IntRange I 32)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#414)" (Datatype :path "vstd!atomic.PAtomicI64." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicI64 ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#414)" (Datatype :path "vstd!atomic.PermissionI64." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionI64 ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#414)" (Datatype :path "vstd!atomic.PermissionDataI64." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None))
  :typ_params () :variants (
   (-> PermissionDataI64 ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (
        Typ Int (IntRange I 64)
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic.rs:97:9: 99:10 (#436)" (Datatype :path "vstd!atomic.PAtomicIsize." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PAtomicIsize ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic.rs:102:9: 104:10 (#436)" (Datatype :path "vstd!atomic.PermissionIsize." :proxy None :owning_module "vstd!atomic."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> PermissionIsize ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/atomic.rs:106:9: 109:10 (#436)" (Datatype :path "vstd!atomic.PermissionDataIsize." :proxy None :owning_module
  "vstd!atomic." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to
    None)
  ) :typ_params () :variants (
   (-> PermissionDataIsize ((-> patomic (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple
       (Typ Int (IntRange ISize)) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#457)" (Datatype :path "vstd!atomic_ghost.AtomicPredU64." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredU64 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#457)" (Datatype :path "vstd!atomic_ghost.AtomicU64." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicU64 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicU64." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#464)" (Datatype :path "vstd!atomic_ghost.AtomicPredU32." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredU32 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#464)" (Datatype :path "vstd!atomic_ghost.AtomicU32." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicU32 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicU32." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#471)" (Datatype :path "vstd!atomic_ghost.AtomicPredU16." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredU16 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#471)" (Datatype :path "vstd!atomic_ghost.AtomicU16." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicU16 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicU16." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#478)" (Datatype :path "vstd!atomic_ghost.AtomicPredU8." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredU8 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#478)" (Datatype :path "vstd!atomic_ghost.AtomicU8." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicU8 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicU8." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#485)" (Datatype :path "vstd!atomic_ghost.AtomicPredUsize." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredUsize ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#485)" (Datatype :path "vstd!atomic_ghost.AtomicUsize." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicUsize ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicUsize." ()) Exec (Visibility :restricted_to None))) (
      -> atomic_inv (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam
             "K"
            ) (Typ Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#492)" (Datatype :path "vstd!atomic_ghost.AtomicPredI64." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredI64 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#492)" (Datatype :path "vstd!atomic_ghost.AtomicI64." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicI64 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicI64." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#499)" (Datatype :path "vstd!atomic_ghost.AtomicPredI32." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredI32 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#499)" (Datatype :path "vstd!atomic_ghost.AtomicI32." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicI32 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicI32." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#506)" (Datatype :path "vstd!atomic_ghost.AtomicPredI16." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredI16 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#506)" (Datatype :path "vstd!atomic_ghost.AtomicI16." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicI16 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicI16." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#513)" (Datatype :path "vstd!atomic_ghost.AtomicPredI8." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredI8 ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#513)" (Datatype :path "vstd!atomic_ghost.AtomicI8." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicI8 ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicI8." ()) Exec (Visibility :restricted_to None))) (-> atomic_inv
      (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ
             Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#520)" (Datatype :path "vstd!atomic_ghost.AtomicPredIsize." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredIsize ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#520)" (Datatype :path "vstd!atomic_ghost.AtomicIsize." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicIsize ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicIsize." ()) Exec (Visibility :restricted_to None))) (
      -> atomic_inv (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam
             "K"
            ) (Typ Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:22:9: 22:53 (#527)" (Datatype :path "vstd!atomic_ghost.AtomicPredBool." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to "vstd!atomic_ghost.")
  ) :typ_params (
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicPredBool ((-> p (tuple (Typ TypParam "Pred") Exec (Visibility :restricted_to "vstd!atomic_ghost.")))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/atomic_ghost.rs:44:9: 52:10 (#527)" (Datatype :path "vstd!atomic_ghost.AtomicBool." :proxy None :owning_module
  "vstd!atomic_ghost." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility
    :restricted_to None)
  ) :typ_params (
   (tuple "K" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "G" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
   (tuple "Pred" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> AtomicBool ((-> patomic (tuple (Typ Datatype "vstd!atomic.PAtomicBool." ()) Exec (Visibility :restricted_to None))) (->
      atomic_inv (tuple (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam
             "K"
            ) (Typ Int (IntRange Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool."
           ((Typ TypParam "Pred")))))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Exec :ext_equal false))

(@ "pervasive/multiset.rs:43:1: 45:2 (#0)" (Datatype :path "vstd!multiset.Multiset." :proxy None :owning_module "vstd!multiset."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> Multiset ())
  ) :mode Exec :ext_equal true))

(@ "pervasive/state_machine_internal.rs:15:1: 17:2 (#0)" (Datatype :path "vstd!state_machine_internal.SyncSendIfSyncSend."
  :proxy None :owning_module "vstd!state_machine_internal." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency
   Never
  ) :typ_params (
   (tuple "T" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> SyncSendIfSyncSend ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/state_machine_internal.rs:20:1: 22:2 (#0)" (Datatype :path "vstd!state_machine_internal.NoCopy." :proxy None
  :owning_module "vstd!state_machine_internal." :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency
   Never
  ) :typ_params () :variants (
   (-> NoCopy ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/thread.rs:17:1: 20:2 (#0)" (Datatype :path "vstd!thread.JoinHandle." :proxy None :owning_module "vstd!thread."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "Ret" (GenericBound Traits ()) (AcceptRecursiveType Reject))
  ) :variants (
   (-> JoinHandle ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/thread.rs:136:1: 138:2 (#0)" (Datatype :path "vstd!thread.ThreadId." :proxy None :owning_module "vstd!thread."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> ThreadId ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/thread.rs:143:1: 143:32 (#0)" (Datatype :path "vstd!thread.IsThread." :proxy None :owning_module "vstd!thread."
  :visibility (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> IsThread ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/thread.rs:196:9: 198:2 (#0)" (Datatype :path "vstd!thread.ThreadShareable." :proxy None :owning_module "vstd!thread."
  :visibility (Visibility :restricted_to "vstd!thread.") :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> ThreadShareable ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/ptr.rs:124:1: 126:2 (#0)" (Datatype :path "vstd!ptr.PPtr." :proxy None :owning_module "vstd!ptr." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> PPtr ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/ptr.rs:149:1: 152:2 (#0)" (Datatype :path "vstd!ptr.PointsTo." :proxy None :owning_module "vstd!ptr." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> PointsTo ())
  ) :mode Proof :ext_equal false))

(@ "pervasive/ptr.rs:156:1: 166:2 (#0)" (Datatype :path "vstd!ptr.PointsToData." :proxy None :owning_module "vstd!ptr." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency WhenVisible (Visibility :restricted_to None)) :typ_params
  (
   (tuple "V" (GenericBound Traits ()) (AcceptRecursiveType RejectInGround))
  ) :variants (
   (-> PointsToData ((-> pptr (tuple (Typ Int (IntRange Int)) Exec (Visibility :restricted_to None))) (-> value (tuple (Typ Datatype
        "core!option.Option." ((Typ TypParam "V"))
       ) Exec (Visibility :restricted_to None)))))
  ) :mode Spec :ext_equal false))

(@ "pervasive/string.rs:16:1: 18:2 (#0)" (Datatype :path "vstd!string.String." :proxy None :owning_module "vstd!string." :visibility
  (Visibility :restricted_to None) :transparency (DatatypeTransparency Never) :typ_params () :variants (
   (-> String ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/vec.rs:20:1: 22:2 (#0)" (Datatype :path "vstd!vec.Vec." :proxy None :owning_module "vstd!vec." :visibility (Visibility
   :restricted_to None
  ) :transparency (DatatypeTransparency Never) :typ_params (
   (tuple "A" (GenericBound Traits ()) (AcceptRecursiveType Accept))
  ) :variants (
   (-> Vec ())
  ) :mode Exec :ext_equal false))

(@ "pervasive/std_specs/core.rs:6:1: 6:40 (#0)" (Function
  :name (Fun :path "core!mem.swap.") :proxy (@ "pervasive/std_specs/core.rs:6:1: 6:40 (#0)" "vstd!std_specs.core.ex_swap.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.core." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/core.rs:6:19: 6:28 (#0)" (Param :name "a~2" :typ (Typ TypParam "T") :mode Exec :is_mut true :unwrapped_info
     None))
   (@ "pervasive/std_specs/core.rs:6:30: 6:39 (#0)" (Param :name "b~4" :typ (Typ TypParam "T") :mode Exec :is_mut true :unwrapped_info
     None))
  ) :ret (@ "pervasive/std_specs/core.rs:8:1: 8:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/core.rs:7:13: 7:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/core.rs:7:14: 7:15 (#0)"
      (> Var "a~2") (Typ Decorate (TypDecoration MutRef) (Typ TypParam "T"))
     ) (@@ "pervasive/std_specs/core.rs:7:20: 7:26 (#0)" (> VarAt "b~4" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ TypParam
        "T")))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/core.rs:7:28: 7:29 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/core.rs:7:29: 7:30 (#0)"
      (> Var "b~4") (Typ Decorate (TypDecoration MutRef) (Typ TypParam "T"))
     ) (@@ "pervasive/std_specs/core.rs:7:35: 7:41 (#0)" (> VarAt "a~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ TypParam
        "T")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/core.rs:40:1: 40:49 (#0)" (Function
  :name (Fun :path "core!intrinsics.likely.") :proxy (@ "pervasive/std_specs/core.rs:40:1: 40:49 (#0)" "vstd!std_specs.core.ex_intrinsics_likely.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.core." :mode Exec
  :fuel 1 :typ_bounds () :params (
   (@ "pervasive/std_specs/core.rs:40:29: 40:36 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/std_specs/core.rs:40:45: 40:49 (#0)" (Param :name "c~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/core.rs:41:13: 41:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/core.rs:41:13: 41:14 (#0)"
      (> Var "c~10") (Typ Bool)
     ) (@@ "pervasive/std_specs/core.rs:41:18: 41:19 (#0)" (> Var "b~2") (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/core.rs:47:1: 47:51 (#0)" (Function
  :name (Fun :path "core!intrinsics.unlikely.") :proxy (@ "pervasive/std_specs/core.rs:47:1: 47:51 (#0)" "vstd!std_specs.core.ex_intrinsics_unlikely.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.core." :mode Exec
  :fuel 1 :typ_bounds () :params (
   (@ "pervasive/std_specs/core.rs:47:31: 47:38 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/std_specs/core.rs:47:47: 47:51 (#0)" (Param :name "c~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/core.rs:48:13: 48:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/core.rs:48:13: 48:14 (#0)"
      (> Var "c~10") (Typ Bool)
     ) (@@ "pervasive/std_specs/core.rs:48:18: 48:19 (#0)" (> Var "b~2") (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:51:35: 51:59 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path
   "vstd!std_specs.result.ResultAdditionalSpecFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:51:44: 51:49 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:51:54: 51:58 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:52:35: 52:59 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.") :proxy None :kind (FunctionKind TraitMethodDecl
   :trait_path "vstd!std_specs.result.ResultAdditionalSpecFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:52:47: 52:52 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:52:57: 52:58 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:53:35: 53:60 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.") :proxy None :kind (FunctionKind TraitMethodDecl
   :trait_path "vstd!std_specs.result.ResultAdditionalSpecFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:53:45: 53:50 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:53:55: 53:59 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:54:35: 54:60 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.") :proxy None :kind (FunctionKind TraitMethodDecl
   :trait_path "vstd!std_specs.result.ResultAdditionalSpecFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:54:48: 54:53 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:54:58: 54:59 (#0)" (Param :name "%return" :typ (Typ TypParam "E") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:59:15: 59:38 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.impl&%0.is_Ok.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok."
   ) :impl_path "vstd!std_specs.result.impl&%0." :trait_path "vstd!std_specs.result.ResultAdditionalSpecFns." :trait_typ_args
   ((Typ TypParam "T") (Typ TypParam "E")) :self_typ (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:59:24: 59:29 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:59:34: 59:38 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:59:39: 59:63 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:59:41: 59:61 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!result.Result." :variant "Ok") (@@ "pervasive/std_specs/result.rs:59:56: 59:60 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:62:15: 62:38 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.impl&%0.get_Ok_0.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0."
   ) :impl_path "vstd!std_specs.result.impl&%0." :trait_path "vstd!std_specs.result.ResultAdditionalSpecFns." :trait_typ_args
   ((Typ TypParam "T") (Typ TypParam "E")) :self_typ (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:62:27: 62:32 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:62:37: 62:38 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:62:39: 62:67 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:62:41: 62:65 (#0)"
     (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "core!result.Result." :variant "Ok" :field "_0" :get_variant true)) (@@ "pervasive/std_specs/result.rs:62:60: 62:64 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:65:15: 65:39 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.impl&%0.is_Err.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.result.ResultAdditionalSpecFns.is_Err."
   ) :impl_path "vstd!std_specs.result.impl&%0." :trait_path "vstd!std_specs.result.ResultAdditionalSpecFns." :trait_typ_args
   ((Typ TypParam "T") (Typ TypParam "E")) :self_typ (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:65:25: 65:30 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:65:35: 65:39 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:65:40: 65:65 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:65:42: 65:63 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!result.Result." :variant "Err") (@@ "pervasive/std_specs/result.rs:65:58: 65:62 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:68:15: 68:39 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.impl&%0.get_Err_0.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0."
   ) :impl_path "vstd!std_specs.result.impl&%0." :trait_path "vstd!std_specs.result.ResultAdditionalSpecFns." :trait_typ_args
   ((Typ TypParam "T") (Typ TypParam "E")) :self_typ (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:68:28: 68:33 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:68:38: 68:39 (#0)" (Param :name "%return" :typ (Typ TypParam "E") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:68:40: 68:69 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:68:42: 68:67 (#0)"
     (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "core!result.Result." :variant "Err" :field "_0" :get_variant true)) (@@ "pervasive/std_specs/result.rs:68:62: 68:66 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
     ) (Typ TypParam "E"))
   ) (Typ TypParam "E")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:76:1: 76:60 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.is_ok.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:76:30: 76:51 (#0)" (Param :name "result~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:76:56: 76:60 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:76:61: 78:2 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:77:5: 77:27 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!result.Result." :variant "Ok") (@@ "pervasive/std_specs/result.rs:77:20: 77:26 (#0)"
       (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:82:1: 82:64 (#0)" (Function
  :name (Fun :path "core!result.impl&%0.is_ok.") :proxy (@ "pervasive/std_specs/result.rs:82:1: 82:64 (#0)" "vstd!std_specs.result.ex_result_is_ok.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:82:30: 82:51 (#0)" (Param :name "result~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:82:60: 82:64 (#0)" (Param :name "b~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/result.rs:83:13: 83:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:83:13: 83:14 (#0)"
      (> Var "b~10") (Typ Bool)
     ) (@@ "pervasive/std_specs/result.rs:83:18: 83:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!std_specs.result.is_ok.")
        ((Typ TypParam "T") (Typ TypParam "E")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:83:24: 83:30 (#0)" (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result."
           ((Typ TypParam "T") (Typ TypParam "E"))))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.result.is_ok.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:91:1: 91:61 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.is_err.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:91:31: 91:52 (#0)" (Param :name "result~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:91:57: 91:61 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:91:62: 93:2 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:92:5: 92:28 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!result.Result." :variant "Err") (@@ "pervasive/std_specs/result.rs:92:21: 92:27 (#0)"
       (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:97:1: 97:65 (#0)" (Function
  :name (Fun :path "core!result.impl&%0.is_err.") :proxy (@ "pervasive/std_specs/result.rs:97:1: 97:65 (#0)" "vstd!std_specs.result.ex_result_is_err.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:97:31: 97:52 (#0)" (Param :name "result~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:97:61: 97:65 (#0)" (Param :name "b~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/result.rs:98:13: 98:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:98:13: 98:14 (#0)"
      (> Var "b~10") (Typ Bool)
     ) (@@ "pervasive/std_specs/result.rs:98:18: 98:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!std_specs.result.is_err.")
        ((Typ TypParam "T") (Typ TypParam "E")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:98:25: 98:31 (#0)" (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!result.Result."
           ((Typ TypParam "T") (Typ TypParam "E"))))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.result.is_err.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:106:1: 106:65 (#0)" (Function
  :name (Fun :path "core!result.impl&%0.as_ref.") :proxy (@ "pervasive/std_specs/result.rs:106:1: 106:65 (#0)" "vstd!std_specs.result.as_ref.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:106:21: 106:42 (#0)" (Param :name "result~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:106:51: 106:65 (#0)" (Param :name "r~10" :typ (Typ Datatype "core!result.Result." (
      (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/result.rs:108:9: 108:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:108:9: 108:18 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Ok.") ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
          ) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.") ((Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
         ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:108:9: 108:10 (#0)" (> Var "r~10") (Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/result.rs:108:24: 108:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Ok.")
          ((Typ TypParam "T") (Typ TypParam "E")) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
           (Typ TypParam "E"))
         ) (Typ TypParam "T") (Typ TypParam "E")
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:108:24: 108:30 (#0)" (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype
           "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E"))))))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/result.rs:109:9: 109:10 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/std_specs/result.rs:109:9: 109:18 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Ok.") ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
          ) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.") ((Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
         ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:109:9: 109:10 (#0)" (> Var "r~10") (Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/result.rs:109:23: 109:29 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:109:23: 109:40 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Ok_0.") ((Typ TypParam "T")
             (Typ TypParam "E")
            ) ())
          ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
             (Typ TypParam "E"))
           ) (Typ TypParam "T") (Typ TypParam "E")
          ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/result.rs:109:23: 109:29 (#0)" (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype
             "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E"))))))
        ) (Typ TypParam "T")
       ) (@@ "pervasive/std_specs/result.rs:109:44: 109:56 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Ok_0.")
            ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))) ())
          ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.") ((Typ Datatype "core!result.Result." ((Typ Decorate (
               TypDecoration Ref
              ) (Typ TypParam "T")
             ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
          ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/result.rs:109:44: 109:45 (#0)" (> Var "r~10") (Typ Datatype "core!result.Result." ((Typ Decorate (
               TypDecoration Ref
              ) (Typ TypParam "T")
             ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))))
        ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/result.rs:110:9: 110:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:110:9: 110:19 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Err.") ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
          ) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.") ((Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
         ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:110:9: 110:10 (#0)" (> Var "r~10") (Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/result.rs:110:25: 110:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Err.")
          ((Typ TypParam "T") (Typ TypParam "E")) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
           (Typ TypParam "E"))
         ) (Typ TypParam "T") (Typ TypParam "E")
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:110:25: 110:31 (#0)" (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype
           "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E"))))))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/result.rs:111:9: 111:10 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/std_specs/result.rs:111:9: 111:19 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Err.") ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
          ) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.") ((Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
         ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:111:9: 111:10 (#0)" (> Var "r~10") (Typ Datatype "core!result.Result." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/result.rs:111:24: 111:30 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:111:24: 111:42 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Err_0.") ((Typ TypParam "T")
             (Typ TypParam "E")
            ) ())
          ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.") ((Typ Datatype "core!result.Result." ((Typ TypParam
              "T"
             ) (Typ TypParam "E"))
           ) (Typ TypParam "T") (Typ TypParam "E")
          ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/result.rs:111:24: 111:30 (#0)" (> Var "result~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype
             "core!result.Result." ((Typ TypParam "T") (Typ TypParam "E"))))))
        ) (Typ TypParam "E")
       ) (@@ "pervasive/std_specs/result.rs:111:46: 111:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Err_0.")
            ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))) ())
          ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.") ((Typ Datatype "core!result.Result." ((Typ Decorate
              (TypDecoration Ref) (Typ TypParam "T")
             ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))
          ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/result.rs:111:46: 111:47 (#0)" (> Var "r~10") (Typ Datatype "core!result.Result." ((Typ Decorate (
               TypDecoration Ref
              ) (Typ TypParam "T")
             ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))))
        ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:119:1: 119:80 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.spec_unwrap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ("core!fmt.Debug.")))
  ) :params (
   (@ "pervasive/std_specs/result.rs:119:54: 119:74 (#0)" (Param :name "result~2" :typ (Typ Datatype "core!result.Result." ((Typ
        TypParam "T"
       ) (Typ TypParam "E"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:119:79: 119:80 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/result.rs:120:16: 120:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Ok.")
        ((Typ TypParam "T") (Typ TypParam "E")) ())
      ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
         (Typ TypParam "E"))
       ) (Typ TypParam "T") (Typ TypParam "E")
      ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/std_specs/result.rs:120:16: 120:22 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
          "T"
         ) (Typ TypParam "E")))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:121:1: 123:2 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:122:5: 122:22 (#0)"
     (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Ok_0.") ((Typ TypParam "T")
          (Typ TypParam "E")
         ) ())
       ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
          (Typ TypParam "E"))
        ) (Typ TypParam "T") (Typ TypParam "E")
       ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/std_specs/result.rs:122:5: 122:11 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
           "T"
          ) (Typ TypParam "E")))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:127:1: 127:69 (#0)" (Function
  :name (Fun :path "core!result.impl&%0.unwrap.") :proxy (@ "pervasive/std_specs/result.rs:127:1: 127:69 (#0)" "vstd!std_specs.result.unwrap.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ("core!fmt.Debug.")))
  ) :params (
   (@ "pervasive/std_specs/result.rs:127:39: 127:59 (#0)" (Param :name "result~2" :typ (Typ Datatype "core!result.Result." ((Typ
        TypParam "T"
       ) (Typ TypParam "E"))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:127:68: 127:69 (#0)" (Param :name "t~21" :typ (Typ TypParam "T") :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/result.rs:129:9: 129:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Ok.")
        ((Typ TypParam "T") (Typ TypParam "E")) ())
      ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Ok.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
         (Typ TypParam "E"))
       ) (Typ TypParam "T") (Typ TypParam "E")
      ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/std_specs/result.rs:129:9: 129:15 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
          "T"
         ) (Typ TypParam "E")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/result.rs:131:9: 131:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:131:9: 131:10 (#0)"
      (> Var "t~21") (Typ TypParam "T")
     ) (@@ "pervasive/std_specs/result.rs:131:14: 131:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Ok_0.")
          ((Typ TypParam "T") (Typ TypParam "E")) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Ok_0.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
           (Typ TypParam "E"))
         ) (Typ TypParam "T") (Typ TypParam "E")
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:131:14: 131:20 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
            "T"
           ) (Typ TypParam "E")))))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.result.spec_unwrap.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:139:1: 139:84 (#0)" (Function
  :name (Fun :path "vstd!std_specs.result.spec_unwrap_err.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!std_specs.result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ("core!fmt.Debug.")))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:139:58: 139:78 (#0)" (Param :name "result~2" :typ (Typ Datatype "core!result.Result." ((Typ
        TypParam "T"
       ) (Typ TypParam "E"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:139:83: 139:84 (#0)" (Param :name "%return" :typ (Typ TypParam "E") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/result.rs:140:16: 140:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Err.")
        ((Typ TypParam "T") (Typ TypParam "E")) ())
      ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
         (Typ TypParam "E"))
       ) (Typ TypParam "T") (Typ TypParam "E")
      ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/std_specs/result.rs:140:16: 140:22 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
          "T"
         ) (Typ TypParam "E")))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/result.rs:141:1: 143:2 (#0)" (> Block () (@@ "pervasive/std_specs/result.rs:142:5: 142:23 (#0)"
     (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Err_0.") ((Typ TypParam "T")
          (Typ TypParam "E")
         ) ())
       ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.") ((Typ Datatype "core!result.Result." ((Typ TypParam
           "T"
          ) (Typ TypParam "E"))
        ) (Typ TypParam "T") (Typ TypParam "E")
       ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/std_specs/result.rs:142:5: 142:11 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
           "T"
          ) (Typ TypParam "E")))))
     ) (Typ TypParam "E"))
   ) (Typ TypParam "E")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/result.rs:147:1: 147:73 (#0)" (Function
  :name (Fun :path "core!result.impl&%0.unwrap_err.") :proxy (@ "pervasive/std_specs/result.rs:147:1: 147:73 (#0)" "vstd!std_specs.result.unwrap_err.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.result." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ("core!fmt.Debug.")))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/result.rs:147:43: 147:63 (#0)" (Param :name "result~2" :typ (Typ Datatype "core!result.Result." ((Typ
        TypParam "T"
       ) (Typ TypParam "E"))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/result.rs:147:72: 147:73 (#0)" (Param :name "e~21" :typ (Typ TypParam "E") :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/result.rs:149:9: 149:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.is_Err.")
        ((Typ TypParam "T") (Typ TypParam "E")) ())
      ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.is_Err.") ((Typ Datatype "core!result.Result." ((Typ TypParam "T")
         (Typ TypParam "E"))
       ) (Typ TypParam "T") (Typ TypParam "E")
      ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/std_specs/result.rs:149:9: 149:15 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
          "T"
         ) (Typ TypParam "E")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/result.rs:151:9: 151:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/result.rs:151:9: 151:10 (#0)"
      (> Var "e~21") (Typ TypParam "E")
     ) (@@ "pervasive/std_specs/result.rs:151:14: 151:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.result.impl&%0.get_Err_0.")
          ((Typ TypParam "T") (Typ TypParam "E")) ())
        ) (Fun :path "vstd!std_specs.result.ResultAdditionalSpecFns.get_Err_0.") ((Typ Datatype "core!result.Result." ((Typ TypParam
            "T"
           ) (Typ TypParam "E"))
         ) (Typ TypParam "T") (Typ TypParam "E")
        ) ((tuple "Self%" "vstd!std_specs.result.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/result.rs:151:14: 151:20 (#0)" (> Var "result~2") (Typ Datatype "core!result.Result." ((Typ TypParam
            "T"
           ) (Typ TypParam "E")))))
      ) (Typ TypParam "E"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.result.spec_unwrap_err.") :bit_vector false :atomic false
   :integer_ring false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:39:35: 39:61 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path
   "vstd!std_specs.option.OptionAdditionalFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:39:46: 39:51 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:39:56: 39:60 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:40:35: 40:61 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") :proxy None :kind (FunctionKind TraitMethodDecl
   :trait_path "vstd!std_specs.option.OptionAdditionalFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:40:49: 40:54 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:40:59: 40:60 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:41:35: 41:61 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_None.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path
   "vstd!std_specs.option.OptionAdditionalFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:41:46: 41:51 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:41:56: 41:60 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:43:11: 47:36 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap.") :proxy None :kind (FunctionKind TraitMethodDecl
   :trait_path "vstd!std_specs.option.OptionAdditionalFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Proof :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:43:37: 43:41 (#0)" (Param :name "self~2" :typ (Typ TypParam "Self%") :mode Proof :is_mut
     false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:43:58: 43:59 (#0)" (Param :name "t~21" :typ (Typ TypParam "T") :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/option.rs:45:13: 45:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.")
      ((Typ TypParam "Self%") (Typ TypParam "T")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/std_specs/option.rs:45:13: 45:17 (#0)" (> Var "self~2") (Typ TypParam "Self%")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/option.rs:47:13: 47:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/option.rs:47:13: 47:14 (#0)"
      (> Var "t~21") (Typ TypParam "T")
     ) (@@ "pervasive/std_specs/option.rs:47:18: 47:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.")
        ((Typ TypParam "Self%") (Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/option.rs:47:18: 47:22 (#0)" (> Var "self~2") (Typ TypParam "Self%")))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:52:15: 52:40 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.impl&%0.is_Some.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.option.OptionAdditionalFns.is_Some."
   ) :impl_path "vstd!std_specs.option.impl&%0." :trait_path "vstd!std_specs.option.OptionAdditionalFns." :trait_typ_args ((Typ
     TypParam "T")
   ) :self_typ (Typ Datatype "core!option.Option." ((Typ TypParam "T")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:52:26: 52:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:52:36: 52:40 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/option.rs:52:41: 52:67 (#0)" (> Block () (@@ "pervasive/std_specs/option.rs:52:43: 52:65 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!option.Option." :variant "Some") (@@ "pervasive/std_specs/option.rs:52:60: 52:64 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:55:15: 55:40 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun
    :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0."
   ) :impl_path "vstd!std_specs.option.impl&%0." :trait_path "vstd!std_specs.option.OptionAdditionalFns." :trait_typ_args ((Typ
     TypParam "T")
   ) :self_typ (Typ Datatype "core!option.Option." ((Typ TypParam "T")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:55:29: 55:34 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:55:39: 55:40 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/option.rs:55:41: 55:71 (#0)" (> Block () (@@ "pervasive/std_specs/option.rs:55:43: 55:69 (#0)"
     (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "core!option.Option." :variant "Some" :field "_0" :get_variant true)) (@@ "pervasive/std_specs/option.rs:55:64: 55:68 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:58:15: 58:40 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.impl&%0.is_None.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.option.OptionAdditionalFns.is_None."
   ) :impl_path "vstd!std_specs.option.impl&%0." :trait_path "vstd!std_specs.option.OptionAdditionalFns." :trait_typ_args ((Typ
     TypParam "T")
   ) :self_typ (Typ Datatype "core!option.Option." ((Typ TypParam "T")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:58:26: 58:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:58:36: 58:40 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/option.rs:58:41: 58:67 (#0)" (> Block () (@@ "pervasive/std_specs/option.rs:58:43: 58:65 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!option.Option." :variant "None") (@@ "pervasive/std_specs/option.rs:58:60: 58:64 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:60:11: 60:59 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.impl&%0.tracked_unwrap.") :proxy None :kind (FunctionKind TraitMethodImpl :method
   (Fun :path "vstd!std_specs.option.OptionAdditionalFns.tracked_unwrap.") :impl_path "vstd!std_specs.option.impl&%0." :trait_path
   "vstd!std_specs.option.OptionAdditionalFns." :trait_typ_args ((Typ TypParam "T")) :self_typ (Typ Datatype "core!option.Option."
    ((Typ TypParam "T")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Proof :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:60:37: 60:41 (#0)" (Param :name "self~2" :typ (Typ Datatype "core!option.Option." ((Typ TypParam
        "T"))
     ) :mode Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:60:58: 60:59 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/option.rs:60:61: 65:6 (#0)" (> Block () (@@ "pervasive/std_specs/option.rs:61:9: 64:10 (#0)"
     (> Match (@@ "pervasive/std_specs/option.rs:61:15: 61:19 (#0)" (> Var "self~2") (Typ Datatype "core!option.Option." ((Typ TypParam
          "T")))
      ) ((@ "pervasive/std_specs/option.rs:62:13: 62:33 (#0)" (Arm :pattern (@@ "pervasive/std_specs/option.rs:62:13: 62:28 (#0)" (
           Pattern Constructor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/std_specs/option.rs:62:26: 62:27 (#0)" (Pattern Var :name
               "t~8" :mutable false
              ) (Typ TypParam "T"))))
          ) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))
         ) :guard (@@ "pervasive/std_specs/option.rs:61:9: 64:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "T")) :body (@@
          "pervasive/std_specs/option.rs:62:32: 62:33 (#0)" (> Var "t~8") (Typ TypParam "T")))
       ) (@ "pervasive/std_specs/option.rs:63:13: 63:47 (#0)" (Arm :pattern (@@ "pervasive/std_specs/option.rs:63:13: 63:25 (#0)" (
           Pattern Constructor "core!option.Option." "None" ()
          ) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))
         ) :guard (@@ "pervasive/std_specs/option.rs:61:9: 64:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "T")) :body (@@
          "pervasive/std_specs/option.rs:63:29: 63:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!pervasive.proof_from_false.")
            ((Typ TypParam "T")) () (AutospecUsage IfMarked)
           ) ()
          ) (Typ TypParam "T")))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:73:1: 73:56 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.is_some.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:73:29: 73:47 (#0)" (Param :name "option~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:73:52: 73:56 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/option.rs:73:57: 75:2 (#0)" (> Block () (@@ "pervasive/std_specs/option.rs:74:5: 74:29 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!option.Option." :variant "Some") (@@ "pervasive/std_specs/option.rs:74:22: 74:28 (#0)"
       (> Var "option~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:79:1: 79:60 (#0)" (Function
  :name (Fun :path "core!option.impl&%0.is_some.") :proxy (@ "pervasive/std_specs/option.rs:79:1: 79:60 (#0)" "vstd!std_specs.option.ex_option_is_some.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:79:29: 79:47 (#0)" (Param :name "option~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:79:56: 79:60 (#0)" (Param :name "b~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/option.rs:80:13: 80:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/option.rs:80:13: 80:14 (#0)"
      (> Var "b~10") (Typ Bool)
     ) (@@ "pervasive/std_specs/option.rs:80:18: 80:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!std_specs.option.is_some.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/option.rs:80:26: 80:32 (#0)" (> Var "option~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!option.Option."
           ((Typ TypParam "T"))))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.option.is_some.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:88:1: 88:56 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.is_none.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:88:29: 88:47 (#0)" (Param :name "option~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:88:52: 88:56 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/option.rs:88:57: 90:2 (#0)" (> Block () (@@ "pervasive/std_specs/option.rs:89:5: 89:29 (#0)"
     (> UnaryOpr (UnaryOpr IsVariant :datatype "core!option.Option." :variant "None") (@@ "pervasive/std_specs/option.rs:89:22: 89:28 (#0)"
       (> Var "option~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:94:1: 94:60 (#0)" (Function
  :name (Fun :path "core!option.impl&%0.is_none.") :proxy (@ "pervasive/std_specs/option.rs:94:1: 94:60 (#0)" "vstd!std_specs.option.ex_option_is_none.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:94:29: 94:47 (#0)" (Param :name "option~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:94:56: 94:60 (#0)" (Param :name "b~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/option.rs:95:13: 95:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/option.rs:95:13: 95:14 (#0)"
      (> Var "b~10") (Typ Bool)
     ) (@@ "pervasive/std_specs/option.rs:95:18: 95:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!std_specs.option.is_none.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/option.rs:95:26: 95:32 (#0)" (> Var "option~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "core!option.Option."
           ((Typ TypParam "T"))))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.option.is_none.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:103:1: 103:55 (#0)" (Function
  :name (Fun :path "core!option.impl&%0.as_ref.") :proxy (@ "pervasive/std_specs/option.rs:103:1: 103:55 (#0)" "vstd!std_specs.option.as_ref.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:103:18: 103:36 (#0)" (Param :name "option~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "core!option.Option." ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:103:45: 103:55 (#0)" (Param :name "a~10" :typ (Typ Datatype "core!option.Option." (
      (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/option.rs:105:9: 105:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/option.rs:105:9: 105:20 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.") ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T"))
          ) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")))
         ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/option.rs:105:9: 105:10 (#0)" (> Var "a~10") (Typ Datatype "core!option.Option." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T"))))))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/option.rs:105:26: 105:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
          ((Typ TypParam "T")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "T")))
         (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/option.rs:105:26: 105:32 (#0)" (> Var "option~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype
           "core!option.Option." ((Typ TypParam "T"))))))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/option.rs:106:9: 106:10 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/std_specs/option.rs:106:9: 106:20 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.") ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T"))
          ) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T")))
         ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/option.rs:106:9: 106:10 (#0)" (> Var "a~10") (Typ Datatype "core!option.Option." ((Typ Decorate (TypDecoration
             Ref
            ) (Typ TypParam "T"))))))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/option.rs:106:25: 106:31 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/option.rs:106:25: 106:44 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.") ((Typ TypParam "T"))
            ())
          ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "T")))
           (Typ TypParam "T")
          ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/option.rs:106:25: 106:31 (#0)" (> Var "option~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype
             "core!option.Option." ((Typ TypParam "T"))))))
        ) (Typ TypParam "T")
       ) (@@ "pervasive/std_specs/option.rs:106:48: 106:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
            ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))) ())
          ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ Decorate (TypDecoration
               Ref
              ) (Typ TypParam "T")))
           ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))
          ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/option.rs:106:48: 106:49 (#0)" (> Var "a~10") (Typ Datatype "core!option.Option." ((Typ Decorate (
               TypDecoration Ref
              ) (Typ TypParam "T"))))))
        ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:114:1: 114:56 (#0)" (Function
  :name (Fun :path "vstd!std_specs.option.spec_unwrap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:114:33: 114:50 (#0)" (Param :name "option~2" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "T"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:114:55: 114:56 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/option.rs:115:16: 115:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "T")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "T")))
       (Typ TypParam "T")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/std_specs/option.rs:115:16: 115:22 (#0)" (> Var "option~2") (Typ Datatype "core!option.Option." ((Typ TypParam
          "T")))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/option.rs:116:1: 118:2 (#0)" (> Block () (@@ "pervasive/std_specs/option.rs:117:5: 117:24 (#0)"
     (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.") ((Typ TypParam "T"))
         ())
       ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "T")))
        (Typ TypParam "T")
       ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/std_specs/option.rs:117:5: 117:11 (#0)" (> Var "option~2") (Typ Datatype "core!option.Option." ((Typ TypParam
           "T")))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/option.rs:122:1: 122:45 (#0)" (Function
  :name (Fun :path "core!option.impl&%0.unwrap.") :proxy (@ "pervasive/std_specs/option.rs:122:1: 122:45 (#0)" "vstd!std_specs.option.unwrap.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.option." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/option.rs:122:18: 122:35 (#0)" (Param :name "option~2" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "T"))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/option.rs:122:44: 122:45 (#0)" (Param :name "t~21" :typ (Typ TypParam "T") :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/option.rs:124:9: 124:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "T")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "T")))
       (Typ TypParam "T")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/std_specs/option.rs:124:9: 124:15 (#0)" (> Var "option~2") (Typ Datatype "core!option.Option." ((Typ TypParam
          "T")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/option.rs:126:9: 126:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/option.rs:126:9: 126:10 (#0)"
      (> Var "t~21") (Typ TypParam "T")
     ) (@@ "pervasive/std_specs/option.rs:126:14: 126:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "T")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "T")))
         (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/option.rs:126:14: 126:20 (#0)" (> Var "option~2") (Typ Datatype "core!option.Option." ((Typ TypParam
            "T")))))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.option.spec_unwrap.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:26:10: 26:35 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path
   "vstd!std_specs.vec.VecAdditionalSpecFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:26:18: 26:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:26:28: 26:34 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
       "T"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:27:10: 27:44 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path
   "vstd!std_specs.vec.VecAdditionalSpecFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:27:24: 27:29 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
       "Self%")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:27:31: 27:37 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:27:42: 27:43 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:31:10: 31:34 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.impl&%0.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.")
   :impl_path "vstd!std_specs.vec.impl&%0." :trait_path "vstd!std_specs.vec.VecAdditionalSpecFns." :trait_typ_args ((Typ TypParam
     "T")
   ) :self_typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:31:18: 31:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:31:28: 31:34 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
       "T"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:34:15: 34:48 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.impl&%0.spec_index.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.vec.VecAdditionalSpecFns.spec_index."
   ) :impl_path "vstd!std_specs.vec.impl&%0." :trait_path "vstd!std_specs.vec.VecAdditionalSpecFns." :trait_typ_args ((Typ TypParam
     "T")
   ) :self_typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:34:29: 34:34 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:34:36: 34:42 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:34:47: 34:48 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/std_specs/vec.rs:34:49: 36:6 (#0)" (> Block () (@@ "pervasive/std_specs/vec.rs:35:9: 35:29 (#0)" (> Call
      (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "T")) () (AutospecUsage IfMarked))
      ((@@ "pervasive/std_specs/vec.rs:35:9: 35:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
            ((Typ TypParam "T") (Typ TypParam "A")) ())
          ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
              "A"))
           ) (Typ TypParam "T")
          ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/vec.rs:35:9: 35:13 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
             ((Typ TypParam "T") (Typ TypParam "A"))))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
       ) (@@ "pervasive/std_specs/vec.rs:35:27: 35:28 (#0)" (> Var "i~4") (Typ Int (IntRange Int))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:49:5: 49:42 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.impl&%1.set.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!std_specs.vec.VecAdditionalExecFns.set.")
   :impl_path "vstd!std_specs.vec.impl&%1." :trait_path "vstd!std_specs.vec.VecAdditionalExecFns." :trait_typ_args ((Typ TypParam
     "T")
   ) :self_typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:49:12: 49:21 (#0)" (Param :name "self~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:49:23: 49:31 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:49:33: 49:41 (#0)" (Param :name "value~6" :typ (Typ TypParam "T") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/std_specs/vec.rs:54:5: 54:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/vec.rs:51:13: 51:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/std_specs/vec.rs:51:13: 51:14 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/std_specs/vec.rs:51:17: 51:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "alloc!vec.impl&%1.len.")
        ((Typ TypParam "T") (Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:51:17: 51:26 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
           Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/vec.rs:53:13: 53:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:53:13: 53:18 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:53:13: 53:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:53:22: 53:56 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:53:22: 53:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:53:22: 53:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
              Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:53:40: 53:41 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/std_specs/vec.rs:53:50: 53:55 (#0)"
         (> Var "value~6") (Typ TypParam "T")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:61:5: 61:56 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.impl&%1.set_and_swap.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path
    "vstd!std_specs.vec.VecAdditionalExecFns.set_and_swap."
   ) :impl_path "vstd!std_specs.vec.impl&%1." :trait_path "vstd!std_specs.vec.VecAdditionalExecFns." :trait_typ_args ((Typ TypParam
     "T")
   ) :self_typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:61:21: 61:30 (#0)" (Param :name "self~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:61:32: 61:40 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:61:42: 61:55 (#0)" (Param :name "value~6" :typ (Typ TypParam "T") :mode Exec :is_mut true :unwrapped_info
     None))
  ) :ret (@ "pervasive/std_specs/vec.rs:67:5: 67:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/vec.rs:63:13: 63:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/std_specs/vec.rs:63:13: 63:14 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/std_specs/vec.rs:63:17: 63:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "alloc!vec.impl&%1.len.")
        ((Typ TypParam "T") (Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:63:17: 63:26 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
           Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/vec.rs:65:13: 65:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:65:13: 65:18 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:65:13: 65:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:65:22: 65:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:65:22: 65:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:65:22: 65:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
              Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:65:40: 65:41 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/std_specs/vec.rs:65:51: 65:61 (#0)"
         (> VarAt "value~6" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ TypParam "T"))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/vec.rs:66:13: 66:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:66:14: 66:19 (#0)"
      (> Var "value~6") (Typ Decorate (TypDecoration MutRef) (Typ TypParam "T"))
     ) (@@ "pervasive/std_specs/vec.rs:66:23: 66:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:66:23: 66:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:66:23: 66:32 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
              Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:66:40: 66:41 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:83:1: 83:77 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.vec_index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:83:35: 83:50 (#0)" (Param :name "vec~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
       ((Typ TypParam "T") (Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:83:52: 83:60 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:83:75: 83:77 (#0)" (Param :name "element~29" :typ (Typ Decorate (TypDecoration Ref) (Typ
      TypParam "T")
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/vec.rs:84:14: 84:15 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/std_specs/vec.rs:84:14: 84:15 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/std_specs/vec.rs:84:18: 84:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:84:18: 84:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:84:18: 84:21 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
              ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/vec.rs:85:13: 85:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:85:14: 85:21 (#0)"
      (> Var "element~29") (Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))
     ) (@@ "pervasive/std_specs/vec.rs:85:25: 85:51 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:85:25: 85:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:85:25: 85:28 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
              ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:85:42: 85:43 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:92:1: 92:71 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.spec_vec_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:92:48: 92:61 (#0)" (Param :name "v~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
       ((Typ TypParam "T") (Typ TypParam "A")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:92:66: 92:71 (#0)" (Param :name "%return" :typ (Typ Int (IntRange USize)) :mode Spec
    :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:99:1: 99:43 (#0)" (Function
  :name (Fun :path "vstd!std_specs.vec.axiom_spec_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!std_specs.vec." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:99:32: 99:42 (#0)" (Param :name "v~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
       ((Typ TypParam "A") (Typ Datatype "alloc!alloc.Global." ())))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:102:1: 102:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:101:9: 101:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:101:20: 101:35 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/std_specs/vec.rs:101:20: 101:35 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!std_specs.vec.spec_vec_len.") ((Typ TypParam "A") (Typ Datatype "alloc!alloc.Global."
            ())
          ) ((tuple "A" "alloc!alloc.impl&%1.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/vec.rs:101:33: 101:34 (#0)" (> Var "v~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
             ((Typ TypParam "A") (Typ Datatype "alloc!alloc.Global." ()))))))
        ) (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/std_specs/vec.rs:101:39: 101:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:101:39: 101:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "A") (Typ Datatype "alloc!alloc.Global." ())) ((tuple "A" "alloc!alloc.impl&%1.")))
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "A") (Typ Datatype
               "alloc!alloc.Global." ()))
            ) (Typ TypParam "A")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:101:39: 101:40 (#0)" (> Var "v~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
              ((Typ TypParam "A") (Typ Datatype "alloc!alloc.Global." ()))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:107:1: 107:67 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.len.") :proxy (@ "pervasive/std_specs/vec.rs:107:1: 107:67 (#0)" "vstd!std_specs.vec.ex_vec_len.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:107:36: 107:51 (#0)" (Param :name "vec~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:107:62: 107:67 (#0)" (Param :name "len~10" :typ (Typ Int (IntRange USize)) :mode Exec
    :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:109:9: 109:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:109:9: 109:12 (#0)"
      (> Var "len~10") (Typ Int (IntRange USize))
     ) (@@ "pervasive/std_specs/vec.rs:109:16: 109:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!std_specs.vec.spec_vec_len.")
        ((Typ TypParam "T") (Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:109:29: 109:32 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!std_specs.vec.spec_vec_len.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:117:1: 117:37 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%0.new.") :proxy (@ "pervasive/std_specs/vec.rs:117:1: 117:37 (#0)" "vstd!std_specs.vec.ex_vec_new.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/std_specs/vec.rs:117:31: 117:37 (#0)" (Param :name "v~8" :typ (Typ Datatype "alloc!vec.Vec."
     ((Typ TypParam "T") (Typ Datatype "alloc!alloc.Global." ()))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:119:9: 119:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:119:9: 119:11 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ Datatype
            "alloc!alloc.Global." ())
          ) ((tuple "A" "alloc!alloc.impl&%1.")))
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ Datatype
            "alloc!alloc.Global." ()))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:119:9: 119:10 (#0)" (> Var "v~8") (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ Datatype
            "alloc!alloc.Global." ())))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:119:15: 119:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:125:1: 125:62 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%0.with_capacity.") :proxy (@ "pervasive/std_specs/vec.rs:125:1: 125:62 (#0)" "vstd!std_specs.vec.ex_vec_with_capacity.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:125:32: 125:47 (#0)" (Param :name "capacity~2" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
     false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:125:56: 125:62 (#0)" (Param :name "v~10" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam
       "T"
      ) (Typ Datatype "alloc!alloc.Global." ()))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:127:9: 127:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:127:9: 127:11 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ Datatype
            "alloc!alloc.Global." ())
          ) ((tuple "A" "alloc!alloc.impl&%1.")))
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ Datatype
            "alloc!alloc.Global." ()))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:127:9: 127:10 (#0)" (> Var "v~10") (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ
            Datatype "alloc!alloc.Global." ())))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:127:15: 127:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:133:1: 133:79 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.reserve.") :proxy (@ "pervasive/std_specs/vec.rs:133:1: 133:79 (#0)" "vstd!std_specs.vec.ex_vec_reserve.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:133:40: 133:59 (#0)" (Param :name "vec~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:133:61: 133:78 (#0)" (Param :name "additional~4" :typ (Typ Int (IntRange USize)) :mode Exec
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:136:1: 136:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:135:9: 135:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:135:9: 135:13 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:135:9: 135:12 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:135:17: 135:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
          ((Typ TypParam "T") (Typ TypParam "A")) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:135:17: 135:25 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
           Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:141:1: 141:67 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.push.") :proxy (@ "pervasive/std_specs/vec.rs:141:1: 141:67 (#0)" "vstd!std_specs.vec.ex_vec_push.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:141:37: 141:56 (#0)" (Param :name "vec~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:141:58: 141:66 (#0)" (Param :name "value~4" :typ (Typ TypParam "T") :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:144:1: 144:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:143:9: 143:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:143:9: 143:13 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:143:9: 143:12 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:143:17: 143:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:143:17: 143:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:143:17: 143:25 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
              Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:143:32: 143:37 (#0)" (> Var "value~4") (Typ TypParam "T")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:149:1: 149:77 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.pop.") :proxy (@ "pervasive/std_specs/vec.rs:149:1: 149:77 (#0)" "vstd!std_specs.vec.ex_vec_pop.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:149:36: 149:55 (#0)" (Param :name "vec~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:149:68: 149:77 (#0)" (Param :name "value~10" :typ (Typ Datatype "core!option.Option."
     ((Typ TypParam "T"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:151:9: 151:12 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/std_specs/vec.rs:151:9: 151:12 (#0)"
      (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/std_specs/vec.rs:151:9: 151:24 (#0)" (> Call (CallTarget Fun
          (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "T")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/vec.rs:151:9: 151:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
               ((Typ TypParam "T") (Typ TypParam "A")) ())
             ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                 "A"))
              ) (Typ TypParam "T")
             ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
            ) ((@@ "pervasive/std_specs/vec.rs:151:9: 151:17 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/std_specs/vec.rs:151:27: 151:28 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/vec.rs:152:13: 153:19 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/std_specs/vec.rs:152:13: 152:18 (#0)"
        (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:152:13: 152:18 (#0)" (> Var "value~10") (Typ Datatype "core!option.Option."
           ((Typ TypParam "T")))
         ) (@@ "pervasive/std_specs/vec.rs:152:22: 152:58 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/std_specs/vec.rs:152:27: 152:30 (#0)"
              (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "T")) () (AutospecUsage
                 IfMarked)
               ) ((@@ "pervasive/std_specs/vec.rs:152:27: 152:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
                     ((Typ TypParam "T") (Typ TypParam "A")) ())
                   ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                       "A"))
                    ) (Typ TypParam "T")
                   ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/std_specs/vec.rs:152:27: 152:35 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
                      Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
                ) (@@ "pervasive/std_specs/vec.rs:152:37: 152:40 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/std_specs/vec.rs:152:37: 152:52 (#0)"
                   (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "T")) () (AutospecUsage IfMarked))
                    ((@@ "pervasive/std_specs/vec.rs:152:37: 152:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
                          ((Typ TypParam "T") (Typ TypParam "A")) ())
                        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                            "A"))
                         ) (Typ TypParam "T")
                        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/std_specs/vec.rs:152:37: 152:45 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
                           Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
                      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
                   ) (Typ Int (IntRange Nat))
                  ) (@@ "pervasive/std_specs/vec.rs:152:55: 152:56 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                 ) (Typ Int (IntRange Int))))
              ) (Typ TypParam "T")))
           ) None
          ) (Typ Datatype "core!option.Option." ((Typ TypParam "T"))))
        ) (Typ Bool)
       ) (@@ "pervasive/std_specs/vec.rs:153:16: 153:19 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:153:16: 153:20 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
                "A")
              ) ())
            ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                "A"))
             ) (Typ TypParam "T")
            ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
           ) ((@@ "pervasive/std_specs/vec.rs:153:16: 153:19 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
               ((Typ TypParam "T") (Typ TypParam "A"))))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
         ) (@@ "pervasive/std_specs/vec.rs:153:24: 153:66 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
            ((Typ TypParam "T")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/std_specs/vec.rs:153:24: 153:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
                 ((Typ TypParam "T") (Typ TypParam "A")) ())
               ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                   "A"))
                ) (Typ TypParam "T")
               ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
              ) ((@@ "pervasive/std_specs/vec.rs:153:24: 153:32 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
                  Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
             ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
            ) (@@ "pervasive/std_specs/vec.rs:153:43: 153:44 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))) (@@ "pervasive/std_specs/vec.rs:153:46: 153:49 (#0)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/std_specs/vec.rs:153:46: 153:61 (#0)" (> Call (CallTarget Fun (CallTargetKind
                  Static
                 ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "T")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/std_specs/vec.rs:153:46: 153:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
                      ((Typ TypParam "T") (Typ TypParam "A")) ())
                    ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                        "A"))
                     ) (Typ TypParam "T")
                    ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/std_specs/vec.rs:153:46: 153:54 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
                       Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
               ) (Typ Int (IntRange Nat))
              ) (@@ "pervasive/std_specs/vec.rs:153:64: 153:65 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/vec.rs:154:9: 154:12 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/std_specs/vec.rs:154:9: 154:12 (#0)"
      (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:154:9: 154:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
          (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "T")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/std_specs/vec.rs:154:9: 154:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
               ((Typ TypParam "T") (Typ TypParam "A")) ())
             ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                 "A"))
              ) (Typ TypParam "T")
             ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
            ) ((@@ "pervasive/std_specs/vec.rs:154:9: 154:17 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/std_specs/vec.rs:154:28: 154:29 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
      ) (Typ Bool)
     ) (@@ "pervasive/std_specs/vec.rs:155:13: 156:19 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/std_specs/vec.rs:155:13: 155:18 (#0)"
        (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:155:13: 155:18 (#0)" (> Var "value~10") (Typ Datatype "core!option.Option."
           ((Typ TypParam "T")))
         ) (@@ "pervasive/std_specs/vec.rs:155:22: 155:31 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
           ((Typ TypParam "T"))))
        ) (Typ Bool)
       ) (@@ "pervasive/std_specs/vec.rs:156:16: 156:19 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:156:16: 156:20 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
                "A")
              ) ())
            ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                "A"))
             ) (Typ TypParam "T")
            ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
           ) ((@@ "pervasive/std_specs/vec.rs:156:16: 156:19 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
               ((Typ TypParam "T") (Typ TypParam "A"))))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
         ) (@@ "pervasive/std_specs/vec.rs:156:24: 156:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
              ((Typ TypParam "T") (Typ TypParam "A")) ())
            ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
                "A"))
             ) (Typ TypParam "T")
            ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
           ) ((@@ "pervasive/std_specs/vec.rs:156:24: 156:32 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
               Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:162:1: 162:78 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.append.") :proxy (@ "pervasive/std_specs/vec.rs:162:1: 162:78 (#0)" "vstd!std_specs.vec.ex_append.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:162:35: 162:54 (#0)" (Param :name "vec~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:162:56: 162:77 (#0)" (Param :name "other~4" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam
        "T"
       ) (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:166:1: 166:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:164:9: 164:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:164:9: 164:13 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:164:9: 164:12 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:164:17: 164:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:164:17: 164:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:164:17: 164:25 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
              Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:164:29: 164:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:164:29: 164:39 (#0)" (> VarAt "other~4" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef)
             (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/vec.rs:165:9: 165:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:165:9: 165:15 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:165:9: 165:14 (#0)" (> Var "other~4") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:165:19: 165:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:189:1: 189:81 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.insert.") :proxy (@ "pervasive/std_specs/vec.rs:189:1: 189:81 (#0)" "vstd!std_specs.vec.ex_vec_insert.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:189:39: 189:58 (#0)" (Param :name "vec~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:189:60: 189:68 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:189:70: 189:80 (#0)" (Param :name "element~6" :typ (Typ TypParam "T") :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:194:1: 194:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/vec.rs:191:9: 191:10 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/std_specs/vec.rs:191:9: 191:10 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/std_specs/vec.rs:191:14: 191:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "alloc!vec.impl&%1.len.")
        ((Typ TypParam "T") (Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:191:14: 191:22 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
           Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/vec.rs:193:9: 193:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:193:9: 193:13 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:193:9: 193:12 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:193:17: 193:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.insert.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:193:17: 193:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:193:17: 193:25 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
              Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:193:34: 193:35 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/std_specs/vec.rs:193:44: 193:51 (#0)"
         (> Var "element~6") (Typ TypParam "T")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:199:1: 199:84 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.remove.") :proxy (@ "pervasive/std_specs/vec.rs:199:1: 199:84 (#0)" "vstd!std_specs.vec.ex_vec_remove.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:199:39: 199:58 (#0)" (Param :name "vec~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/std_specs/vec.rs:199:60: 199:68 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:199:83: 199:84 (#0)" (Param :name "element~30" :typ (Typ TypParam "T") :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/std_specs/vec.rs:201:9: 201:10 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/std_specs/vec.rs:201:9: 201:10 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/std_specs/vec.rs:201:13: 201:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "alloc!vec.impl&%1.len.")
        ((Typ TypParam "T") (Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:201:13: 201:21 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
           Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/std_specs/vec.rs:203:9: 203:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:203:9: 203:16 (#0)"
      (> Var "element~30") (Typ TypParam "T")
     ) (@@ "pervasive/std_specs/vec.rs:203:20: 203:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.spec_index.")
          ((Typ TypParam "T") (Typ TypParam "A")) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.spec_index.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ
            TypParam "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:203:20: 203:28 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
           Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))
        ) (@@ "pervasive/std_specs/vec.rs:203:29: 203:30 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
   (@@ "pervasive/std_specs/vec.rs:204:9: 204:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:204:9: 204:13 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:204:9: 204:12 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:204:17: 204:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.remove.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:204:17: 204:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
             ((Typ TypParam "T") (Typ TypParam "A")) ())
           ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
               "A"))
            ) (Typ TypParam "T")
           ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/std_specs/vec.rs:204:17: 204:25 (#0)" (> VarAt "vec~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (
              Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/std_specs/vec.rs:204:34: 204:35 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:210:1: 210:58 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.clear.") :proxy (@ "pervasive/std_specs/vec.rs:210:1: 210:58 (#0)" "vstd!std_specs.vec.ex_vec_clear.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:210:38: 210:57 (#0)" (Param :name "vec~2" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
       (Typ TypParam "A"))
     ) :mode Exec :is_mut true :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:212:1: 212:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:211:13: 211:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:211:13: 211:23 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ TypParam
            "A")
          ) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:211:13: 211:16 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:211:27: 211:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/std_specs/vec.rs:217:1: 217:73 (#0)" (Function
  :name (Fun :path "alloc!vec.impl&%1.as_slice.") :proxy (@ "pervasive/std_specs/vec.rs:217:1: 217:73 (#0)" "vstd!std_specs.vec.ex_vec_as_slice.")
  :kind (FunctionKind Static) :visibility (Visibility :restricted_to None) :owning_module "vstd!std_specs.vec." :mode Exec
  :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "A" (GenericBound Traits ("core!alloc.Allocator.")))
  ) :params (
   (@ "pervasive/std_specs/vec.rs:217:41: 217:56 (#0)" (Param :name "vec~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/std_specs/vec.rs:217:69: 217:73 (#0)" (Param :name "slice~10" :typ (Typ Decorate (TypDecoration Ref) (Typ
      Datatype "slice%." ((Typ TypParam "T")))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/std_specs/vec.rs:218:13: 218:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/std_specs/vec.rs:218:13: 218:19 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.") ((Typ TypParam "T")) ())) (Fun
         :path "vstd!slice.SliceAdditionalSpecFns.view."
        ) ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T")) ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:218:13: 218:18 (#0)" (> Var "slice~10") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
           ((Typ TypParam "T"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/std_specs/vec.rs:218:23: 218:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.")
          ((Typ TypParam "T") (Typ TypParam "A")) ())
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ TypParam
            "A"))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/std_specs/vec.rs:218:23: 218:26 (#0)" (> Var "vec~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "alloc!vec.Vec."
           ((Typ TypParam "T") (Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/pervasive.rs:15:1: 15:29 (#0)" (Function
  :name (Fun :path "vstd!pervasive.assume.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/pervasive.rs:15:21: 15:28 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/pervasive.rs:17:1: 17:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/pervasive.rs:16:13: 16:14 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/pervasive.rs:17:1: 19:2 (#0)" (> Block (
     (@ "pervasive/pervasive.rs:18:5: 18:12 (#0)" (Stmt Expr (@@ "pervasive/pervasive.rs:18:5: 18:12 (#0)" (> AssertAssume :is_assume
         true :expr (@@ "pervasive/pervasive.rs:18:5: 18:12 (#0)" (> Const (Constant Bool false)) (Typ Bool))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/pervasive.rs:23:1: 23:29 (#0)" (Function
  :name (Fun :path "vstd!pervasive.assert.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/pervasive.rs:23:21: 23:28 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/pervasive.rs:26:1: 26:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/pervasive.rs:24:14: 24:15 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/pervasive.rs:25:13: 25:14 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "assertion failure" :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/pervasive.rs:26:1: 27:2 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies ()))

(@ "pervasive/pervasive.rs:29:1: 29:29 (#0)" (Function
  :name (Fun :path "vstd!pervasive.affirm.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/pervasive.rs:29:21: 29:28 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/pervasive.rs:31:1: 31:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/pervasive.rs:30:14: 30:15 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/pervasive.rs:31:1: 32:2 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies ()))

(@ "pervasive/pervasive.rs:44:1: 45:41 (#0)" (Function
  :name (Fun :path "vstd!pervasive.exec_nonstatic_call.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Exec :fuel 1 :typ_bounds (
   (tuple "Args" (GenericBound Traits ()))
   (tuple "Output" (GenericBound Traits ()))
   (tuple "F" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/pervasive.rs:44:61: 44:65 (#0)" (Param :name "f~2" :typ (Typ TypParam "F") :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/pervasive.rs:44:67: 44:77 (#0)" (Param :name "args~4" :typ (Typ TypParam "Args") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/pervasive.rs:44:91: 44:97 (#0)" (Param :name "output~25" :typ (Typ TypParam "Output") :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/pervasive.rs:46:14: 46:30 (#0)" (> Call (CallTarget BuiltinSpecFun (BuiltinSpecFun ClosureReq) ((Typ TypParam "F")
       (Typ TypParam "Args"))
     ) ((@@ "pervasive/pervasive.rs:46:14: 46:15 (#0)" (> Var "f~2") (Typ TypParam "F")) (@@ "pervasive/pervasive.rs:46:25: 46:29 (#0)"
       (> Var "args~4") (Typ TypParam "Args")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/pervasive.rs:47:13: 47:36 (#0)" (> Call (CallTarget BuiltinSpecFun (BuiltinSpecFun ClosureEns) ((Typ TypParam "F")
       (Typ TypParam "Args"))
     ) ((@@ "pervasive/pervasive.rs:47:13: 47:14 (#0)" (> Var "f~2") (Typ TypParam "F")) (@@ "pervasive/pervasive.rs:47:23: 47:27 (#0)"
       (> Var "args~4") (Typ TypParam "Args")
      ) (@@ "pervasive/pervasive.rs:47:29: 47:35 (#0)" (> Var "output~25") (Typ TypParam "Output")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "Call to non-static function fails to satisfy `callee.requires(args)`" :autospec None :bit_vector false
   :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize
   false
  ) :body None :extra_dependencies ()))

(@ "pervasive/pervasive.rs:71:1: 71:48 (#0)" (Function
  :name (Fun :path "vstd!pervasive.spec_affirm.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/pervasive.rs:71:32: 71:39 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/pervasive.rs:71:44: 71:48 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/pervasive.rs:72:16: 72:17 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/pervasive.rs:73:1: 75:2 (#0)" (> Block () (@@ "pervasive/pervasive.rs:74:5: 74:6 (#0)" (> Var "b~2")
     (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/pervasive.rs:80:1: 80:39 (#0)" (Function
  :name (Fun :path "vstd!pervasive.arbitrary.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/pervasive.rs:80:38: 80:39 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/pervasive.rs:86:1: 86:52 (#0)" (Function
  :name (Fun :path "vstd!pervasive.proof_from_false.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/pervasive.rs:86:51: 86:52 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/pervasive.rs:87:14: 87:19 (#0)" (> Const (Constant Bool false)) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/pervasive.rs:94:1: 94:27 (#0)" (Function
  :name (Fun :path "vstd!pervasive.unreached.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/pervasive.rs:94:26: 94:27 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/pervasive.rs:95:14: 95:19 (#0)" (> Const (Constant Bool false)) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/pervasive.rs:101:1: 101:25 (#0)" (Function
  :name (Fun :path "vstd!pervasive.print_u64.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!pervasive." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/pervasive.rs:101:18: 101:24 (#0)" (Param :name "i~2" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/pervasive.rs:101:26: 101:26 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/pervasive.rs:107:1: 107:37 (#0)" (Function
  :name (Fun :path "vstd!pervasive.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!pervasive." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/pervasive.rs:107:16: 107:25 (#0)" (Param :name "x~2" :typ (Typ TypParam "A") :mode Exec :is_mut true :unwrapped_info
     None))
   (@ "pervasive/pervasive.rs:107:27: 107:36 (#0)" (Param :name "y~4" :typ (Typ TypParam "A") :mode Exec :is_mut true :unwrapped_info
     None))
  ) :ret (@ "pervasive/pervasive.rs:111:1: 111:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/pervasive.rs:109:9: 109:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/pervasive.rs:109:10: 109:11 (#0)"
      (> Var "x~2") (Typ Decorate (TypDecoration MutRef) (Typ TypParam "A"))
     ) (@@ "pervasive/pervasive.rs:109:16: 109:22 (#0)" (> VarAt "y~4" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ TypParam
        "A")))
    ) (Typ Bool))
   (@@ "pervasive/pervasive.rs:110:9: 110:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/pervasive.rs:110:10: 110:11 (#0)"
      (> Var "y~4") (Typ Decorate (TypDecoration MutRef) (Typ TypParam "A"))
     ) (@@ "pervasive/pervasive.rs:110:16: 110:22 (#0)" (> VarAt "x~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ TypParam
        "A")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/bytes.rs:16:1: 16:59 (#0)" (Function
  :name (Fun :path "vstd!bytes.spec_u64_to_le_bytes.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!bytes." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/bytes.rs:16:41: 16:47 (#0)" (Param :name "x~2" :typ (Typ Int (IntRange U 64)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/bytes.rs:16:52: 16:59 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange
        U 8)))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/bytes.rs:17:1: 28:2 (#0)" (> Block () (@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
          ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
             ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
                ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
                   ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
                      ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
                         ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq.rs:347:9: 348:27 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
                            ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/seq.rs:347:9: 347:34 (#768)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
                               ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                              ) ()
                             ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                            ) (@@ "pervasive/bytes.rs:19:5: 19:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:19:5: 19:15 (#0)"
                               (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:19:6: 19:7 (#0)" (> Var "x~2") (Typ Int (IntRange
                                   U 64))
                                ) (@@ "pervasive/bytes.rs:19:10: 19:14 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                               ) (Typ Int (IntRange U 64)))
                             ) (Typ Int (IntRange U 8))))
                          ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                         ) (@@ "pervasive/bytes.rs:20:5: 20:22 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:20:5: 20:22 (#0)"
                            (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:20:6: 20:14 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                 Shr
                                ) Spec
                               ) (@@ "pervasive/bytes.rs:20:7: 20:8 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:20:12: 20:13 (#0)"
                                (> Const (Constant Int 8)) (Typ Int (IntRange U 64)))
                              ) (Typ Int (IntRange U 64))
                             ) (@@ "pervasive/bytes.rs:20:17: 20:21 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                            ) (Typ Int (IntRange U 64)))
                          ) (Typ Int (IntRange U 8))))
                       ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                      ) (@@ "pervasive/bytes.rs:21:5: 21:23 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:21:5: 21:23 (#0)"
                         (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:21:6: 21:15 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                              Shr
                             ) Spec
                            ) (@@ "pervasive/bytes.rs:21:7: 21:8 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:21:12: 21:14 (#0)"
                             (> Const (Constant Int 16)) (Typ Int (IntRange U 64)))
                           ) (Typ Int (IntRange U 64))
                          ) (@@ "pervasive/bytes.rs:21:18: 21:22 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                         ) (Typ Int (IntRange U 64)))
                       ) (Typ Int (IntRange U 8))))
                    ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                   ) (@@ "pervasive/bytes.rs:22:5: 22:23 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:22:5: 22:23 (#0)"
                      (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:22:6: 22:15 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                           Shr
                          ) Spec
                         ) (@@ "pervasive/bytes.rs:22:7: 22:8 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:22:12: 22:14 (#0)"
                          (> Const (Constant Int 24)) (Typ Int (IntRange U 64)))
                        ) (Typ Int (IntRange U 64))
                       ) (@@ "pervasive/bytes.rs:22:18: 22:22 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                      ) (Typ Int (IntRange U 64)))
                    ) (Typ Int (IntRange U 8))))
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                ) (@@ "pervasive/bytes.rs:23:5: 23:23 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:23:5: 23:23 (#0)"
                   (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:23:6: 23:15 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                        Shr
                       ) Spec
                      ) (@@ "pervasive/bytes.rs:23:7: 23:8 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:23:12: 23:14 (#0)"
                       (> Const (Constant Int 32)) (Typ Int (IntRange U 64)))
                     ) (Typ Int (IntRange U 64))
                    ) (@@ "pervasive/bytes.rs:23:18: 23:22 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                   ) (Typ Int (IntRange U 64)))
                 ) (Typ Int (IntRange U 8))))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
             ) (@@ "pervasive/bytes.rs:24:5: 24:23 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:24:5: 24:23 (#0)"
                (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:24:6: 24:15 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                     Shr
                    ) Spec
                   ) (@@ "pervasive/bytes.rs:24:7: 24:8 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:24:12: 24:14 (#0)"
                    (> Const (Constant Int 40)) (Typ Int (IntRange U 64)))
                  ) (Typ Int (IntRange U 64))
                 ) (@@ "pervasive/bytes.rs:24:18: 24:22 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                ) (Typ Int (IntRange U 64)))
              ) (Typ Int (IntRange U 8))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
          ) (@@ "pervasive/bytes.rs:25:5: 25:23 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:25:5: 25:23 (#0)"
             (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:25:6: 25:15 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                  Shr
                 ) Spec
                ) (@@ "pervasive/bytes.rs:25:7: 25:8 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:25:12: 25:14 (#0)"
                 (> Const (Constant Int 48)) (Typ Int (IntRange U 64)))
               ) (Typ Int (IntRange U 64))
              ) (@@ "pervasive/bytes.rs:25:18: 25:22 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
             ) (Typ Int (IntRange U 64)))
           ) (Typ Int (IntRange U 8))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
       ) (@@ "pervasive/bytes.rs:26:5: 26:23 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/bytes.rs:26:5: 26:23 (#0)"
          (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:26:6: 26:15 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
               Shr
              ) Spec
             ) (@@ "pervasive/bytes.rs:26:7: 26:8 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:26:12: 26:14 (#0)"
              (> Const (Constant Int 56)) (Typ Int (IntRange U 64)))
            ) (Typ Int (IntRange U 64))
           ) (@@ "pervasive/bytes.rs:26:18: 26:22 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
          ) (Typ Int (IntRange U 64)))
        ) (Typ Int (IntRange U 8))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
  ) :extra_dependencies ()))

(@ "pervasive/bytes.rs:30:1: 30:61 (#0)" (Function
  :name (Fun :path "vstd!bytes.spec_u64_from_le_bytes.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!bytes." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/bytes.rs:30:43: 30:53 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/bytes.rs:30:58: 30:61 (#0)" (Param :name "%return" :typ (Typ Int (IntRange U 64)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/bytes.rs:31:14: 31:15 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:31:14: 31:21 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/bytes.rs:31:14: 31:15 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/bytes.rs:31:25: 31:26 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/bytes.rs:32:1: 41:2 (#0)" (> Block () (@@ "pervasive/bytes.rs:33:3: 33:16 (#0)" (> Binary (BinaryOp Bitwise
       (BitwiseOp BitOr) Spec
      ) (@@ "pervasive/bytes.rs:33:3: 33:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:33:3: 33:16 (#0)"
         (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:33:3: 33:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
              BitOr
             ) Spec
            ) (@@ "pervasive/bytes.rs:33:3: 33:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:33:3: 33:16 (#0)"
               (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:33:3: 33:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                    BitOr
                   ) Spec
                  ) (@@ "pervasive/bytes.rs:33:4: 33:5 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:33:4: 33:5 (#0)"
                     (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage
                        IfMarked)
                      ) ((@@ "pervasive/bytes.rs:33:4: 33:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:33:6: 33:7 (#0)"
                        (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
                     ) (Typ Int (IntRange U 8)))
                   ) (Typ Int (IntRange U 64))
                  ) (@@ "pervasive/bytes.rs:34:3: 34:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:34:4: 34:5 (#0)"
                     (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:34:4: 34:5 (#0)" (> Call (CallTarget Fun
                         (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/bytes.rs:34:4: 34:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:34:6: 34:7 (#0)"
                          (> Const (Constant Int 1)) (Typ Int (IntRange Int))))
                       ) (Typ Int (IntRange U 8)))
                     ) (Typ Int (IntRange U 64))
                    ) (@@ "pervasive/bytes.rs:34:20: 34:21 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange U 64)))
                   ) (Typ Int (IntRange U 64)))
                 ) (Typ Int (IntRange U 64))
                ) (@@ "pervasive/bytes.rs:35:3: 35:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:35:4: 35:5 (#0)"
                   (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:35:4: 35:5 (#0)" (> Call (CallTarget Fun
                       (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/bytes.rs:35:4: 35:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:35:6: 35:7 (#0)"
                        (> Const (Constant Int 2)) (Typ Int (IntRange Int))))
                     ) (Typ Int (IntRange U 8)))
                   ) (Typ Int (IntRange U 64))
                  ) (@@ "pervasive/bytes.rs:35:20: 35:22 (#0)" (> Const (Constant Int 16)) (Typ Int (IntRange U 64)))
                 ) (Typ Int (IntRange U 64)))
               ) (Typ Int (IntRange U 64))
              ) (@@ "pervasive/bytes.rs:36:3: 36:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:36:4: 36:5 (#0)"
                 (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:36:4: 36:5 (#0)" (> Call (CallTarget Fun
                     (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:36:4: 36:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:36:6: 36:7 (#0)"
                      (> Const (Constant Int 3)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64))
                ) (@@ "pervasive/bytes.rs:36:20: 36:22 (#0)" (> Const (Constant Int 24)) (Typ Int (IntRange U 64)))
               ) (Typ Int (IntRange U 64)))
             ) (Typ Int (IntRange U 64))
            ) (@@ "pervasive/bytes.rs:37:3: 37:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:37:4: 37:5 (#0)"
               (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:37:4: 37:5 (#0)" (> Call (CallTarget Fun
                   (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/bytes.rs:37:4: 37:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:37:6: 37:7 (#0)"
                    (> Const (Constant Int 4)) (Typ Int (IntRange Int))))
                 ) (Typ Int (IntRange U 8)))
               ) (Typ Int (IntRange U 64))
              ) (@@ "pervasive/bytes.rs:37:20: 37:22 (#0)" (> Const (Constant Int 32)) (Typ Int (IntRange U 64)))
             ) (Typ Int (IntRange U 64)))
           ) (Typ Int (IntRange U 64))
          ) (@@ "pervasive/bytes.rs:38:3: 38:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:38:4: 38:5 (#0)"
             (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:38:4: 38:5 (#0)" (> Call (CallTarget Fun
                 (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/bytes.rs:38:4: 38:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:38:6: 38:7 (#0)"
                  (> Const (Constant Int 5)) (Typ Int (IntRange Int))))
               ) (Typ Int (IntRange U 8)))
             ) (Typ Int (IntRange U 64))
            ) (@@ "pervasive/bytes.rs:38:20: 38:22 (#0)" (> Const (Constant Int 40)) (Typ Int (IntRange U 64)))
           ) (Typ Int (IntRange U 64)))
         ) (Typ Int (IntRange U 64))
        ) (@@ "pervasive/bytes.rs:39:3: 39:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:39:4: 39:5 (#0)"
           (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:39:4: 39:5 (#0)" (> Call (CallTarget Fun
               (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/bytes.rs:39:4: 39:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:39:6: 39:7 (#0)"
                (> Const (Constant Int 6)) (Typ Int (IntRange Int))))
             ) (Typ Int (IntRange U 8)))
           ) (Typ Int (IntRange U 64))
          ) (@@ "pervasive/bytes.rs:39:20: 39:22 (#0)" (> Const (Constant Int 48)) (Typ Int (IntRange U 64)))
         ) (Typ Int (IntRange U 64)))
       ) (Typ Int (IntRange U 64))
      ) (@@ "pervasive/bytes.rs:40:3: 40:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:40:4: 40:5 (#0)"
         (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false) (@@ "pervasive/bytes.rs:40:4: 40:5 (#0)" (> Call (CallTarget Fun
             (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/bytes.rs:40:4: 40:5 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (@@ "pervasive/bytes.rs:40:6: 40:7 (#0)"
              (> Const (Constant Int 7)) (Typ Int (IntRange Int))))
           ) (Typ Int (IntRange U 8)))
         ) (Typ Int (IntRange U 64))
        ) (@@ "pervasive/bytes.rs:40:20: 40:22 (#0)" (> Const (Constant Int 56)) (Typ Int (IntRange U 64)))
       ) (Typ Int (IntRange U 64)))
     ) (Typ Int (IntRange U 64)))
   ) (Typ Int (IntRange U 64))
  ) :extra_dependencies ()))

(@ "pervasive/bytes.rs:43:1: 43:52 (#0)" (Function
  :name (Fun :path "vstd!bytes.lemma_auto_spec_u64_to_from_le_bytes.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!bytes." :mode Proof :fuel 1 :typ_bounds () :params () :ret (@ "pervasive/bytes.rs:54:1: 54:1 (#0)"
   (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/bytes.rs:45:5: 45:11 (#0)" (> Quant (Forall :boxed_params true) ((-> x~14 (Typ Int (IntRange U 64)))) (@@ "pervasive/bytes.rs:45:5: 45:11 (#0)"
      (> WithTriggers :triggers (((@@ "pervasive/bytes.rs:46:18: 46:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
             "vstd!bytes.spec_u64_to_le_bytes."
            ) () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/bytes.rs:46:39: 46:40 (#0)" (> Var "x~14") (Typ Int (IntRange U 64))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
       ) :body (@@ "pervasive/bytes.rs:47:5: 50:6 (#0)" (> Block () (@@ "pervasive/bytes.rs:48:11: 49:33 (#0)" (> Binary (BinaryOp And)
           (@@ "pervasive/bytes.rs:48:11: 48:31 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:48:11: 48:40 (#0)" (> Call (CallTarget
                Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/bytes.rs:48:11: 48:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/bytes.rs:48:32: 48:33 (#0)" (> Var "x~14") (Typ Int (IntRange U 64))))
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
              ) (Typ Int (IntRange Nat))
             ) (@@ "pervasive/bytes.rs:48:44: 48:45 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat)))
            ) (Typ Bool)
           ) (@@ "pervasive/bytes.rs:49:11: 49:33 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:49:11: 49:58 (#0)" (> Call
               (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.") () () (AutospecUsage IfMarked))
               ((@@ "pervasive/bytes.rs:49:34: 49:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/bytes.rs:49:55: 49:56 (#0)" (> Var "x~14") (Typ Int (IntRange U 64))))
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
              ) (Typ Int (IntRange U 64))
             ) (@@ "pervasive/bytes.rs:49:62: 49:63 (#0)" (> Var "x~14") (Typ Int (IntRange U 64)))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/bytes.rs:51:5: 51:11 (#0)" (> Quant (Forall :boxed_params true) ((-> s~72 (Typ Datatype "vstd!seq.Seq." ((Typ Int
          (IntRange U 8)))))
     ) (@@ "pervasive/bytes.rs:51:5: 51:11 (#0)" (> WithTriggers :triggers (((@@ "pervasive/bytes.rs:52:18: 52:65 (#0)" (> Call (CallTarget
            Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.") () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/bytes.rs:52:39: 52:64 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.")
               () () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/bytes.rs:52:62: 52:63 (#0)" (> Var "s~72") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
             ) (Typ Int (IntRange U 64))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
       ) :body (@@ "pervasive/bytes.rs:53:7: 53:8 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/bytes.rs:53:7: 53:8 (#0)" (> Binary
           (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:53:7: 53:14 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
              ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/bytes.rs:53:7: 53:8 (#0)" (> Var "s~72") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
            ) (Typ Int (IntRange Nat))
           ) (@@ "pervasive/bytes.rs:53:18: 53:19 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat)))
          ) (Typ Bool)
         ) (@@ "pervasive/bytes.rs:53:24: 53:44 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:53:24: 53:71 (#0)" (> Call
             (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.") () () (AutospecUsage IfMarked)) ((@@
               "pervasive/bytes.rs:53:45: 53:70 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.")
                 () () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/bytes.rs:53:68: 53:69 (#0)" (> Var "s~72") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
               ) (Typ Int (IntRange U 64))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
           ) (@@ "pervasive/bytes.rs:53:75: 53:76 (#0)" (> Var "s~72") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/bytes.rs:54:1: 110:2 (#0)" (> Block (
     (@ "pervasive/bytes.rs:55:3: 55:9 (#0)" (Stmt Expr (@@ "pervasive/bytes.rs:55:3: 55:9 (#0)" (> Block (
          (@ "pervasive/bytes.rs:55:3: 55:9 (#0)" (Stmt Expr (@@ "pervasive/bytes.rs:55:3: 55:9 (#0)" (> AssertBy :vars ((-> x~136 (Typ Int
                 (IntRange U 64)))
              ) :require (
               @@
               "pervasive/bytes.rs:55:3: 55:9 (#0)"
               (> Const (Constant Bool true))
               (Typ Bool)
              ) :ensure (
               @@
               "pervasive/bytes.rs:55:27: 58:4 (#0)"
               (> Block () (@@ "pervasive/bytes.rs:56:9: 57:31 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:56:9: 56:10 (#0)" (> Binary
                    (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:56:20: 56:49 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (
                       @@ "pervasive/bytes.rs:56:20: 56:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") (
                          (Typ Int (IntRange U 8))
                         ) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/bytes.rs:56:20: 56:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                            () () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/bytes.rs:56:41: 56:42 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))))
                          ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                       ) (Typ Int (IntRange Nat)))
                     ) (Typ Int (IntRange Nat))
                    ) (@@ "pervasive/bytes.rs:56:53: 56:54 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat)))
                   ) (Typ Bool)
                  ) (@@ "pervasive/bytes.rs:57:9: 57:31 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:57:9: 57:56 (#0)" (> Call (CallTarget
                       Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.") () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/bytes.rs:57:32: 57:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                          () () (AutospecUsage IfMarked)
                         ) ((@@ "pervasive/bytes.rs:57:53: 57:54 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))))
                        ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                     ) (Typ Int (IntRange U 64))
                    ) (@@ "pervasive/bytes.rs:57:60: 57:61 (#0)" (> Var "x~136") (Typ Int (IntRange U 64)))
                   ) (Typ Bool))
                 ) (Typ Bool)))
               (Typ Bool)
              ) :proof (@@ "pervasive/bytes.rs:58:8: 80:4 (#0)" (> Block (
                 (@ "pervasive/bytes.rs:59:9: 59:10 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:59:9: 59:10 (#0)" (Pattern Var :name "s~187"
                     :mutable false
                    ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                   ) :mode Spec :init (@@ "pervasive/bytes.rs:59:13: 59:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/bytes.rs:59:34: 59:35 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))))
                    ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))))
                 (@ "pervasive/bytes.rs:60:5: 60:11 (#0)" (Stmt Expr (@@ "pervasive/bytes.rs:60:5: 60:11 (#0)" (> Block () (@@ "pervasive/bytes.rs:60:5: 60:11 (#0)"
                      (> AssertQuery :requires ((@@ "pervasive/bytes.rs:60:5: 60:11 (#0)" (> Const (Constant Bool true)) (Typ Bool))) :ensures (
                        (@@ "pervasive/bytes.rs:60:12: 69:6 (#0)" (> Block () (@@ "pervasive/bytes.rs:61:11: 68:20 (#0)" (> Binary (BinaryOp And) (@@
                             "pervasive/bytes.rs:61:11: 67:20 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:61:11: 66:20 (#0)" (> Binary (BinaryOp
                                 And
                                ) (@@ "pervasive/bytes.rs:61:11: 65:20 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:61:11: 64:20 (#0)" (> Binary (BinaryOp
                                     And
                                    ) (@@ "pervasive/bytes.rs:61:11: 63:20 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:61:11: 62:19 (#0)" (> Binary (BinaryOp
                                         And
                                        ) (@@ "pervasive/bytes.rs:61:11: 61:12 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:61:11: 61:12 (#0)"
                                           (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:61:11: 61:12 (#0)" (> Var "x~136") (Typ Int (IntRange
                                               U 64))
                                            ) (@@ "pervasive/bytes.rs:61:15: 61:19 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                           ) (Typ Int (IntRange U 64))
                                          ) (@@ "pervasive/bytes.rs:61:22: 61:25 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                         ) (Typ Bool)
                                        ) (@@ "pervasive/bytes.rs:62:11: 62:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:62:11: 62:19 (#0)"
                                           (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:62:11: 62:19 (#0)" (> Binary (BinaryOp Bitwise (
                                                BitwiseOp Shr
                                               ) Spec
                                              ) (@@ "pervasive/bytes.rs:62:12: 62:13 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:62:17: 62:18 (#0)"
                                               (> Const (Constant Int 8)) (Typ Int (IntRange U 64)))
                                             ) (Typ Int (IntRange U 64))
                                            ) (@@ "pervasive/bytes.rs:62:22: 62:26 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                           ) (Typ Int (IntRange U 64))
                                          ) (@@ "pervasive/bytes.rs:62:29: 62:32 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                         ) (Typ Bool))
                                       ) (Typ Bool)
                                      ) (@@ "pervasive/bytes.rs:63:11: 63:20 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:63:11: 63:20 (#0)"
                                         (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:63:11: 63:20 (#0)" (> Binary (BinaryOp Bitwise (
                                              BitwiseOp Shr
                                             ) Spec
                                            ) (@@ "pervasive/bytes.rs:63:12: 63:13 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:63:17: 63:19 (#0)"
                                             (> Const (Constant Int 16)) (Typ Int (IntRange U 64)))
                                           ) (Typ Int (IntRange U 64))
                                          ) (@@ "pervasive/bytes.rs:63:23: 63:27 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                         ) (Typ Int (IntRange U 64))
                                        ) (@@ "pervasive/bytes.rs:63:30: 63:33 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                       ) (Typ Bool))
                                     ) (Typ Bool)
                                    ) (@@ "pervasive/bytes.rs:64:11: 64:20 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:64:11: 64:20 (#0)"
                                       (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:64:11: 64:20 (#0)" (> Binary (BinaryOp Bitwise (
                                            BitwiseOp Shr
                                           ) Spec
                                          ) (@@ "pervasive/bytes.rs:64:12: 64:13 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:64:17: 64:19 (#0)"
                                           (> Const (Constant Int 24)) (Typ Int (IntRange U 64)))
                                         ) (Typ Int (IntRange U 64))
                                        ) (@@ "pervasive/bytes.rs:64:23: 64:27 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                       ) (Typ Int (IntRange U 64))
                                      ) (@@ "pervasive/bytes.rs:64:30: 64:33 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                     ) (Typ Bool))
                                   ) (Typ Bool)
                                  ) (@@ "pervasive/bytes.rs:65:11: 65:20 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:65:11: 65:20 (#0)"
                                     (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:65:11: 65:20 (#0)" (> Binary (BinaryOp Bitwise (
                                          BitwiseOp Shr
                                         ) Spec
                                        ) (@@ "pervasive/bytes.rs:65:12: 65:13 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:65:17: 65:19 (#0)"
                                         (> Const (Constant Int 32)) (Typ Int (IntRange U 64)))
                                       ) (Typ Int (IntRange U 64))
                                      ) (@@ "pervasive/bytes.rs:65:23: 65:27 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                     ) (Typ Int (IntRange U 64))
                                    ) (@@ "pervasive/bytes.rs:65:30: 65:33 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                   ) (Typ Bool))
                                 ) (Typ Bool)
                                ) (@@ "pervasive/bytes.rs:66:11: 66:20 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:66:11: 66:20 (#0)"
                                   (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:66:11: 66:20 (#0)" (> Binary (BinaryOp Bitwise (
                                        BitwiseOp Shr
                                       ) Spec
                                      ) (@@ "pervasive/bytes.rs:66:12: 66:13 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:66:17: 66:19 (#0)"
                                       (> Const (Constant Int 40)) (Typ Int (IntRange U 64)))
                                     ) (Typ Int (IntRange U 64))
                                    ) (@@ "pervasive/bytes.rs:66:23: 66:27 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                   ) (Typ Int (IntRange U 64))
                                  ) (@@ "pervasive/bytes.rs:66:30: 66:33 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                 ) (Typ Bool))
                               ) (Typ Bool)
                              ) (@@ "pervasive/bytes.rs:67:11: 67:20 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:67:11: 67:20 (#0)"
                                 (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:67:11: 67:20 (#0)" (> Binary (BinaryOp Bitwise (
                                      BitwiseOp Shr
                                     ) Spec
                                    ) (@@ "pervasive/bytes.rs:67:12: 67:13 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:67:17: 67:19 (#0)"
                                     (> Const (Constant Int 48)) (Typ Int (IntRange U 64)))
                                   ) (Typ Int (IntRange U 64))
                                  ) (@@ "pervasive/bytes.rs:67:23: 67:27 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                 ) (Typ Int (IntRange U 64))
                                ) (@@ "pervasive/bytes.rs:67:30: 67:33 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                               ) (Typ Bool))
                             ) (Typ Bool)
                            ) (@@ "pervasive/bytes.rs:68:11: 68:20 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:68:11: 68:20 (#0)"
                               (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:68:11: 68:20 (#0)" (> Binary (BinaryOp Bitwise (
                                    BitwiseOp Shr
                                   ) Spec
                                  ) (@@ "pervasive/bytes.rs:68:12: 68:13 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:68:17: 68:19 (#0)"
                                   (> Const (Constant Int 56)) (Typ Int (IntRange U 64)))
                                 ) (Typ Int (IntRange U 64))
                                ) (@@ "pervasive/bytes.rs:68:23: 68:27 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                               ) (Typ Int (IntRange U 64))
                              ) (@@ "pervasive/bytes.rs:68:30: 68:33 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                             ) (Typ Bool))
                           ) (Typ Bool))
                         ) (Typ Bool))
                       ) :proof (@@ "pervasive/bytes.rs:60:5: 60:11 (#0)" (> Block () None) (Typ Tuple ())) :mode (AssertQueryMode BitVector)
                      ) (Typ Tuple ()))
                    ) (Typ Tuple ()))))
                 (@ "pervasive/bytes.rs:71:5: 71:11 (#0)" (Stmt Expr (@@ "pervasive/bytes.rs:71:5: 71:11 (#0)" (> Block () (@@ "pervasive/bytes.rs:71:5: 71:11 (#0)"
                      (> AssertQuery :requires ((@@ "pervasive/bytes.rs:71:5: 71:11 (#0)" (> Const (Constant Bool true)) (Typ Bool))) :ensures (
                        (@@ "pervasive/bytes.rs:71:12: 71:13 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:71:12: 71:13 (#0)" (> Var "x~136")
                           (Typ Int (IntRange U 64))
                          ) (@@ "pervasive/bytes.rs:71:17: 79:32 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:72:7: 72:17 (#0)"
                             (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:72:7: 72:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                  BitOr
                                 ) Spec
                                ) (@@ "pervasive/bytes.rs:72:7: 72:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:72:7: 72:17 (#0)"
                                   (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:72:7: 72:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                        BitOr
                                       ) Spec
                                      ) (@@ "pervasive/bytes.rs:72:7: 72:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:72:7: 72:17 (#0)"
                                         (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:72:8: 72:9 (#0)" (> Var "x~136") (Typ Int (IntRange
                                             U 64))
                                          ) (@@ "pervasive/bytes.rs:72:12: 72:16 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                         ) (Typ Int (IntRange U 64))
                                        ) (@@ "pervasive/bytes.rs:73:7: 73:24 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:73:7: 73:24 (#0)"
                                           (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:73:8: 73:16 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                                Shr
                                               ) Spec
                                              ) (@@ "pervasive/bytes.rs:73:9: 73:10 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:73:14: 73:15 (#0)"
                                               (> Const (Constant Int 8)) (Typ Int (IntRange U 64)))
                                             ) (Typ Int (IntRange U 64))
                                            ) (@@ "pervasive/bytes.rs:73:19: 73:23 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                           ) (Typ Int (IntRange U 64))
                                          ) (@@ "pervasive/bytes.rs:73:28: 73:29 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange U 64)))
                                         ) (Typ Int (IntRange U 64)))
                                       ) (Typ Int (IntRange U 64))
                                      ) (@@ "pervasive/bytes.rs:74:7: 74:25 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:74:7: 74:25 (#0)"
                                         (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:74:8: 74:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                              Shr
                                             ) Spec
                                            ) (@@ "pervasive/bytes.rs:74:9: 74:10 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:74:14: 74:16 (#0)"
                                             (> Const (Constant Int 16)) (Typ Int (IntRange U 64)))
                                           ) (Typ Int (IntRange U 64))
                                          ) (@@ "pervasive/bytes.rs:74:20: 74:24 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                         ) (Typ Int (IntRange U 64))
                                        ) (@@ "pervasive/bytes.rs:74:29: 74:31 (#0)" (> Const (Constant Int 16)) (Typ Int (IntRange U 64)))
                                       ) (Typ Int (IntRange U 64)))
                                     ) (Typ Int (IntRange U 64))
                                    ) (@@ "pervasive/bytes.rs:75:7: 75:25 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:75:7: 75:25 (#0)"
                                       (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:75:8: 75:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                            Shr
                                           ) Spec
                                          ) (@@ "pervasive/bytes.rs:75:9: 75:10 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:75:14: 75:16 (#0)"
                                           (> Const (Constant Int 24)) (Typ Int (IntRange U 64)))
                                         ) (Typ Int (IntRange U 64))
                                        ) (@@ "pervasive/bytes.rs:75:20: 75:24 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                       ) (Typ Int (IntRange U 64))
                                      ) (@@ "pervasive/bytes.rs:75:29: 75:31 (#0)" (> Const (Constant Int 24)) (Typ Int (IntRange U 64)))
                                     ) (Typ Int (IntRange U 64)))
                                   ) (Typ Int (IntRange U 64))
                                  ) (@@ "pervasive/bytes.rs:76:7: 76:25 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:76:7: 76:25 (#0)"
                                     (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:76:8: 76:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                          Shr
                                         ) Spec
                                        ) (@@ "pervasive/bytes.rs:76:9: 76:10 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:76:14: 76:16 (#0)"
                                         (> Const (Constant Int 32)) (Typ Int (IntRange U 64)))
                                       ) (Typ Int (IntRange U 64))
                                      ) (@@ "pervasive/bytes.rs:76:20: 76:24 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                     ) (Typ Int (IntRange U 64))
                                    ) (@@ "pervasive/bytes.rs:76:29: 76:31 (#0)" (> Const (Constant Int 32)) (Typ Int (IntRange U 64)))
                                   ) (Typ Int (IntRange U 64)))
                                 ) (Typ Int (IntRange U 64))
                                ) (@@ "pervasive/bytes.rs:77:7: 77:25 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:77:7: 77:25 (#0)"
                                   (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:77:8: 77:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                        Shr
                                       ) Spec
                                      ) (@@ "pervasive/bytes.rs:77:9: 77:10 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:77:14: 77:16 (#0)"
                                       (> Const (Constant Int 40)) (Typ Int (IntRange U 64)))
                                     ) (Typ Int (IntRange U 64))
                                    ) (@@ "pervasive/bytes.rs:77:20: 77:24 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                   ) (Typ Int (IntRange U 64))
                                  ) (@@ "pervasive/bytes.rs:77:29: 77:31 (#0)" (> Const (Constant Int 40)) (Typ Int (IntRange U 64)))
                                 ) (Typ Int (IntRange U 64)))
                               ) (Typ Int (IntRange U 64))
                              ) (@@ "pervasive/bytes.rs:78:7: 78:25 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:78:7: 78:25 (#0)"
                                 (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:78:8: 78:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                      Shr
                                     ) Spec
                                    ) (@@ "pervasive/bytes.rs:78:9: 78:10 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:78:14: 78:16 (#0)"
                                     (> Const (Constant Int 48)) (Typ Int (IntRange U 64)))
                                   ) (Typ Int (IntRange U 64))
                                  ) (@@ "pervasive/bytes.rs:78:20: 78:24 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                 ) (Typ Int (IntRange U 64))
                                ) (@@ "pervasive/bytes.rs:78:29: 78:31 (#0)" (> Const (Constant Int 48)) (Typ Int (IntRange U 64)))
                               ) (Typ Int (IntRange U 64)))
                             ) (Typ Int (IntRange U 64))
                            ) (@@ "pervasive/bytes.rs:79:7: 79:25 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:79:7: 79:25 (#0)"
                               (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:79:8: 79:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                    Shr
                                   ) Spec
                                  ) (@@ "pervasive/bytes.rs:79:9: 79:10 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:79:14: 79:16 (#0)"
                                   (> Const (Constant Int 56)) (Typ Int (IntRange U 64)))
                                 ) (Typ Int (IntRange U 64))
                                ) (@@ "pervasive/bytes.rs:79:20: 79:24 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                               ) (Typ Int (IntRange U 64))
                              ) (@@ "pervasive/bytes.rs:79:29: 79:31 (#0)" (> Const (Constant Int 56)) (Typ Int (IntRange U 64)))
                             ) (Typ Int (IntRange U 64)))
                           ) (Typ Int (IntRange U 64)))
                         ) (Typ Bool))
                       ) :proof (@@ "pervasive/bytes.rs:71:5: 71:11 (#0)" (> Block () None) (Typ Tuple ())) :mode (AssertQueryMode BitVector)
                      ) (Typ Tuple ()))
                    ) (Typ Tuple ()))))
                ) None
               ) (Typ Tuple ())
              ) :assumption (@@ "pervasive/bytes.rs:55:3: 55:9 (#0)" (> Quant (Forall :boxed_params true) ((-> x~136 (Typ Int (IntRange U 64))))
                (@@ "pervasive/bytes.rs:55:3: 55:9 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/bytes.rs:55:3: 55:9 (#0)" (> Const (Constant
                     Bool true)
                   ) (Typ Bool)
                  ) (@@ "pervasive/bytes.rs:55:27: 58:4 (#0)" (> Block () (@@ "pervasive/bytes.rs:56:9: 57:31 (#0)" (> Binary (BinaryOp And) (@@
                       "pervasive/bytes.rs:56:9: 56:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:56:20: 56:49 (#0)" (> Unary (UnaryOp
                           Trigger (TriggerAnnotation Trigger None)
                          ) (@@ "pervasive/bytes.rs:56:20: 56:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                             ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/bytes.rs:56:20: 56:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                                () () (AutospecUsage IfMarked)
                               ) ((@@ "pervasive/bytes.rs:56:41: 56:42 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))))
                              ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                           ) (Typ Int (IntRange Nat)))
                         ) (Typ Int (IntRange Nat))
                        ) (@@ "pervasive/bytes.rs:56:53: 56:54 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/bytes.rs:57:9: 57:31 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:57:9: 57:56 (#0)" (> Call (CallTarget
                           Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.") () () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/bytes.rs:57:32: 57:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                              () () (AutospecUsage IfMarked)
                             ) ((@@ "pervasive/bytes.rs:57:53: 57:54 (#0)" (> Var "x~136") (Typ Int (IntRange U 64))))
                            ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                         ) (Typ Int (IntRange U 64))
                        ) (@@ "pervasive/bytes.rs:57:60: 57:61 (#0)" (> Var "x~136") (Typ Int (IntRange U 64)))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Bool))
               ) (Typ Bool))
             ) (Typ Tuple ()))))
         ) None
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/bytes.rs:82:3: 82:9 (#0)" (> Block (
       (@ "pervasive/bytes.rs:82:3: 82:9 (#0)" (Stmt Expr (@@ "pervasive/bytes.rs:82:3: 82:9 (#0)" (> AssertBy :vars ((-> s~471 (Typ Datatype
              "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
           ) :require (
            @@
            "pervasive/bytes.rs:82:30: 82:31 (#0)"
            (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:82:30: 82:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
                 "vstd!seq.Seq.len."
                ) ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/bytes.rs:82:30: 82:31 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
              ) (Typ Int (IntRange Nat))
             ) (@@ "pervasive/bytes.rs:82:41: 82:42 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat))))
            (Typ Bool)
           ) :ensure (
            @@
            "pervasive/bytes.rs:82:51: 82:52 (#0)"
            (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:82:62: 82:109 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger
                 None)
               ) (@@ "pervasive/bytes.rs:82:62: 82:109 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                  () () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/bytes.rs:82:83: 82:108 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:82:106: 82:107 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                   ) (Typ Int (IntRange U 64))))
                ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
             ) (@@ "pervasive/bytes.rs:82:113: 82:114 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
            (Typ Bool)
           ) :proof (@@ "pervasive/bytes.rs:82:118: 109:4 (#0)" (> Block (
              (@ "pervasive/bytes.rs:83:9: 83:10 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:83:9: 83:10 (#0)" (Pattern Var :name "x~522"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:83:13: 83:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/bytes.rs:83:36: 83:37 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:84:9: 84:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:84:9: 84:11 (#0)" (Pattern Var :name "s0~543"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:84:14: 84:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:84:14: 84:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:84:14: 84:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:84:16: 84:17 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:85:9: 85:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:85:9: 85:11 (#0)" (Pattern Var :name "s1~564"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:85:14: 85:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:85:14: 85:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:85:14: 85:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:85:16: 85:17 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:86:9: 86:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:86:9: 86:11 (#0)" (Pattern Var :name "s2~585"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:86:14: 86:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:86:14: 86:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:86:14: 86:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:86:16: 86:17 (#0)" (> Const (Constant Int 2)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:87:9: 87:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:87:9: 87:11 (#0)" (Pattern Var :name "s3~606"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:87:14: 87:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:87:14: 87:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:87:14: 87:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:87:16: 87:17 (#0)" (> Const (Constant Int 3)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:88:9: 88:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:88:9: 88:11 (#0)" (Pattern Var :name "s4~627"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:88:14: 88:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:88:14: 88:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:88:14: 88:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:88:16: 88:17 (#0)" (> Const (Constant Int 4)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:89:9: 89:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:89:9: 89:11 (#0)" (Pattern Var :name "s5~648"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:89:14: 89:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:89:14: 89:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:89:14: 89:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:89:16: 89:17 (#0)" (> Const (Constant Int 5)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:90:9: 90:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:90:9: 90:11 (#0)" (Pattern Var :name "s6~669"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:90:14: 90:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:90:14: 90:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:90:14: 90:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:90:16: 90:17 (#0)" (> Const (Constant Int 6)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:91:9: 91:11 (#0)" (Stmt Decl :pattern (@@ "pervasive/bytes.rs:91:9: 91:11 (#0)" (Pattern Var :name "s7~690"
                  :mutable false
                 ) (Typ Int (IntRange U 64))
                ) :mode Spec :init (@@ "pervasive/bytes.rs:91:14: 91:15 (#0)" (> Unary (UnaryOp Clip :range (IntRange U 64) :truncate false)
                  (@@ "pervasive/bytes.rs:91:14: 91:15 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                     ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/bytes.rs:91:14: 91:15 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))) (
                      @@ "pervasive/bytes.rs:91:16: 91:17 (#0)" (> Const (Constant Int 7)) (Typ Int (IntRange Int))))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Int (IntRange U 64)))))
              (@ "pervasive/bytes.rs:93:5: 93:11 (#0)" (Stmt Expr (@@ "pervasive/bytes.rs:93:5: 93:11 (#0)" (> Block () (@@ "pervasive/bytes.rs:93:5: 93:11 (#0)"
                   (> AssertQuery :requires ((@@ "pervasive/bytes.rs:93:5: 93:11 (#0)" (> Const (Constant Bool true)) (Typ Bool))) :ensures (
                     (@@ "pervasive/bytes.rs:94:7: 104:8 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/bytes.rs:94:7: 104:8 (#0)" (> Binary (BinaryOp
                          And
                         ) (@@ "pervasive/bytes.rs:95:9: 102:19 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:95:9: 101:19 (#0)" (> Binary (BinaryOp
                              And
                             ) (@@ "pervasive/bytes.rs:95:9: 100:19 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:95:9: 99:19 (#0)" (> Binary (BinaryOp
                                  And
                                 ) (@@ "pervasive/bytes.rs:95:9: 98:19 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:95:9: 97:19 (#0)" (> Binary (BinaryOp
                                      And
                                     ) (@@ "pervasive/bytes.rs:95:9: 96:19 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:95:9: 95:94 (#0)" (> Binary (BinaryOp
                                          Eq Spec
                                         ) (@@ "pervasive/bytes.rs:95:10: 95:11 (#0)" (> Var "x~522") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)"
                                          (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                               BitOr
                                              ) Spec
                                             ) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)"
                                                (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp
                                                     BitOr
                                                    ) Spec
                                                   ) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)"
                                                      (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/bytes.rs:95:15: 95:17 (#0)" (> Var "s0~543") (Typ Int (IntRange
                                                          U 64))
                                                       ) (@@ "pervasive/bytes.rs:95:20: 95:22 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:95:20: 95:22 (#0)"
                                                          (> Var "s1~564") (Typ Int (IntRange U 64))
                                                         ) (@@ "pervasive/bytes.rs:95:26: 95:27 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange U 64)))
                                                        ) (Typ Int (IntRange U 64)))
                                                      ) (Typ Int (IntRange U 64))
                                                     ) (@@ "pervasive/bytes.rs:95:30: 95:32 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:95:30: 95:32 (#0)"
                                                        (> Var "s2~585") (Typ Int (IntRange U 64))
                                                       ) (@@ "pervasive/bytes.rs:95:36: 95:38 (#0)" (> Const (Constant Int 16)) (Typ Int (IntRange U 64)))
                                                      ) (Typ Int (IntRange U 64)))
                                                    ) (Typ Int (IntRange U 64))
                                                   ) (@@ "pervasive/bytes.rs:95:41: 95:43 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:95:41: 95:43 (#0)"
                                                      (> Var "s3~606") (Typ Int (IntRange U 64))
                                                     ) (@@ "pervasive/bytes.rs:95:47: 95:49 (#0)" (> Const (Constant Int 24)) (Typ Int (IntRange U 64)))
                                                    ) (Typ Int (IntRange U 64)))
                                                  ) (Typ Int (IntRange U 64))
                                                 ) (@@ "pervasive/bytes.rs:95:52: 95:54 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:95:52: 95:54 (#0)"
                                                    (> Var "s4~627") (Typ Int (IntRange U 64))
                                                   ) (@@ "pervasive/bytes.rs:95:58: 95:60 (#0)" (> Const (Constant Int 32)) (Typ Int (IntRange U 64)))
                                                  ) (Typ Int (IntRange U 64)))
                                                ) (Typ Int (IntRange U 64))
                                               ) (@@ "pervasive/bytes.rs:95:63: 95:65 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:95:63: 95:65 (#0)"
                                                  (> Var "s5~648") (Typ Int (IntRange U 64))
                                                 ) (@@ "pervasive/bytes.rs:95:69: 95:71 (#0)" (> Const (Constant Int 40)) (Typ Int (IntRange U 64)))
                                                ) (Typ Int (IntRange U 64)))
                                              ) (Typ Int (IntRange U 64))
                                             ) (@@ "pervasive/bytes.rs:95:74: 95:76 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:95:74: 95:76 (#0)"
                                                (> Var "s6~669") (Typ Int (IntRange U 64))
                                               ) (@@ "pervasive/bytes.rs:95:80: 95:82 (#0)" (> Const (Constant Int 48)) (Typ Int (IntRange U 64)))
                                              ) (Typ Int (IntRange U 64)))
                                            ) (Typ Int (IntRange U 64))
                                           ) (@@ "pervasive/bytes.rs:95:85: 95:87 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp Shl) Spec) (@@ "pervasive/bytes.rs:95:85: 95:87 (#0)"
                                              (> Var "s7~690") (Typ Int (IntRange U 64))
                                             ) (@@ "pervasive/bytes.rs:95:91: 95:93 (#0)" (> Const (Constant Int 56)) (Typ Int (IntRange U 64)))
                                            ) (Typ Int (IntRange U 64)))
                                          ) (Typ Int (IntRange U 64)))
                                        ) (Typ Bool)
                                       ) (@@ "pervasive/bytes.rs:96:9: 96:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:96:10: 96:12 (#0)"
                                          (> Var "s0~543") (Typ Int (IntRange U 64))
                                         ) (@@ "pervasive/bytes.rs:96:15: 96:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                        ) (Typ Bool))
                                      ) (Typ Bool)
                                     ) (@@ "pervasive/bytes.rs:97:9: 97:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:97:10: 97:12 (#0)"
                                        (> Var "s1~564") (Typ Int (IntRange U 64))
                                       ) (@@ "pervasive/bytes.rs:97:15: 97:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                      ) (Typ Bool))
                                    ) (Typ Bool)
                                   ) (@@ "pervasive/bytes.rs:98:9: 98:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:98:10: 98:12 (#0)"
                                      (> Var "s2~585") (Typ Int (IntRange U 64))
                                     ) (@@ "pervasive/bytes.rs:98:15: 98:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                    ) (Typ Bool))
                                  ) (Typ Bool)
                                 ) (@@ "pervasive/bytes.rs:99:9: 99:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:99:10: 99:12 (#0)"
                                    (> Var "s3~606") (Typ Int (IntRange U 64))
                                   ) (@@ "pervasive/bytes.rs:99:15: 99:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                  ) (Typ Bool))
                                ) (Typ Bool)
                               ) (@@ "pervasive/bytes.rs:100:9: 100:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:100:10: 100:12 (#0)"
                                  (> Var "s4~627") (Typ Int (IntRange U 64))
                                 ) (@@ "pervasive/bytes.rs:100:15: 100:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                                ) (Typ Bool))
                              ) (Typ Bool)
                             ) (@@ "pervasive/bytes.rs:101:9: 101:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:101:10: 101:12 (#0)"
                                (> Var "s5~648") (Typ Int (IntRange U 64))
                               ) (@@ "pervasive/bytes.rs:101:15: 101:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                              ) (Typ Bool))
                            ) (Typ Bool)
                           ) (@@ "pervasive/bytes.rs:102:9: 102:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:102:10: 102:12 (#0)"
                              (> Var "s6~669") (Typ Int (IntRange U 64))
                             ) (@@ "pervasive/bytes.rs:102:15: 102:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                            ) (Typ Bool))
                          ) (Typ Bool)
                         ) (@@ "pervasive/bytes.rs:103:9: 103:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/bytes.rs:103:10: 103:12 (#0)"
                            (> Var "s7~690") (Typ Int (IntRange U 64))
                           ) (@@ "pervasive/bytes.rs:103:15: 103:18 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
                          ) (Typ Bool))
                        ) (Typ Bool)
                       ) (@@ "pervasive/bytes.rs:105:7: 105:196 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:105:7: 105:168 (#0)" (> Binary
                           (BinaryOp And) (@@ "pervasive/bytes.rs:105:7: 105:140 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:105:7: 105:112 (#0)"
                              (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:105:7: 105:84 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:105:7: 105:56 (#0)"
                                  (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:105:7: 105:29 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/bytes.rs:105:7: 105:9 (#0)"
                                      (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:7: 105:9 (#0)" (> Var "s0~543") (Typ Int (IntRange U 64))) (@@ "pervasive/bytes.rs:105:13: 105:23 (#0)"
                                        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:14: 105:15 (#0)" (> Var "x~522") (Typ Int (
                                            IntRange U 64))
                                         ) (@@ "pervasive/bytes.rs:105:18: 105:22 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                        ) (Typ Int (IntRange U 64)))
                                      ) (Typ Bool)
                                     ) (@@ "pervasive/bytes.rs:105:27: 105:29 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:27: 105:29 (#0)" (> Var
                                         "s1~564"
                                        ) (Typ Int (IntRange U 64))
                                       ) (@@ "pervasive/bytes.rs:105:33: 105:50 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:34: 105:42 (#0)"
                                          (> Binary (BinaryOp Bitwise (BitwiseOp Shr) Spec) (@@ "pervasive/bytes.rs:105:35: 105:36 (#0)" (> Var "x~522") (Typ Int (IntRange
                                              U 64))
                                           ) (@@ "pervasive/bytes.rs:105:40: 105:41 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange U 64)))
                                          ) (Typ Int (IntRange U 64))
                                         ) (@@ "pervasive/bytes.rs:105:45: 105:49 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                        ) (Typ Int (IntRange U 64)))
                                      ) (Typ Bool))
                                    ) (Typ Bool)
                                   ) (@@ "pervasive/bytes.rs:105:54: 105:56 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:54: 105:56 (#0)" (> Var
                                       "s2~585"
                                      ) (Typ Int (IntRange U 64))
                                     ) (@@ "pervasive/bytes.rs:105:60: 105:78 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:61: 105:70 (#0)"
                                        (> Binary (BinaryOp Bitwise (BitwiseOp Shr) Spec) (@@ "pervasive/bytes.rs:105:62: 105:63 (#0)" (> Var "x~522") (Typ Int (IntRange
                                            U 64))
                                         ) (@@ "pervasive/bytes.rs:105:67: 105:69 (#0)" (> Const (Constant Int 16)) (Typ Int (IntRange U 64)))
                                        ) (Typ Int (IntRange U 64))
                                       ) (@@ "pervasive/bytes.rs:105:73: 105:77 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                      ) (Typ Int (IntRange U 64)))
                                    ) (Typ Bool))
                                  ) (Typ Bool)
                                 ) (@@ "pervasive/bytes.rs:105:82: 105:84 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:82: 105:84 (#0)" (> Var
                                     "s3~606"
                                    ) (Typ Int (IntRange U 64))
                                   ) (@@ "pervasive/bytes.rs:105:88: 105:106 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:89: 105:98 (#0)"
                                      (> Binary (BinaryOp Bitwise (BitwiseOp Shr) Spec) (@@ "pervasive/bytes.rs:105:90: 105:91 (#0)" (> Var "x~522") (Typ Int (IntRange
                                          U 64))
                                       ) (@@ "pervasive/bytes.rs:105:95: 105:97 (#0)" (> Const (Constant Int 24)) (Typ Int (IntRange U 64)))
                                      ) (Typ Int (IntRange U 64))
                                     ) (@@ "pervasive/bytes.rs:105:101: 105:105 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                    ) (Typ Int (IntRange U 64)))
                                  ) (Typ Bool))
                                ) (Typ Bool)
                               ) (@@ "pervasive/bytes.rs:105:110: 105:112 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:110: 105:112 (#0)"
                                  (> Var "s4~627") (Typ Int (IntRange U 64))
                                 ) (@@ "pervasive/bytes.rs:105:116: 105:134 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:117: 105:126 (#0)"
                                    (> Binary (BinaryOp Bitwise (BitwiseOp Shr) Spec) (@@ "pervasive/bytes.rs:105:118: 105:119 (#0)" (> Var "x~522") (Typ Int (IntRange
                                        U 64))
                                     ) (@@ "pervasive/bytes.rs:105:123: 105:125 (#0)" (> Const (Constant Int 32)) (Typ Int (IntRange U 64)))
                                    ) (Typ Int (IntRange U 64))
                                   ) (@@ "pervasive/bytes.rs:105:129: 105:133 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                  ) (Typ Int (IntRange U 64)))
                                ) (Typ Bool))
                              ) (Typ Bool)
                             ) (@@ "pervasive/bytes.rs:105:138: 105:140 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:138: 105:140 (#0)"
                                (> Var "s5~648") (Typ Int (IntRange U 64))
                               ) (@@ "pervasive/bytes.rs:105:144: 105:162 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:145: 105:154 (#0)"
                                  (> Binary (BinaryOp Bitwise (BitwiseOp Shr) Spec) (@@ "pervasive/bytes.rs:105:146: 105:147 (#0)" (> Var "x~522") (Typ Int (IntRange
                                      U 64))
                                   ) (@@ "pervasive/bytes.rs:105:151: 105:153 (#0)" (> Const (Constant Int 40)) (Typ Int (IntRange U 64)))
                                  ) (Typ Int (IntRange U 64))
                                 ) (@@ "pervasive/bytes.rs:105:157: 105:161 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                                ) (Typ Int (IntRange U 64)))
                              ) (Typ Bool))
                            ) (Typ Bool)
                           ) (@@ "pervasive/bytes.rs:105:166: 105:168 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:166: 105:168 (#0)"
                              (> Var "s6~669") (Typ Int (IntRange U 64))
                             ) (@@ "pervasive/bytes.rs:105:172: 105:190 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:173: 105:182 (#0)"
                                (> Binary (BinaryOp Bitwise (BitwiseOp Shr) Spec) (@@ "pervasive/bytes.rs:105:174: 105:175 (#0)" (> Var "x~522") (Typ Int (IntRange
                                    U 64))
                                 ) (@@ "pervasive/bytes.rs:105:179: 105:181 (#0)" (> Const (Constant Int 48)) (Typ Int (IntRange U 64)))
                                ) (Typ Int (IntRange U 64))
                               ) (@@ "pervasive/bytes.rs:105:185: 105:189 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                              ) (Typ Int (IntRange U 64)))
                            ) (Typ Bool))
                          ) (Typ Bool)
                         ) (@@ "pervasive/bytes.rs:105:194: 105:196 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:105:194: 105:196 (#0)"
                            (> Var "s7~690") (Typ Int (IntRange U 64))
                           ) (@@ "pervasive/bytes.rs:105:200: 105:218 (#0)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/bytes.rs:105:201: 105:210 (#0)"
                              (> Binary (BinaryOp Bitwise (BitwiseOp Shr) Spec) (@@ "pervasive/bytes.rs:105:202: 105:203 (#0)" (> Var "x~522") (Typ Int (IntRange
                                  U 64))
                               ) (@@ "pervasive/bytes.rs:105:207: 105:209 (#0)" (> Const (Constant Int 56)) (Typ Int (IntRange U 64)))
                              ) (Typ Int (IntRange U 64))
                             ) (@@ "pervasive/bytes.rs:105:213: 105:217 (#0)" (> Const (Constant Int 255)) (Typ Int (IntRange U 64)))
                            ) (Typ Int (IntRange U 64)))
                          ) (Typ Bool))
                        ) (Typ Bool))
                      ) (Typ Bool))
                    ) :proof (@@ "pervasive/bytes.rs:93:5: 93:11 (#0)" (> Block () None) (Typ Tuple ())) :mode (AssertQueryMode BitVector)
                   ) (Typ Tuple ()))
                 ) (Typ Tuple ()))))
              (@ "pervasive/seq_lib.rs:535:31: 535:33 (#760)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#760)" (Pattern
                  Var :name "s1~997" :mutable false
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#760)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
                    "vstd!seq_lib.check_argument_is_seq."
                   ) ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/bytes.rs:108:24: 108:71 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/bytes.rs:108:45: 108:70 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.")
                         () () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/bytes.rs:108:68: 108:69 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                       ) (Typ Int (IntRange U 64))))
                    ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))))
              (@ "pervasive/seq_lib.rs:536:31: 536:33 (#760)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#760)" (Pattern
                  Var :name "s2~1007" :mutable false
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#760)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
                    "vstd!seq_lib.check_argument_is_seq."
                   ) ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/bytes.rs:108:75: 108:76 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                 ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))))
              (@ "pervasive/seq_lib.rs:537:9: 545:11 (#760)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#760)" (> AssertBy :vars ()
                  :require (
                   @@
                   "pervasive/seq_lib.rs:537:9: 545:11 (#760)"
                   (> Const (Constant Bool true))
                   (Typ Bool)
                  ) :ensure (
                   @@
                   "pervasive/seq_lib.rs:537:30: 537:54 (#760)"
                   (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#760)" (> Var "s1~997") (Typ Datatype "vstd!seq.Seq."
                      ((Typ Int (IntRange U 8))))
                    ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#760)" (> Var "s2~1007") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                   (Typ Bool)
                  ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#760)" (> Block (
                     (@ "pervasive/seq_lib.rs:538:13: 538:53 (#760)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#760)" (> AssertAssume :is_assume
                         false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#760)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#760)"
                            (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ Int (IntRange U 8))) () (AutospecUsage
                               IfMarked)
                             ) ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#760)" (> Var "s1~997") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                            ) (Typ Int (IntRange Nat))
                           ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#760)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                              ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                             ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#760)" (> Var "s2~1007") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                            ) (Typ Int (IntRange Nat)))
                          ) (Typ Bool))
                        ) (Typ Tuple ()))))
                     (@ "pervasive/seq_lib.rs:539:13: 543:15 (#760)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#760)" (> AssertBy :vars
                         ((-> idx~1045 (Typ Int (IntRange Int)))) :require (
                          @@
                          "pervasive/seq_lib.rs:532:47: 540:74 (#760)"
                          (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#760)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                             (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#760)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#759)"
                              (> Var "idx~1045") (Typ Int (IntRange Int)))
                            ) (Typ Bool)
                           ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#759)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#759)"
                              (> Var "idx~1045") (Typ Int (IntRange Int))
                             ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#760)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                                ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                               ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#760)" (> Var "s1~997") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                              ) (Typ Int (IntRange Nat)))
                            ) (Typ Bool)))
                          (Typ Bool)
                         ) :ensure (
                          @@
                          "pervasive/seq_lib.rs:541:36: 541:84 (#760)"
                          (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#760)" (> Call (CallTarget Fun (CallTargetKind Static)
                              (Fun :path "vstd!seq.Seq.index.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                             ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#760)" (> Var "s1~997") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                              (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#760)" (> Var "idx~1045") (Typ Int (IntRange Int))))
                            ) (Typ Int (IntRange U 8))
                           ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#760)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                              ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                             ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#760)" (> Var "s2~1007") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                              (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#760)" (> Var "idx~1045") (Typ Int (IntRange Int))))
                            ) (Typ Int (IntRange U 8))))
                          (Typ Bool)
                         ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#760)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#760)" (> Block
                             () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#760)" (> Block () None) (Typ Tuple ()))
                            ) (Typ Tuple ()))
                          ) (Typ Tuple ())
                         ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#760)" (> Quant (Forall :boxed_params true) ((-> idx~1045 (Typ Int (IntRange
                               Int)))
                           ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#760)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#760)"
                              (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#760)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                                 (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#760)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#759)"
                                  (> Var "idx~1045") (Typ Int (IntRange Int)))
                                ) (Typ Bool)
                               ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#759)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#759)"
                                  (> Var "idx~1045") (Typ Int (IntRange Int))
                                 ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#760)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                                    ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                                   ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#760)" (> Var "s1~997") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                                  ) (Typ Int (IntRange Nat)))
                                ) (Typ Bool))
                              ) (Typ Bool)
                             ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#760)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#760)"
                                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ Int (IntRange U 8))) () (AutospecUsage
                                   IfMarked)
                                 ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#760)" (> Var "s1~997") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                                  (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#760)" (> Var "idx~1045") (Typ Int (IntRange Int))))
                                ) (Typ Int (IntRange U 8))
                               ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#760)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                                  ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                                 ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#760)" (> Var "s2~1007") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                                  (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#760)" (> Var "idx~1045") (Typ Int (IntRange Int))))
                                ) (Typ Int (IntRange U 8)))
                              ) (Typ Bool))
                            ) (Typ Bool))
                          ) (Typ Bool))
                        ) (Typ Tuple ()))))
                     (@ "pervasive/seq_lib.rs:544:13: 544:61 (#760)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#760)" (> AssertAssume :is_assume
                         false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#760)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                             ((Typ Int (IntRange U 8))))
                           ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#760)" (> Var "s1~997") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                           (@@ "pervasive/seq_lib.rs:544:57: 544:59 (#760)" (> Var "s2~1007") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                          ) (Typ Bool))
                        ) (Typ Tuple ()))))
                    ) None
                   ) (Typ Tuple ())
                  ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#760)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#760)"
                     (> Const (Constant Bool true)) (Typ Bool)
                    ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#760)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#760)"
                       (> Var "s1~997") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                      ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#760)" (> Var "s2~1007") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Tuple ()))))
             ) None
            ) (Typ Tuple ())
           ) :assumption (@@ "pervasive/bytes.rs:82:3: 82:9 (#0)" (> Quant (Forall :boxed_params true) ((-> s~471 (Typ Datatype "vstd!seq.Seq."
                ((Typ Int (IntRange U 8)))))
             ) (@@ "pervasive/bytes.rs:82:3: 82:9 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/bytes.rs:82:30: 82:31 (#0)" (> Binary
                 (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:82:30: 82:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                    ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/bytes.rs:82:30: 82:31 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                  ) (Typ Int (IntRange Nat))
                 ) (@@ "pervasive/bytes.rs:82:41: 82:42 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat)))
                ) (Typ Bool)
               ) (@@ "pervasive/bytes.rs:82:51: 82:52 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:82:62: 82:109 (#0)" (> Unary
                   (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/bytes.rs:82:62: 82:109 (#0)" (> Call (CallTarget Fun (CallTargetKind
                       Static
                      ) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.") () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/bytes.rs:82:83: 82:108 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.")
                         () () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/bytes.rs:82:106: 82:107 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
                       ) (Typ Int (IntRange U 64))))
                    ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
                 ) (@@ "pervasive/bytes.rs:82:113: 82:114 (#0)" (> Var "s~471") (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Tuple ()))))
      ) None
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/bytes.rs:113:1: 113:50 (#0)" (Function
  :name (Fun :path "vstd!bytes.u64_from_le_bytes.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!bytes." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/bytes.rs:113:31: 113:39 (#0)" (Param :name "s~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
       ((Typ Int (IntRange U 8))))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/bytes.rs:113:47: 113:50 (#0)" (Param :name "x~34" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/bytes.rs:114:12: 114:13 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:114:12: 114:20 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ Int (IntRange U 8))) () (AutospecUsage IfMarked))
       ((@@ "pervasive/bytes.rs:114:12: 114:14 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
             ((Typ Int (IntRange U 8))) ())
           ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ Int (IntRange U 8)))) (Typ Int (IntRange
              U 8))
           ) ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/bytes.rs:114:12: 114:13 (#0)" (> Var "s~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ Int
                (IntRange U 8)))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/bytes.rs:114:24: 114:25 (#0)" (> Const (Constant Int 8)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/bytes.rs:115:11: 115:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:115:11: 115:12 (#0)" (> Var
       "x~34"
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/bytes.rs:115:16: 115:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_from_le_bytes.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/bytes.rs:115:39: 115:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
             ((Typ Int (IntRange U 8))) ())
           ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ Int (IntRange U 8)))) (Typ Int (IntRange
              U 8))
           ) ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/bytes.rs:115:39: 115:40 (#0)" (> Var "s~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ Int
                (IntRange U 8)))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))))
      ) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/bytes.rs:123:1: 123:51 (#0)" (Function
  :name (Fun :path "vstd!bytes.u64_to_le_bytes.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!bytes." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/bytes.rs:123:29: 123:35 (#0)" (Param :name "x~2" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/bytes.rs:123:44: 123:51 (#0)" (Param :name "s~10" :typ (Typ Datatype "alloc!vec.Vec." ((Typ Int (IntRange
        U 8)
      ) (Typ Datatype "alloc!alloc.Global." ()))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/bytes.rs:124:11: 124:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/bytes.rs:124:11: 124:13 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ Int (IntRange U 8)) (Typ Datatype
            "alloc!alloc.Global." ())
          ) ((tuple "A" "alloc!alloc.impl&%1.")))
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ Int (IntRange U 8)) (Typ
            Datatype "alloc!alloc.Global." ()))
         ) (Typ Int (IntRange U 8))
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/bytes.rs:124:11: 124:12 (#0)" (> Var "s~10") (Typ Datatype "alloc!vec.Vec." ((Typ Int (IntRange U 8)) (Typ Datatype
            "alloc!alloc.Global." ())))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
     ) (@@ "pervasive/bytes.rs:124:17: 124:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!bytes.spec_u64_to_le_bytes.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/bytes.rs:124:38: 124:39 (#0)" (> Var "x~2") (Typ Int (IntRange U 64))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:44:5: 44:37 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/map.rs:44:28: 44:37 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam
       "K"
      ) (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:49:5: 49:61 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.total.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "impl%2" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:49:28: 49:47 (#0)" (Param :name "fv~2" :typ (Typ TypParam "impl%2") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:49:52: 49:61 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:49:62: 51:6 (#0)" (> Block () (@@ "pervasive/map.rs:50:9: 50:31 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!set.impl&%0.mk_map.") ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "impl%2")) () (AutospecUsage
        IfMarked)
      ) ((@@ "pervasive/map.rs:50:9: 50:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.full.")
          ((Typ TypParam "K")) () (AutospecUsage IfMarked)
         ) ()
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
       ) (@@ "pervasive/map.rs:50:28: 50:30 (#0)" (> Var "fv~2") (Typ TypParam "impl%2")))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:56:5: 56:83 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "impl%2" (GenericBound Traits ()))
   (tuple "impl%3" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:56:26: 56:48 (#0)" (Param :name "fk~2" :typ (Typ TypParam "impl%2") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:56:50: 56:69 (#0)" (Param :name "fv~4" :typ (Typ TypParam "impl%3") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:56:74: 56:83 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:56:84: 58:6 (#0)" (> Block () (@@ "pervasive/map.rs:57:9: 57:32 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!set.impl&%0.mk_map.") ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "impl%3")) () (AutospecUsage
        IfMarked)
      ) ((@@ "pervasive/map.rs:57:9: 57:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.")
          ((Typ TypParam "K") (Typ TypParam "impl%2")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:57:18: 57:20 (#0)" (> Var "fk~2") (Typ TypParam "impl%2")))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
       ) (@@ "pervasive/map.rs:57:29: 57:31 (#0)" (> Var "fv~4") (Typ TypParam "impl%3")))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:62:5: 62:36 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.dom.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:62:21: 62:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:62:30: 62:36 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:67:5: 67:41 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:67:23: 67:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:67:29: 67:35 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:67:40: 67:41 (#0)" (Param :name "%return" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:68:20: 68:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:68:20: 68:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:68:20: 68:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:68:40: 68:43 (#0)" (> Var "key~4") (Typ TypParam "K")))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:73:5: 73:51 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.spec_index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:73:33: 73:37 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:73:39: 73:45 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:73:50: 73:51 (#0)" (Param :name "%return" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:74:20: 74:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:74:20: 74:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:74:20: 74:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:74:40: 74:43 (#0)" (> Var "key~4") (Typ TypParam "K")))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:75:5: 77:6 (#0)" (> Block () (@@ "pervasive/map.rs:76:9: 76:24 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!map.impl&%0.index.") ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/map.rs:76:9: 76:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
       (@@ "pervasive/map.rs:76:20: 76:23 (#0)" (> Var "key~4") (Typ TypParam "K")))
     ) (Typ TypParam "V"))
   ) (Typ TypParam "V")
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:84:5: 84:60 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.insert.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:84:24: 84:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:84:30: 84:36 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:84:38: 84:46 (#0)" (Param :name "value~6" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:84:51: 84:60 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:90:5: 90:50 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.remove.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:90:24: 90:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:90:30: 90:36 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:90:41: 90:50 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:103:5: 103:60 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:103:32: 103:36 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:103:38: 103:51 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:103:56: 103:60 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:103:61: 105:6 (#0)" (> Block () (@@ "pervasive/map.rs:104:9: 104:13 (#0)" (> BinaryOpr (BinaryOpr
       ExtEq false (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
      ) (@@ "pervasive/map.rs:104:9: 104:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
          "V")))
      ) (@@ "pervasive/map.rs:104:18: 104:20 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:110:5: 110:54 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.contains_key.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:110:35: 110:39 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:110:41: 110:45 (#0)" (Param :name "k~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:110:50: 110:54 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:110:55: 112:6 (#0)" (> Block () (@@ "pervasive/map.rs:111:9: 111:31 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "K")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/map.rs:111:9: 111:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:111:9: 111:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
              "V")))))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
       ) (@@ "pervasive/map.rs:111:29: 111:30 (#0)" (> Var "k~4") (Typ TypParam "K")))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:116:5: 116:56 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.contains_value.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:116:37: 116:41 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:116:43: 116:47 (#0)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:116:52: 116:56 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:116:57: 118:6 (#0)" (> Block () (@@ "pervasive/map.rs:117:9: 117:15 (#0)" (> Quant (Exists :boxed_params
       true
      ) ((-> i~12 (Typ TypParam "K"))) (@@ "pervasive/map.rs:117:22: 117:63 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/map.rs:117:33: 117:55 (#0)"
         (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/map.rs:117:33: 117:55 (#0)" (> Call (CallTarget Fun
             (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "K")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:117:33: 117:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:117:33: 117:37 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                    "V")))))
              ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
             ) (@@ "pervasive/map.rs:117:53: 117:54 (#0)" (> Var "i~12") (Typ TypParam "K")))
           ) (Typ Bool))
         ) (Typ Bool)
        ) (@@ "pervasive/map.rs:117:59: 117:63 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:117:59: 117:63 (#0)" (> Call
            (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V"))
             () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:117:59: 117:63 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                 "V")))
             ) (@@ "pervasive/map.rs:117:64: 117:65 (#0)" (> Var "i~12") (Typ TypParam "K")))
           ) (Typ TypParam "V")
          ) (@@ "pervasive/map.rs:117:70: 117:71 (#0)" (> Var "v~4") (Typ TypParam "V"))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:122:5: 122:61 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.contains_pair.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:122:36: 122:40 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:122:42: 122:46 (#0)" (Param :name "k~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:122:48: 122:52 (#0)" (Param :name "v~6" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:122:57: 122:61 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:122:62: 124:6 (#0)" (> Block () (@@ "pervasive/map.rs:123:9: 123:39 (#0)" (> Binary (BinaryOp And)
      (@@ "pervasive/map.rs:123:9: 123:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
         ((Typ TypParam "K")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:123:9: 123:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
            ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:123:9: 123:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                "V")))))
          ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
         ) (@@ "pervasive/map.rs:123:29: 123:30 (#0)" (> Var "k~4") (Typ TypParam "K")))
       ) (Typ Bool)
      ) (@@ "pervasive/map.rs:123:35: 123:39 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:123:35: 123:39 (#0)" (> Call
          (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V"))
           () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/map.rs:123:35: 123:39 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
               "V")))
           ) (@@ "pervasive/map.rs:123:40: 123:41 (#0)" (> Var "k~4") (Typ TypParam "K")))
         ) (Typ TypParam "V")
        ) (@@ "pervasive/map.rs:123:46: 123:47 (#0)" (> Var "v~6") (Typ TypParam "V"))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:137:5: 137:48 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.le.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:137:25: 137:29 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:137:31: 137:39 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:137:44: 137:48 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:137:49: 140:6 (#0)" (> Block () (@@ "pervasive/map.rs:138:9: 138:15 (#0)" (> Quant (Forall :boxed_params
       true
      ) ((-> k~12 (Typ TypParam "K"))) (@@ "pervasive/map.rs:138:22: 138:23 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/map.rs:138:33: 138:55 (#0)"
         (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/map.rs:138:33: 138:55 (#0)" (> Call (CallTarget Fun
             (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "K")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:138:33: 138:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:138:33: 138:37 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                    "V")))))
              ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
             ) (@@ "pervasive/map.rs:138:53: 138:54 (#0)" (> Var "k~12") (Typ TypParam "K")))
           ) (Typ Bool))
         ) (Typ Bool)
        ) (@@ "pervasive/map.rs:139:13: 139:52 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/map.rs:139:24: 139:44 (#0)" (> Unary (UnaryOp
             Trigger (TriggerAnnotation Trigger None)
            ) (@@ "pervasive/map.rs:139:24: 139:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
               ((Typ TypParam "K")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:139:24: 139:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                  ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/map.rs:139:24: 139:26 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
               ) (@@ "pervasive/map.rs:139:42: 139:43 (#0)" (> Var "k~12") (Typ TypParam "K")))
             ) (Typ Bool))
           ) (Typ Bool)
          ) (@@ "pervasive/map.rs:139:48: 139:52 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:139:48: 139:52 (#0)" (> Call
              (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V"))
               () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:139:48: 139:52 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                   "V")))
               ) (@@ "pervasive/map.rs:139:53: 139:54 (#0)" (> Var "k~12") (Typ TypParam "K")))
             ) (Typ TypParam "V")
            ) (@@ "pervasive/map.rs:139:59: 139:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
               ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:139:59: 139:61 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
               (@@ "pervasive/map.rs:139:62: 139:63 (#0)" (> Var "k~12") (Typ TypParam "K")))
             ) (Typ TypParam "V"))
           ) (Typ Bool))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:157:5: 157:64 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.union_prefer_right.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:157:41: 157:45 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:157:47: 157:55 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:157:60: 157:64 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:157:65: 162:6 (#0)" (> Block () (@@ "pervasive/map.rs:158:9: 161:10 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.new.") ((Typ TypParam "K") (Typ TypParam "V") (Typ Lambda ((Typ TypParam
           "K")
         ) (Typ Bool)
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))
       ) ((tuple "impl%2" "builtin!impl&%49.") (tuple "impl%3" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/map.rs:159:13: 159:66 (#0)" (> Closure ((-> k~17 (Typ TypParam "K"))) (@@ "pervasive/map.rs:159:20: 159:66 (#0)"
          (> Binary (BinaryOp Or) (@@ "pervasive/map.rs:159:20: 159:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!set.impl&%0.contains."
              ) ((Typ TypParam "K")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:159:20: 159:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                 ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:159:20: 159:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                     "V")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
              ) (@@ "pervasive/map.rs:159:40: 159:41 (#0)" (> Var "k~17") (Typ TypParam "K")))
            ) (Typ Bool)
           ) (@@ "pervasive/map.rs:159:46: 159:66 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
              ((Typ TypParam "K")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:159:46: 159:54 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                 ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:159:46: 159:48 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
              ) (@@ "pervasive/map.rs:159:64: 159:65 (#0)" (> Var "k~17") (Typ TypParam "K")))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ Bool))
       ) (@@ "pervasive/map.rs:160:13: 160:70 (#0)" (> Closure ((-> k~44 (Typ TypParam "K"))) (@@ "pervasive/map.rs:160:20: 160:70 (#0)"
          (> If (@@ "pervasive/map.rs:160:23: 160:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
              ((Typ TypParam "K")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:160:23: 160:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                 ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:160:23: 160:25 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
              ) (@@ "pervasive/map.rs:160:41: 160:42 (#0)" (> Var "k~44") (Typ TypParam "K")))
            ) (Typ Bool)
           ) (@@ "pervasive/map.rs:160:44: 160:53 (#0)" (> Block () (@@ "pervasive/map.rs:160:46: 160:48 (#0)" (> Call (CallTarget Fun (CallTargetKind
                 Static
                ) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:160:46: 160:48 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
                (@@ "pervasive/map.rs:160:49: 160:50 (#0)" (> Var "k~44") (Typ TypParam "K")))
              ) (Typ TypParam "V"))
            ) (Typ TypParam "V")
           ) (@@ "pervasive/map.rs:160:59: 160:70 (#0)" (> Block () (@@ "pervasive/map.rs:160:61: 160:65 (#0)" (> Call (CallTarget Fun (CallTargetKind
                 Static
                ) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:160:61: 160:65 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                    "V")))
                ) (@@ "pervasive/map.rs:160:66: 160:67 (#0)" (> Var "k~44") (Typ TypParam "K")))
              ) (Typ TypParam "V"))
            ) (Typ TypParam "V"))
          ) (Typ TypParam "V"))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:177:5: 177:61 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.remove_keys.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:177:34: 177:38 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:177:40: 177:52 (#0)" (Param :name "keys~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:177:57: 177:61 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:177:62: 182:6 (#0)" (> Block () (@@ "pervasive/map.rs:178:9: 181:10 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.new.") ((Typ TypParam "K") (Typ TypParam "V") (Typ Lambda ((Typ TypParam
           "K")
         ) (Typ Bool)
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))
       ) ((tuple "impl%2" "builtin!impl&%49.") (tuple "impl%3" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/map.rs:179:13: 179:63 (#0)" (> Closure ((-> k~17 (Typ TypParam "K"))) (@@ "pervasive/map.rs:179:20: 179:63 (#0)"
          (> Binary (BinaryOp And) (@@ "pervasive/map.rs:179:20: 179:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!set.impl&%0.contains."
              ) ((Typ TypParam "K")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:179:20: 179:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                 ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:179:20: 179:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                     "V")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
              ) (@@ "pervasive/map.rs:179:40: 179:41 (#0)" (> Var "k~17") (Typ TypParam "K")))
            ) (Typ Bool)
           ) (@@ "pervasive/map.rs:179:46: 179:63 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/map.rs:179:47: 179:63 (#0)" (> Call (CallTarget
                Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "K")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:179:47: 179:51 (#0)" (> Var "keys~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))) (@@ "pervasive/map.rs:179:61: 179:62 (#0)"
                 (> Var "k~17") (Typ TypParam "K")))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ Bool))
       ) (@@ "pervasive/map.rs:180:13: 180:24 (#0)" (> Closure ((-> k~43 (Typ TypParam "K"))) (@@ "pervasive/map.rs:180:20: 180:24 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam
              "V")
            ) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:180:20: 180:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                "V")))
            ) (@@ "pervasive/map.rs:180:25: 180:26 (#0)" (> Var "k~43") (Typ TypParam "K")))
          ) (Typ TypParam "V"))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:197:5: 197:58 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.restrict.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:197:31: 197:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:197:37: 197:49 (#0)" (Param :name "keys~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:197:54: 197:58 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:197:59: 202:6 (#0)" (> Block () (@@ "pervasive/map.rs:198:9: 201:10 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.new.") ((Typ TypParam "K") (Typ TypParam "V") (Typ Lambda ((Typ TypParam
           "K")
         ) (Typ Bool)
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))
       ) ((tuple "impl%2" "builtin!impl&%49.") (tuple "impl%3" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/map.rs:199:13: 199:62 (#0)" (> Closure ((-> k~17 (Typ TypParam "K"))) (@@ "pervasive/map.rs:199:20: 199:62 (#0)"
          (> Binary (BinaryOp And) (@@ "pervasive/map.rs:199:20: 199:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!set.impl&%0.contains."
              ) ((Typ TypParam "K")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:199:20: 199:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                 ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:199:20: 199:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                     "V")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
              ) (@@ "pervasive/map.rs:199:40: 199:41 (#0)" (> Var "k~17") (Typ TypParam "K")))
            ) (Typ Bool)
           ) (@@ "pervasive/map.rs:199:46: 199:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
              ((Typ TypParam "K")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:199:46: 199:50 (#0)" (> Var "keys~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))) (@@ "pervasive/map.rs:199:60: 199:61 (#0)"
               (> Var "k~17") (Typ TypParam "K")))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ Bool))
       ) (@@ "pervasive/map.rs:200:13: 200:24 (#0)" (> Closure ((-> k~42 (Typ TypParam "K"))) (@@ "pervasive/map.rs:200:20: 200:24 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam
              "V")
            ) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:200:20: 200:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                "V")))
            ) (@@ "pervasive/map.rs:200:25: 200:26 (#0)" (> Var "k~42") (Typ TypParam "K")))
          ) (Typ TypParam "V"))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:207:5: 207:52 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.agrees.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:207:29: 207:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:207:35: 207:43 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:207:48: 207:52 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:207:53: 210:6 (#0)" (> Block () (@@ "pervasive/map.rs:208:9: 208:15 (#0)" (> Quant (Forall :boxed_params
       true
      ) ((-> k~12 (Typ TypParam "K"))) (@@ "pervasive/map.rs:208:28: 208:32 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation AutoTrigger))
        (@@ "pervasive/map.rs:208:28: 208:32 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/map.rs:208:28: 208:74 (#0)" (> Binary
            (BinaryOp And) (@@ "pervasive/map.rs:208:28: 208:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
               ((Typ TypParam "K")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:208:28: 208:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                  ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/map.rs:208:28: 208:32 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                      "V")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
               ) (@@ "pervasive/map.rs:208:48: 208:49 (#0)" (> Var "k~12") (Typ TypParam "K")))
             ) (Typ Bool)
            ) (@@ "pervasive/map.rs:208:54: 208:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
               ((Typ TypParam "K")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:208:54: 208:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                  ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/map.rs:208:54: 208:56 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
               ) (@@ "pervasive/map.rs:208:72: 208:73 (#0)" (> Var "k~12") (Typ TypParam "K")))
             ) (Typ Bool))
           ) (Typ Bool)
          ) (@@ "pervasive/map.rs:209:13: 209:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:209:13: 209:17 (#0)" (> Call
              (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V"))
               () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:209:13: 209:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                   "V")))
               ) (@@ "pervasive/map.rs:209:18: 209:19 (#0)" (> Var "k~12") (Typ TypParam "K")))
             ) (Typ TypParam "V")
            ) (@@ "pervasive/map.rs:209:24: 209:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
               ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:209:24: 209:26 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
               (@@ "pervasive/map.rs:209:27: 209:28 (#0)" (> Var "k~12") (Typ TypParam "K")))
             ) (Typ TypParam "V"))
           ) (Typ Bool))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:213:5: 213:57 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.tracked_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/map.rs:213:53: 213:57 (#0)" (Param :name "out_v~8" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam
       "K"
      ) (Typ TypParam "V"))
    ) :mode Proof :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:215:13: 215:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:215:13: 215:18 (#0)" (> Var "out_v~8")
      (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
     ) (@@ "pervasive/map.rs:215:22: 215:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.empty.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:221:5: 221:77 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.tracked_insert.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:221:41: 221:50 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Proof :is_mut true :unwrapped_info None))
   (@ "pervasive/map.rs:221:52: 221:58 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:221:60: 221:76 (#0)" (Param :name "value~6" :typ (Typ TypParam "V") :mode Proof :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:224:5: 224:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:223:13: 223:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:223:14: 223:18 (#0)" (> Var "self~2")
      (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
     ) (@@ "pervasive/map.rs:223:22: 223:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.insert.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:223:35: 223:44 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (@@ "pervasive/map.rs:223:46: 223:49 (#0)" (> Var "key~4") (Typ TypParam "K")) (@@ "pervasive/map.rs:223:51: 223:56 (#0)"
         (> Var "value~6") (Typ TypParam "V")))
      ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:231:5: 231:76 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.tracked_remove.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:231:41: 231:50 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Proof :is_mut true :unwrapped_info None))
   (@ "pervasive/map.rs:231:52: 231:58 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:231:75: 231:76 (#0)" (Param :name "v~30" :typ (Typ TypParam "V") :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:233:13: 233:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:233:13: 233:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:233:13: 233:22 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
            "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:233:38: 233:41 (#0)" (> Var "key~4") (Typ TypParam "K")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:235:13: 235:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:235:14: 235:18 (#0)" (> Var "self~2")
      (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
     ) (@@ "pervasive/map.rs:235:22: 235:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.remove.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:235:35: 235:44 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (@@ "pervasive/map.rs:235:46: 235:49 (#0)" (> Var "key~4") (Typ TypParam "K")))
      ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:236:13: 236:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:236:13: 236:14 (#0)" (> Var "v~30")
      (Typ TypParam "V")
     ) (@@ "pervasive/map.rs:236:18: 236:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:236:18: 236:27 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (@@ "pervasive/map.rs:236:28: 236:31 (#0)" (> Var "key~4") (Typ TypParam "K")))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:242:5: 242:73 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.tracked_borrow.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:242:41: 242:46 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!map.Map."
       ((Typ TypParam "K") (Typ TypParam "V")))
     ) :mode Proof :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:242:48: 242:54 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:242:71: 242:73 (#0)" (Param :name "v~27" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
    :mode Proof :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/map.rs:244:13: 244:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:244:13: 244:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:244:13: 244:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!map.Map."
            ((Typ TypParam "K") (Typ TypParam "V"))))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:244:33: 244:36 (#0)" (> Var "key~4") (Typ TypParam "K")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:246:13: 246:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:246:14: 246:15 (#0)" (> Var "v~27")
      (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
     ) (@@ "pervasive/map.rs:246:20: 246:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:246:20: 246:24 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!map.Map."
           ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (@@ "pervasive/map.rs:246:31: 246:34 (#0)" (> Var "key~4") (Typ TypParam "K")))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:252:5: 255:37 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.tracked_map_keys.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "J" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:253:9: 253:35 (#0)" (Param :name "old_map~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ
        TypParam "V"))
     ) :mode Proof :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:254:9: 254:27 (#0)" (Param :name "key_map~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ
        TypParam "K"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:255:28: 255:37 (#0)" (Param :name "new_map~112" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam
       "J"
      ) (Typ TypParam "V"))
    ) :mode Proof :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/map.rs:257:13: 257:19 (#0)" (> Quant (Forall :boxed_params true) ((-> j~18 (Typ TypParam "J"))) (@@ "pervasive/map.rs:257:33: 257:40 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation AutoTrigger)) (@@ "pervasive/map.rs:257:33: 257:40 (#0)" (> Binary (BinaryOp Implies)
         (@@ "pervasive/map.rs:257:33: 257:58 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
            ((Typ TypParam "J")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:257:33: 257:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:257:33: 257:40 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                   "K")))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "J")))
            ) (@@ "pervasive/map.rs:257:56: 257:57 (#0)" (> Var "j~18") (Typ TypParam "J")))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:257:63: 257:103 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
            ((Typ TypParam "K")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:257:63: 257:76 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:257:63: 257:70 (#0)" (> Var "old_map~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                   "V")))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
            ) (@@ "pervasive/map.rs:257:86: 257:102 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
               ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:257:86: 257:93 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                   "K")))
               ) (@@ "pervasive/map.rs:257:100: 257:101 (#0)" (> Var "j~18") (Typ TypParam "J")))
             ) (Typ TypParam "K")))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:258:13: 258:19 (#0)" (> Quant (Forall :boxed_params true) ((-> j1~52 (Typ TypParam "J")) (-> j2~54 (Typ
        TypParam "J"))
     ) (@@ "pervasive/map.rs:259:17: 259:18 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation AutoTrigger)) (@@ "pervasive/map.rs:259:17: 259:18 (#0)"
        (> Binary (BinaryOp Implies) (@@ "pervasive/map.rs:259:17: 259:91 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/map.rs:259:17: 259:61 (#0)"
            (> Binary (BinaryOp And) (@@ "pervasive/map.rs:259:17: 259:31 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/map.rs:259:18: 259:31 (#0)"
                (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:259:24: 259:26 (#0)" (> Var "j1~52") (Typ TypParam "J")) (@@ "pervasive/map.rs:259:28: 259:30 (#0)"
                  (> Var "j2~54") (Typ TypParam "J"))
                ) (Typ Bool))
              ) (Typ Bool)
             ) (@@ "pervasive/map.rs:259:35: 259:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                ((Typ TypParam "J")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:259:35: 259:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                   ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/map.rs:259:35: 259:42 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                       "K")))))
                 ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "J")))
                ) (@@ "pervasive/map.rs:259:58: 259:60 (#0)" (> Var "j1~52") (Typ TypParam "J")))
              ) (Typ Bool))
            ) (Typ Bool)
           ) (@@ "pervasive/map.rs:259:65: 259:91 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
              ((Typ TypParam "J")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:259:65: 259:78 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                 ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:259:65: 259:72 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                     "K")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "J")))
              ) (@@ "pervasive/map.rs:259:88: 259:90 (#0)" (> Var "j2~54") (Typ TypParam "J")))
            ) (Typ Bool))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:260:21: 260:65 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/map.rs:260:22: 260:65 (#0)" (> Binary (BinaryOp
              Eq Spec
             ) (@@ "pervasive/map.rs:260:28: 260:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
                ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:260:28: 260:35 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                    "K")))
                ) (@@ "pervasive/map.rs:260:42: 260:44 (#0)" (> Var "j1~52") (Typ TypParam "J")))
              ) (Typ TypParam "K")
             ) (@@ "pervasive/map.rs:260:47: 260:64 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
                ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:260:47: 260:54 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                    "K")))
                ) (@@ "pervasive/map.rs:260:61: 260:63 (#0)" (> Var "j2~54") (Typ TypParam "J")))
              ) (Typ TypParam "K"))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:262:13: 262:19 (#0)" (> Quant (Forall :boxed_params true) ((-> j~121 (Typ TypParam "J"))) (@@ "pervasive/map.rs:262:24: 262:25 (#0)"
      (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:262:35: 262:60 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None))
         (@@ "pervasive/map.rs:262:35: 262:60 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
            ((Typ TypParam "J")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:262:35: 262:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "J") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:262:35: 262:42 (#0)" (> Var "new_map~112") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                   "V")))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "J")))
            ) (@@ "pervasive/map.rs:262:58: 262:59 (#0)" (> Var "j~121") (Typ TypParam "J")))
          ) (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/map.rs:262:66: 262:91 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
          ((Typ TypParam "J")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:262:66: 262:79 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
             ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:262:66: 262:73 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                 "K")))))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "J")))
          ) (@@ "pervasive/map.rs:262:89: 262:90 (#0)" (> Var "j~121") (Typ TypParam "J")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:263:13: 263:19 (#0)" (> Quant (Forall :boxed_params true) ((-> j~151 (Typ TypParam "J"))) (@@ "pervasive/map.rs:263:24: 263:31 (#0)"
      (> Binary (BinaryOp Implies) (@@ "pervasive/map.rs:263:24: 263:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!set.impl&%0.contains."
          ) ((Typ TypParam "J")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:263:24: 263:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
             ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:263:24: 263:31 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                 "K")))))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "J")))
          ) (@@ "pervasive/map.rs:263:47: 263:48 (#0)" (> Var "j~151") (Typ TypParam "J")))
        ) (Typ Bool)
       ) (@@ "pervasive/map.rs:264:17: 265:18 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/map.rs:264:17: 264:42 (#0)" (> Call (CallTarget
            Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "J")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:264:17: 264:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "J") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:264:17: 264:24 (#0)" (> Var "new_map~112") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                   "V")))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "J")))
            ) (@@ "pervasive/map.rs:264:40: 264:41 (#0)" (> Var "j~151") (Typ TypParam "J")))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:265:17: 265:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:265:28: 265:44 (#0)" (> Unary
             (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/map.rs:265:28: 265:44 (#0)" (> Call (CallTarget Fun (CallTargetKind
                 Static
                ) (Fun :path "vstd!map.impl&%0.index.") ((Typ TypParam "J") (Typ TypParam "V")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:265:28: 265:35 (#0)" (> Var "new_map~112") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                    "V")))
                ) (@@ "pervasive/map.rs:265:42: 265:43 (#0)" (> Var "j~151") (Typ TypParam "J")))
              ) (Typ TypParam "V"))
            ) (Typ TypParam "V")
           ) (@@ "pervasive/map.rs:265:48: 265:79 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
              ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:265:48: 265:55 (#0)" (> Var "old_map~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                  "V")))
              ) (@@ "pervasive/map.rs:265:62: 265:78 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
                 ((Typ TypParam "J") (Typ TypParam "K")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:265:62: 265:69 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "J") (Typ TypParam
                     "K")))
                 ) (@@ "pervasive/map.rs:265:76: 265:77 (#0)" (> Var "j~151") (Typ TypParam "J")))
               ) (Typ TypParam "K")))
            ) (Typ TypParam "V"))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:271:5: 272:39 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.tracked_remove_keys.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:271:46: 271:55 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Proof :is_mut true :unwrapped_info None))
   (@ "pervasive/map.rs:271:57: 271:69 (#0)" (Param :name "keys~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:272:30: 272:39 (#0)" (Param :name "out_map~30" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Proof :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/map.rs:274:13: 274:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.subset_of.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:274:13: 274:17 (#0)" (> Var "keys~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))) (@@ "pervasive/map.rs:274:28: 274:43 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.") ((Typ TypParam "K") (Typ TypParam "V"))
         () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:274:28: 274:37 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
            "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:276:13: 276:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:276:13: 276:17 (#0)" (> Loc (@@
        "pervasive/map.rs:276:13: 276:17 (#0)" (> VarLoc "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map."
          ((Typ TypParam "K") (Typ TypParam "V")))))
      ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
     ) (@@ "pervasive/map.rs:276:21: 276:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.remove_keys.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:276:21: 276:30 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (@@ "pervasive/map.rs:276:43: 276:47 (#0)" (> Var "keys~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))))
      ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:277:13: 277:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:277:13: 277:20 (#0)" (> Var "out_map~30")
      (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
     ) (@@ "pervasive/map.rs:277:24: 277:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.restrict.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:277:24: 277:33 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (@@ "pervasive/map.rs:277:43: 277:47 (#0)" (> Var "keys~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))))
      ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:283:5: 283:76 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.tracked_union_prefer_right.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:283:53: 283:62 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Proof :is_mut true :unwrapped_info None))
   (@ "pervasive/map.rs:283:64: 283:75 (#0)" (Param :name "right~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:286:5: 286:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:285:13: 285:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:285:14: 285:18 (#0)" (> Var "self~2")
      (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
     ) (@@ "pervasive/map.rs:285:22: 285:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.union_prefer_right.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:285:22: 285:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (@@ "pervasive/map.rs:285:51: 285:56 (#0)" (> Var "right~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
            "V")))))
      ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:291:5: 291:77 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.map_entries.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "W" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:291:37: 291:41 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:291:43: 291:52 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "K") (Typ TypParam "V")) (Typ TypParam
       "W")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:291:68: 291:77 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "W"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:291:78: 293:6 (#0)" (> Block () (@@ "pervasive/map.rs:292:9: 292:68 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.new.") ((Typ TypParam "K") (Typ TypParam "W") (Typ Lambda ((Typ TypParam
           "K")
         ) (Typ Bool)
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "W"))
       ) ((tuple "impl%2" "builtin!impl&%49.") (tuple "impl%3" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/map.rs:292:18: 292:45 (#0)" (> Closure ((-> k~17 (Typ TypParam "K"))) (@@ "pervasive/map.rs:292:25: 292:45 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.contains_key.") ((Typ TypParam "K") (Typ TypParam
              "V")
            ) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:292:25: 292:29 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                "V")))
            ) (@@ "pervasive/map.rs:292:43: 292:44 (#0)" (> Var "k~17") (Typ TypParam "K")))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ Bool))
       ) (@@ "pervasive/map.rs:292:47: 292:67 (#0)" (> Closure ((-> k~33 (Typ TypParam "K"))) (@@ "pervasive/map.rs:292:54: 292:67 (#0)"
          (> Call (CallTarget FnSpec (@@ "pervasive/map.rs:292:54: 292:55 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "K") (Typ TypParam
                "V")
              ) (Typ TypParam "W")))
           ) ((@@ "pervasive/map.rs:292:56: 292:57 (#0)" (> Var "k~33") (Typ TypParam "K")) (@@ "pervasive/map.rs:292:59: 292:63 (#0)"
             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam
                 "V")
               ) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:292:59: 292:63 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                   "V")))
               ) (@@ "pervasive/map.rs:292:64: 292:65 (#0)" (> Var "k~33") (Typ TypParam "K")))
             ) (Typ TypParam "V")))
          ) (Typ TypParam "W"))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "W"))))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "W"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "W")))
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:296:5: 296:73 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%0.map_values.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "W" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:296:36: 296:40 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:296:42: 296:51 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "V")) (Typ TypParam "W")) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:296:64: 296:73 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "W"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:296:74: 298:6 (#0)" (> Block () (@@ "pervasive/map.rs:297:9: 297:65 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.new.") ((Typ TypParam "K") (Typ TypParam "W") (Typ Lambda ((Typ TypParam
           "K")
         ) (Typ Bool)
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "W"))
       ) ((tuple "impl%2" "builtin!impl&%49.") (tuple "impl%3" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/map.rs:297:18: 297:45 (#0)" (> Closure ((-> k~17 (Typ TypParam "K"))) (@@ "pervasive/map.rs:297:25: 297:45 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.contains_key.") ((Typ TypParam "K") (Typ TypParam
              "V")
            ) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:297:25: 297:29 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                "V")))
            ) (@@ "pervasive/map.rs:297:43: 297:44 (#0)" (> Var "k~17") (Typ TypParam "K")))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ Bool))
       ) (@@ "pervasive/map.rs:297:47: 297:64 (#0)" (> Closure ((-> k~33 (Typ TypParam "K"))) (@@ "pervasive/map.rs:297:54: 297:64 (#0)"
          (> Call (CallTarget FnSpec (@@ "pervasive/map.rs:297:54: 297:55 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "V")) (Typ TypParam
               "W")))
           ) ((@@ "pervasive/map.rs:297:56: 297:60 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
               ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:297:56: 297:60 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                   "V")))
               ) (@@ "pervasive/map.rs:297:61: 297:62 (#0)" (> Var "k~33") (Typ TypParam "K")))
             ) (Typ TypParam "V")))
          ) (Typ TypParam "W"))
        ) (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "W"))))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "W"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "W")))
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:537:5: 540:6 (#0)" (Function
  :name (Fun :path "vstd!map.impl&%1.tracked_map_keys_in_place.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:538:28: 538:37 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Proof :is_mut true :unwrapped_info None))
   (@ "pervasive/map.rs:539:9: 539:27 (#0)" (Param :name "key_map~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ
        TypParam "K"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:551:5: 551:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:542:9: 542:15 (#0)" (> Quant (Forall :boxed_params true) ((-> j~18 (Typ TypParam "K"))) (@@ "pervasive/map.rs:542:28: 542:35 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation AutoTrigger)) (@@ "pervasive/map.rs:542:28: 542:35 (#0)" (> Binary (BinaryOp Implies)
         (@@ "pervasive/map.rs:542:28: 542:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
            ((Typ TypParam "K")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:542:28: 542:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:542:28: 542:35 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                   "K")))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
            ) (@@ "pervasive/map.rs:542:51: 542:52 (#0)" (> Var "j~18") (Typ TypParam "K")))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:542:58: 542:100 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
            ((Typ TypParam "K")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:542:58: 542:73 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:542:58: 542:67 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                  "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
            ) (@@ "pervasive/map.rs:542:83: 542:99 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
               ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:542:83: 542:90 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                   "K")))
               ) (@@ "pervasive/map.rs:542:97: 542:98 (#0)" (> Var "j~18") (Typ TypParam "K")))
             ) (Typ TypParam "K")))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:543:9: 543:15 (#0)" (> Quant (Forall :boxed_params true) ((-> j1~55 (Typ TypParam "K")) (-> j2~57 (Typ TypParam
        "K"))
     ) (@@ "pervasive/map.rs:544:13: 544:15 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation AutoTrigger)) (@@ "pervasive/map.rs:544:13: 544:15 (#0)"
        (> Binary (BinaryOp Implies) (@@ "pervasive/map.rs:544:13: 544:81 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/map.rs:544:13: 544:51 (#0)"
            (> Binary (BinaryOp And) (@@ "pervasive/map.rs:544:13: 544:15 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/map.rs:544:13: 544:15 (#0)"
                (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:544:13: 544:15 (#0)" (> Var "j1~55") (Typ TypParam "K")) (@@ "pervasive/map.rs:544:19: 544:21 (#0)"
                  (> Var "j2~57") (Typ TypParam "K"))
                ) (Typ Bool))
              ) (Typ Bool)
             ) (@@ "pervasive/map.rs:544:25: 544:51 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                ((Typ TypParam "K")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:544:25: 544:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                   ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/map.rs:544:25: 544:32 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                       "K")))))
                 ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
                ) (@@ "pervasive/map.rs:544:48: 544:50 (#0)" (> Var "j1~55") (Typ TypParam "K")))
              ) (Typ Bool))
            ) (Typ Bool)
           ) (@@ "pervasive/map.rs:544:55: 544:81 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
              ((Typ TypParam "K")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:544:55: 544:68 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                 ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:544:55: 544:62 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                     "K")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
              ) (@@ "pervasive/map.rs:544:78: 544:80 (#0)" (> Var "j2~57") (Typ TypParam "K")))
            ) (Typ Bool))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:545:13: 545:20 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/map.rs:545:13: 545:20 (#0)" (> Binary (BinaryOp
              Eq Spec
             ) (@@ "pervasive/map.rs:545:13: 545:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
                ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:545:13: 545:20 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                    "K")))
                ) (@@ "pervasive/map.rs:545:27: 545:29 (#0)" (> Var "j1~55") (Typ TypParam "K")))
              ) (Typ TypParam "K")
             ) (@@ "pervasive/map.rs:545:34: 545:51 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
                ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:545:34: 545:41 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                    "K")))
                ) (@@ "pervasive/map.rs:545:48: 545:50 (#0)" (> Var "j2~57") (Typ TypParam "K")))
              ) (Typ TypParam "K"))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:547:9: 547:15 (#0)" (> Quant (Forall :boxed_params true) ((-> j~125 (Typ TypParam "K"))) (@@ "pervasive/map.rs:547:19: 547:20 (#0)"
      (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:547:30: 547:52 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None))
         (@@ "pervasive/map.rs:547:30: 547:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
            ((Typ TypParam "K")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:547:30: 547:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:547:30: 547:34 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map."
                  ((Typ TypParam "K") (Typ TypParam "V"))))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
            ) (@@ "pervasive/map.rs:547:50: 547:51 (#0)" (> Var "j~125") (Typ TypParam "K")))
          ) (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/map.rs:547:56: 547:81 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
          ((Typ TypParam "K")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:547:56: 547:69 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
             ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:547:56: 547:63 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                 "K")))))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
          ) (@@ "pervasive/map.rs:547:79: 547:80 (#0)" (> Var "j~125") (Typ TypParam "K")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:548:9: 548:15 (#0)" (> Quant (Forall :boxed_params true) ((-> j~155 (Typ TypParam "K"))) (@@ "pervasive/map.rs:548:19: 548:26 (#0)"
      (> Binary (BinaryOp Implies) (@@ "pervasive/map.rs:548:19: 548:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!set.impl&%0.contains."
          ) ((Typ TypParam "K")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:548:19: 548:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
             ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:548:19: 548:26 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                 "K")))))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
          ) (@@ "pervasive/map.rs:548:42: 548:43 (#0)" (> Var "j~155") (Typ TypParam "K")))
        ) (Typ Bool)
       ) (@@ "pervasive/map.rs:549:13: 550:14 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/map.rs:549:13: 549:35 (#0)" (> Call (CallTarget
            Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "K")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/map.rs:549:13: 549:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
               ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/map.rs:549:13: 549:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map."
                  ((Typ TypParam "K") (Typ TypParam "V"))))))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
            ) (@@ "pervasive/map.rs:549:33: 549:34 (#0)" (> Var "j~155") (Typ TypParam "K")))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:550:13: 550:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:550:24: 550:37 (#0)" (> Unary
             (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/map.rs:550:24: 550:37 (#0)" (> Call (CallTarget Fun (CallTargetKind
                 Static
                ) (Fun :path "vstd!map.impl&%0.index.") ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/map.rs:550:24: 550:28 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map."
                   ((Typ TypParam "K") (Typ TypParam "V"))))
                ) (@@ "pervasive/map.rs:550:35: 550:36 (#0)" (> Var "j~155") (Typ TypParam "K")))
              ) (Typ TypParam "V"))
            ) (Typ TypParam "V")
           ) (@@ "pervasive/map.rs:550:41: 550:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
              ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:550:41: 550:50 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
              ) (@@ "pervasive/map.rs:550:57: 550:73 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.index.")
                 ((Typ TypParam "K") (Typ TypParam "K")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/map.rs:550:57: 550:64 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
                     "K")))
                 ) (@@ "pervasive/map.rs:550:71: 550:72 (#0)" (> Var "j~155") (Typ TypParam "K")))
               ) (Typ TypParam "K")))
            ) (Typ TypParam "V"))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:551:5: 556:6 (#0)" (> Block (
     (@ "pervasive/map.rs:552:32: 552:39 (#0)" (Stmt Decl :pattern (@@ "pervasive/map.rs:552:32: 552:39 (#0)" (Pattern Var :name "tmp~211"
         :mutable true
        ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
       ) :mode Proof :init (@@ "pervasive/map.rs:552:42: 552:63 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.tracked_empty.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ()
        ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))))
     (@ "pervasive/map.rs:553:9: 553:51 (#0)" (Stmt Expr (@@ "pervasive/map.rs:553:9: 553:51 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!modes.tracked_swap.") ((Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/map.rs:553:36: 553:44 (#0)" (> Loc (@@ "pervasive/map.rs:553:41: 553:44 (#0)" (> VarLoc "tmp~211") (Typ Datatype
              "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
           ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
          ) (@@ "pervasive/map.rs:553:46: 553:50 (#0)" (> Loc (@@ "pervasive/map.rs:553:46: 553:50 (#0)" (> VarLoc "self~2") (Typ Decorate
              (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
           ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))))
        ) (Typ Tuple ()))))
     (@ "pervasive/map.rs:554:32: 554:39 (#0)" (Stmt Decl :pattern (@@ "pervasive/map.rs:554:32: 554:39 (#0)" (Pattern Var :name "tmp~234"
         :mutable true
        ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
       ) :mode Proof :init (@@ "pervasive/map.rs:554:42: 554:78 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.tracked_map_keys.")
          ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "K")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:554:65: 554:68 (#0)" (> Var "tmp~211") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
              "V")))
          ) (@@ "pervasive/map.rs:554:70: 554:77 (#0)" (> Var "key_map~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
              "K")))))
        ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))))
     (@ "pervasive/map.rs:555:9: 555:51 (#0)" (Stmt Expr (@@ "pervasive/map.rs:555:9: 555:51 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!modes.tracked_swap.") ((Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/map.rs:555:36: 555:44 (#0)" (> Loc (@@ "pervasive/map.rs:555:41: 555:44 (#0)" (> VarLoc "tmp~234") (Typ Datatype
              "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
           ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
          ) (@@ "pervasive/map.rs:555:46: 555:50 (#0)" (> Loc (@@ "pervasive/map.rs:555:46: 555:50 (#0)" (> VarLoc "self~2") (Typ Decorate
              (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
           ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/map.rs:317:1: 317:74 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_index_decreases_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:317:53: 317:65 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:317:67: 317:73 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:323:1: 323:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:319:9: 319:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:319:9: 319:16 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:319:9: 319:10 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:320:9: 320:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:320:9: 320:16 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:320:9: 320:10 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:320:26: 320:29 (#0)" (> Var "key~4") (Typ TypParam "K")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "/Users/byc/Desktop/REUSE2023/verus/source/builtin/src/lib.rs:1118:9: 1118:68 (#60)" (> Unary (UnaryOp Trigger (TriggerAnnotation
       Trigger None)
     ) (@@ "/Users/byc/Desktop/REUSE2023/verus/source/builtin/src/lib.rs:1118:9: 1118:68 (#60)" (> Binary (BinaryOp HeightCompare
        :strictly_lt true :recursive_function_field false
       ) (@@ "pervasive/map.rs:322:39: 322:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:322:39: 322:40 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
          (@@ "pervasive/map.rs:322:41: 322:44 (#0)" (> Var "key~4") (Typ TypParam "K")))
        ) (Typ TypParam "V")
       ) (@@ "pervasive/map.rs:322:34: 322:35 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:330:1: 330:76 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_index_decreases_infinite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:330:55: 330:67 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:330:69: 330:75 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:335:1: 335:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:332:9: 332:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:332:9: 332:16 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:332:9: 332:10 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:332:26: 332:29 (#0)" (> Var "key~4") (Typ TypParam "K")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:334:20: 334:71 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/map.rs:334:20: 334:71 (#0)"
      (> Binary (BinaryOp HeightCompare :strictly_lt true :recursive_function_field true) (@@ "pervasive/map.rs:334:61: 334:62 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam
            "V")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:334:61: 334:62 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
          (@@ "pervasive/map.rs:334:63: 334:66 (#0)" (> Var "key~4") (Typ TypParam "K")))
        ) (Typ TypParam "V")
       ) (@@ "pervasive/map.rs:334:69: 334:70 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:340:1: 340:37 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/map.rs:343:1: 343:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:342:9: 342:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:342:20: 342:46 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/map.rs:342:20: 342:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:342:20: 342:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.empty.")
             ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ()
           ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
     ) (@@ "pervasive/map.rs:342:50: 342:67 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.")
        ((Typ TypParam "K")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:348:1: 348:75 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_insert_domain.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:348:44: 348:56 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:348:58: 348:64 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:348:66: 348:74 (#0)" (Param :name "value~6" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:351:1: 351:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:350:9: 350:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:350:20: 350:46 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/map.rs:350:20: 350:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:350:20: 350:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.insert.")
             ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:350:20: 350:21 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
             (@@ "pervasive/map.rs:350:29: 350:32 (#0)" (> Var "key~4") (Typ TypParam "K")) (@@ "pervasive/map.rs:350:34: 350:39 (#0)"
              (> Var "value~6") (Typ TypParam "V")))
           ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
     ) (@@ "pervasive/map.rs:350:50: 350:69 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.")
        ((Typ TypParam "K")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:350:50: 350:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
           ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/map.rs:350:50: 350:51 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
        ) (@@ "pervasive/map.rs:350:65: 350:68 (#0)" (> Var "key~4") (Typ TypParam "K")))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:356:1: 356:73 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_insert_same.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:356:42: 356:54 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:356:56: 356:62 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:356:64: 356:72 (#0)" (Param :name "value~6" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:359:1: 359:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:358:9: 358:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:358:9: 358:21 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/map.rs:358:9: 358:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:358:20: 358:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.insert.")
             ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:358:20: 358:21 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
             (@@ "pervasive/map.rs:358:29: 358:32 (#0)" (> Var "key~4") (Typ TypParam "K")) (@@ "pervasive/map.rs:358:34: 358:39 (#0)"
              (> Var "value~6") (Typ TypParam "V")))
           ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
          ) (@@ "pervasive/map.rs:358:41: 358:44 (#0)" (> Var "key~4") (Typ TypParam "K")))
        ) (Typ TypParam "V"))
      ) (Typ TypParam "V")
     ) (@@ "pervasive/map.rs:358:49: 358:54 (#0)" (> Var "value~6") (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:364:1: 364:88 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_insert_different.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:364:47: 364:59 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:364:61: 364:68 (#0)" (Param :name "key1~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:364:70: 364:77 (#0)" (Param :name "key2~6" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:364:79: 364:87 (#0)" (Param :name "value~8" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:370:1: 370:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:366:9: 366:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:366:9: 366:16 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:366:9: 366:10 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:366:26: 366:30 (#0)" (> Var "key1~4") (Typ TypParam "K")))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:367:9: 367:13 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/map.rs:367:9: 367:13 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/map.rs:367:9: 367:13 (#0)" (> Var "key1~4") (Typ TypParam "K")) (@@ "pervasive/map.rs:367:17: 367:21 (#0)"
        (> Var "key2~6") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:369:9: 369:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:369:9: 369:10 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/map.rs:369:9: 369:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.insert.")
           ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/map.rs:369:9: 369:10 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
           (@@ "pervasive/map.rs:369:18: 369:22 (#0)" (> Var "key2~6") (Typ TypParam "K")) (@@ "pervasive/map.rs:369:24: 369:29 (#0)"
            (> Var "value~8") (Typ TypParam "V")))
         ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
        ) (@@ "pervasive/map.rs:369:31: 369:35 (#0)" (> Var "key1~4") (Typ TypParam "K")))
      ) (Typ TypParam "V")
     ) (@@ "pervasive/map.rs:369:40: 369:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:369:40: 369:41 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        (@@ "pervasive/map.rs:369:42: 369:46 (#0)" (> Var "key1~4") (Typ TypParam "K")))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:375:1: 375:65 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_remove_domain.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:375:44: 375:56 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:375:58: 375:64 (#0)" (Param :name "key~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:378:1: 378:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:377:9: 377:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:377:20: 377:39 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/map.rs:377:20: 377:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/map.rs:377:20: 377:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.remove.")
             ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/map.rs:377:20: 377:21 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
             (@@ "pervasive/map.rs:377:29: 377:32 (#0)" (> Var "key~4") (Typ TypParam "K")))
           ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
     ) (@@ "pervasive/map.rs:377:43: 377:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
        ((Typ TypParam "K")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:377:43: 377:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
           ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/map.rs:377:43: 377:44 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
        ) (@@ "pervasive/map.rs:377:58: 377:61 (#0)" (> Var "key~4") (Typ TypParam "K")))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:383:1: 383:78 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_remove_different.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:383:47: 383:59 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:383:61: 383:68 (#0)" (Param :name "key1~4" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/map.rs:383:70: 383:77 (#0)" (Param :name "key2~6" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/map.rs:389:1: 389:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/map.rs:385:9: 385:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/map.rs:385:9: 385:16 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
         ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/map.rs:385:9: 385:10 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
      ) (@@ "pervasive/map.rs:385:26: 385:30 (#0)" (> Var "key1~4") (Typ TypParam "K")))
    ) (Typ Bool))
   (@@ "pervasive/map.rs:386:9: 386:13 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/map.rs:386:9: 386:13 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/map.rs:386:9: 386:13 (#0)" (> Var "key1~4") (Typ TypParam "K")) (@@ "pervasive/map.rs:386:17: 386:21 (#0)"
        (> Var "key2~6") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/map.rs:388:9: 388:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:388:9: 388:10 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/map.rs:388:9: 388:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.remove.")
           ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/map.rs:388:9: 388:10 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
           (@@ "pervasive/map.rs:388:18: 388:22 (#0)" (> Var "key2~6") (Typ TypParam "K")))
         ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
        ) (@@ "pervasive/map.rs:388:24: 388:28 (#0)" (> Var "key1~4") (Typ TypParam "K")))
      ) (Typ TypParam "V")
     ) (@@ "pervasive/map.rs:388:33: 388:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
        ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/map.rs:388:33: 388:34 (#0)" (> Var "m~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        (@@ "pervasive/map.rs:388:35: 388:39 (#0)" (> Var "key1~4") (Typ TypParam "K")))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:394:1: 394:69 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:394:40: 394:53 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:394:55: 394:68 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:400:1: 400:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:396:9: 396:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:396:20: 396:31 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/map.rs:396:20: 396:31 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
            (Typ TypParam "V")))
         ) (@@ "pervasive/map.rs:396:21: 396:23 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
         (@@ "pervasive/map.rs:396:28: 396:30 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/map.rs:396:37: 399:10 (#0)" (> Block () (@@ "pervasive/map.rs:397:17: 398:23 (#0)" (> Binary (BinaryOp And)
         (@@ "pervasive/map.rs:397:17: 397:19 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
           (@@ "pervasive/map.rs:397:17: 397:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
              ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:397:17: 397:19 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
           ) (@@ "pervasive/map.rs:397:30: 397:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
              ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:397:30: 397:32 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:398:17: 398:23 (#0)" (> Quant (Forall :boxed_params true) ((-> k~47 (Typ TypParam "K"))) (@@ "pervasive/map.rs:398:39: 398:41 (#0)"
            (> Unary (UnaryOp Trigger (TriggerAnnotation AutoTrigger)) (@@ "pervasive/map.rs:398:39: 398:41 (#0)" (> Binary (BinaryOp Implies)
               (@@ "pervasive/map.rs:398:39: 398:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                  ((Typ TypParam "K")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/map.rs:398:39: 398:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                     ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/map.rs:398:39: 398:41 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
                  ) (@@ "pervasive/map.rs:398:57: 398:58 (#0)" (> Var "k~47") (Typ TypParam "K")))
                ) (Typ Bool)
               ) (@@ "pervasive/map.rs:398:64: 398:66 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:398:64: 398:66 (#0)" (> Call
                   (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V"))
                    () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/map.rs:398:64: 398:66 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
                    (@@ "pervasive/map.rs:398:67: 398:68 (#0)" (> Var "k~47") (Typ TypParam "K")))
                  ) (Typ TypParam "V")
                 ) (@@ "pervasive/map.rs:398:73: 398:75 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
                    ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/map.rs:398:73: 398:75 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
                    (@@ "pervasive/map.rs:398:76: 398:77 (#0)" (> Var "k~47") (Typ TypParam "K")))
                  ) (Typ TypParam "V"))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:405:1: 405:74 (#0)" (Function
  :name (Fun :path "vstd!map.axiom_map_ext_equal_deep.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:405:45: 405:58 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/map.rs:405:60: 405:73 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:411:1: 411:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/map.rs:407:9: 407:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/map.rs:407:20: 407:32 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/map.rs:407:20: 407:32 (#0)" (> BinaryOpr (BinaryOpr ExtEq true (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
            (Typ TypParam "V")))
         ) (@@ "pervasive/map.rs:407:21: 407:23 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
         (@@ "pervasive/map.rs:407:29: 407:31 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/map.rs:407:38: 410:10 (#0)" (> Block () (@@ "pervasive/map.rs:408:17: 409:23 (#0)" (> Binary (BinaryOp And)
         (@@ "pervasive/map.rs:408:17: 408:19 (#0)" (> BinaryOpr (BinaryOpr ExtEq true (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
           (@@ "pervasive/map.rs:408:17: 408:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
              ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:408:17: 408:19 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
           ) (@@ "pervasive/map.rs:408:31: 408:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
              ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/map.rs:408:31: 408:33 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
          ) (Typ Bool)
         ) (@@ "pervasive/map.rs:409:17: 409:23 (#0)" (> Quant (Forall :boxed_params true) ((-> k~47 (Typ TypParam "K"))) (@@ "pervasive/map.rs:409:39: 409:41 (#0)"
            (> Unary (UnaryOp Trigger (TriggerAnnotation AutoTrigger)) (@@ "pervasive/map.rs:409:39: 409:41 (#0)" (> Binary (BinaryOp Implies)
               (@@ "pervasive/map.rs:409:39: 409:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                  ((Typ TypParam "K")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/map.rs:409:39: 409:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
                     ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/map.rs:409:39: 409:41 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
                  ) (@@ "pervasive/map.rs:409:57: 409:58 (#0)" (> Var "k~47") (Typ TypParam "K")))
                ) (Typ Bool)
               ) (@@ "pervasive/map.rs:409:64: 409:66 (#0)" (> BinaryOpr (BinaryOpr ExtEq true (Typ TypParam "V")) (@@ "pervasive/map.rs:409:64: 409:66 (#0)"
                  (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam
                      "V")
                    ) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/map.rs:409:64: 409:66 (#0)" (> Var "m1~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
                    (@@ "pervasive/map.rs:409:67: 409:68 (#0)" (> Var "k~47") (Typ TypParam "K")))
                  ) (Typ TypParam "V")
                 ) (@@ "pervasive/map.rs:409:75: 409:77 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.")
                    ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/map.rs:409:75: 409:77 (#0)" (> Var "m2~4") (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
                    (@@ "pervasive/map.rs:409:78: 409:79 (#0)" (> Var "k~47") (Typ TypParam "K")))
                  ) (Typ TypParam "V"))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/map.rs:441:1: 441:72 (#0)" (Function
  :name (Fun :path "vstd!map.check_argument_is_map.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!map." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/map.rs:441:46: 441:58 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/map.rs:441:63: 441:72 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "K")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/map.rs:441:73: 441:78 (#0)" (> Block () (@@ "pervasive/map.rs:441:75: 441:76 (#0)" (> Var "m~2") (Typ
      Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/option.rs:38:5: 38:60 (#0)" (Function
  :name (Fun :path "vstd!option.impl&%1.or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/option.rs:38:25: 38:29 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/option.rs:38:31: 38:46 (#0)" (Param :name "optb~4" :typ (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/option.rs:38:51: 38:60 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!option.Option." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/option.rs:38:61: 43:6 (#0)" (> Block () (@@ "pervasive/option.rs:39:9: 42:10 (#0)" (> Match (@@ "pervasive/option.rs:39:15: 39:19 (#0)"
       (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
      ) ((@ "pervasive/option.rs:40:13: 40:33 (#0)" (Arm :pattern (@@ "pervasive/option.rs:40:13: 40:25 (#0)" (Pattern Constructor "vstd!option.Option."
           "None" ()
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:39:9: 42:10 (#0)" (> Const (Constant Bool true)) (Typ Datatype "vstd!option.Option." ((Typ
             TypParam "A")))
         ) :body (@@ "pervasive/option.rs:40:29: 40:33 (#0)" (> Var "optb~4") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))))
       ) (@ "pervasive/option.rs:41:13: 41:36 (#0)" (Arm :pattern (@@ "pervasive/option.rs:41:13: 41:28 (#0)" (Pattern Constructor "vstd!option.Option."
           "Some" ((-> _0 (@@ "pervasive/option.rs:41:26: 41:27 (#0)" (Pattern Var :name "s~16" :mutable false) (Typ TypParam "A"))))
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:39:9: 42:10 (#0)" (> Const (Constant Bool true)) (Typ Datatype "vstd!option.Option." ((Typ
             TypParam "A")))
         ) :body (@@ "pervasive/option.rs:41:32: 41:36 (#0)" (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))))))
     ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/option.rs:46:5: 46:46 (#0)" (Function
  :name (Fun :path "vstd!option.impl&%1.is_some.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!option." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/option.rs:46:26: 46:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option."
       ((Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/option.rs:46:42: 46:46 (#0)" (Param :name "res~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/option.rs:47:17: 47:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/option.rs:47:17: 47:20 (#0)" (> Var "res~10")
      (Typ Bool)
     ) (@@ "pervasive/option.rs:47:26: 47:40 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "Some")
       (@@ "pervasive/option.rs:47:26: 47:30 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option."
          ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/option.rs:48:5: 53:6 (#0)" (> Block () (@@ "pervasive/option.rs:49:9: 52:10 (#0)" (> Match (@@ "pervasive/option.rs:49:15: 49:19 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
      ) ((@ "pervasive/option.rs:50:13: 50:36 (#0)" (Arm :pattern (@@ "pervasive/option.rs:50:13: 50:28 (#0)" (Pattern Constructor "vstd!option.Option."
           "Some" ((-> _0 (@@ "pervasive/option.rs:50:26: 50:27 (#0)" (Pattern Wildcard false) (Typ TypParam "A"))))
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:49:9: 52:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/option.rs:50:32: 50:36 (#0)"
          (> Const (Constant Bool true)) (Typ Bool)))
       ) (@ "pervasive/option.rs:51:13: 51:34 (#0)" (Arm :pattern (@@ "pervasive/option.rs:51:13: 51:25 (#0)" (Pattern Constructor "vstd!option.Option."
           "None" ()
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:49:9: 52:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/option.rs:51:29: 51:34 (#0)"
          (> Const (Constant Bool false)) (Typ Bool)))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/option.rs:56:5: 56:46 (#0)" (Function
  :name (Fun :path "vstd!option.impl&%1.is_none.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!option." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/option.rs:56:26: 56:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option."
       ((Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/option.rs:56:42: 56:46 (#0)" (Param :name "res~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/option.rs:57:17: 57:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/option.rs:57:17: 57:20 (#0)" (> Var "res~10")
      (Typ Bool)
     ) (@@ "pervasive/option.rs:57:26: 57:40 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "None")
       (@@ "pervasive/option.rs:57:26: 57:30 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option."
          ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/option.rs:58:5: 63:6 (#0)" (> Block () (@@ "pervasive/option.rs:59:9: 62:10 (#0)" (> Match (@@ "pervasive/option.rs:59:15: 59:19 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
      ) ((@ "pervasive/option.rs:60:13: 60:37 (#0)" (Arm :pattern (@@ "pervasive/option.rs:60:13: 60:28 (#0)" (Pattern Constructor "vstd!option.Option."
           "Some" ((-> _0 (@@ "pervasive/option.rs:60:26: 60:27 (#0)" (Pattern Wildcard false) (Typ TypParam "A"))))
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:59:9: 62:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/option.rs:60:32: 60:37 (#0)"
          (> Const (Constant Bool false)) (Typ Bool)))
       ) (@ "pervasive/option.rs:61:13: 61:33 (#0)" (Arm :pattern (@@ "pervasive/option.rs:61:13: 61:25 (#0)" (Pattern Constructor "vstd!option.Option."
           "None" ()
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:59:9: 62:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/option.rs:61:29: 61:33 (#0)"
          (> Const (Constant Bool true)) (Typ Bool)))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/option.rs:65:5: 65:43 (#0)" (Function
  :name (Fun :path "vstd!option.impl&%1.as_ref.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!option." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/option.rs:65:19: 65:24 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option."
       ((Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/option.rs:65:33: 65:43 (#0)" (Param :name "a~10" :typ (Typ Datatype "vstd!option.Option." ((Typ Decorate
       (TypDecoration Ref) (Typ TypParam "A")))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/option.rs:67:11: 67:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/option.rs:67:11: 67:22 (#0)" (> UnaryOpr
       (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "Some") (@@ "pervasive/option.rs:67:11: 67:12 (#0)" (> Var "a~10")
        (Typ Datatype "vstd!option.Option." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "A")))))
      ) (Typ Bool)
     ) (@@ "pervasive/option.rs:67:28: 67:42 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "Some")
       (@@ "pervasive/option.rs:67:28: 67:32 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option."
          ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/option.rs:68:11: 68:12 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/option.rs:68:11: 68:22 (#0)" (> UnaryOpr
       (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "Some") (@@ "pervasive/option.rs:68:11: 68:12 (#0)" (> Var "a~10")
        (Typ Datatype "vstd!option.Option." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "A")))))
      ) (Typ Bool)
     ) (@@ "pervasive/option.rs:68:27: 68:31 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/option.rs:68:27: 68:44 (#0)" (> UnaryOpr
         (UnaryOpr Field (FieldOpr :datatype "vstd!option.Option." :variant "Some" :field "_0" :get_variant true)) (@@ "pervasive/option.rs:68:27: 68:31 (#0)"
          (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))))
        ) (Typ TypParam "A")
       ) (@@ "pervasive/option.rs:68:48: 68:62 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!option.Option." :variant
           "Some" :field "_0" :get_variant true)
         ) (@@ "pervasive/option.rs:68:48: 68:49 (#0)" (> Var "a~10") (Typ Datatype "vstd!option.Option." ((Typ Decorate (TypDecoration
              Ref
             ) (Typ TypParam "A")))))
        ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/option.rs:69:5: 74:6 (#0)" (> Block () (@@ "pervasive/option.rs:70:9: 73:10 (#0)" (> Match (@@ "pervasive/option.rs:70:15: 70:19 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
      ) ((@ "pervasive/option.rs:71:13: 71:47 (#0)" (Arm :pattern (@@ "pervasive/option.rs:71:13: 71:28 (#0)" (Pattern Constructor "vstd!option.Option."
           "Some" ((-> _0 (@@ "pervasive/option.rs:71:26: 71:27 (#0)" (Pattern Var :name "x~60" :mutable false) (Typ Decorate (TypDecoration
                Ref
               ) (Typ TypParam "A")))))
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:70:9: 73:10 (#0)" (> Const (Constant Bool true)) (Typ Datatype "vstd!option.Option." ((Typ
             Decorate (TypDecoration Ref) (Typ TypParam "A"))))
         ) :body (@@ "pervasive/option.rs:71:32: 71:47 (#0)" (> Ctor "vstd!option.Option." "Some" ((-> _0 (@@ "pervasive/option.rs:71:45: 71:46 (#0)"
              (> Var "x~60") (Typ Decorate (TypDecoration Ref) (Typ TypParam "A"))))
           ) None
          ) (Typ Datatype "vstd!option.Option." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "A"))))))
       ) (@ "pervasive/option.rs:72:13: 72:41 (#0)" (Arm :pattern (@@ "pervasive/option.rs:72:13: 72:25 (#0)" (Pattern Constructor "vstd!option.Option."
           "None" ()
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:70:9: 73:10 (#0)" (> Const (Constant Bool true)) (Typ Datatype "vstd!option.Option." ((Typ
             Decorate (TypDecoration Ref) (Typ TypParam "A"))))
         ) :body (@@ "pervasive/option.rs:72:29: 72:41 (#0)" (> Ctor "vstd!option.Option." "None" () None) (Typ Datatype "vstd!option.Option."
           ((Typ Decorate (TypDecoration Ref) (Typ TypParam "A"))))))))
     ) (Typ Datatype "vstd!option.Option." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "A")))))
   ) (Typ Datatype "vstd!option.Option." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "A"))))
  ) :extra_dependencies ()))

(@ "pervasive/option.rs:78:5: 78:44 (#0)" (Function
  :name (Fun :path "vstd!option.impl&%1.spec_unwrap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!option." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/option.rs:78:34: 78:38 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/option.rs:78:43: 78:44 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/option.rs:79:16: 79:30 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "Some")
     (@@ "pervasive/option.rs:79:16: 79:20 (#0)" (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/option.rs:80:5: 82:6 (#0)" (> Block () (@@ "pervasive/option.rs:81:9: 81:26 (#0)" (> UnaryOpr (UnaryOpr
       Field (FieldOpr :datatype "vstd!option.Option." :variant "Some" :field "_0" :get_variant true)
      ) (@@ "pervasive/option.rs:81:9: 81:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
     ) (Typ TypParam "A"))
   ) (Typ TypParam "A")
  ) :extra_dependencies ()))

(@ "pervasive/option.rs:85:5: 85:33 (#0)" (Function
  :name (Fun :path "vstd!option.impl&%1.unwrap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!option." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/option.rs:85:19: 85:23 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
     :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/option.rs:85:32: 85:33 (#0)" (Param :name "a~21" :typ (Typ TypParam "A") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/option.rs:87:13: 87:27 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "Some")
     (@@ "pervasive/option.rs:87:13: 87:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/option.rs:89:13: 89:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/option.rs:89:13: 89:14 (#0)" (> Var "a~21")
      (Typ TypParam "A")
     ) (@@ "pervasive/option.rs:89:18: 89:35 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!option.Option." :variant
         "Some" :field "_0" :get_variant true)
       ) (@@ "pervasive/option.rs:89:18: 89:22 (#0)" (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!option.impl&%1.spec_unwrap.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/option.rs:90:5: 95:6 (#0)" (> Block () (@@ "pervasive/option.rs:91:9: 94:10 (#0)" (> Match (@@ "pervasive/option.rs:91:15: 91:19 (#0)"
       (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
      ) ((@ "pervasive/option.rs:92:13: 92:33 (#0)" (Arm :pattern (@@ "pervasive/option.rs:92:13: 92:28 (#0)" (Pattern Constructor "vstd!option.Option."
           "Some" ((-> _0 (@@ "pervasive/option.rs:92:26: 92:27 (#0)" (Pattern Var :name "a~42" :mutable false) (Typ TypParam "A"))))
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:91:9: 94:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "A")) :body (@@ "pervasive/option.rs:92:32: 92:33 (#0)"
          (> Var "a~42") (Typ TypParam "A")))
       ) (@ "pervasive/option.rs:93:13: 93:40 (#0)" (Arm :pattern (@@ "pervasive/option.rs:93:13: 93:25 (#0)" (Pattern Constructor "vstd!option.Option."
           "None" ()
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:91:9: 94:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "A")) :body (@@ "pervasive/option.rs:93:29: 93:40 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!pervasive.unreached.") ((Typ TypParam "A")) () (AutospecUsage
             Final)
           ) ()
          ) (Typ TypParam "A")))))
     ) (Typ TypParam "A"))
   ) (Typ TypParam "A")
  ) :extra_dependencies ()))

(@ "pervasive/option.rs:97:5: 97:63 (#0)" (Function
  :name (Fun :path "vstd!option.impl&%1.tracked_unwrap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!option." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/option.rs:97:41: 97:45 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
     :mode Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/option.rs:97:62: 97:63 (#0)" (Param :name "a~21" :typ (Typ TypParam "A") :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/option.rs:99:13: 99:27 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!option.Option." :variant "Some")
     (@@ "pervasive/option.rs:99:13: 99:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/option.rs:101:13: 101:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/option.rs:101:13: 101:14 (#0)" (> Var
       "a~21"
      ) (Typ TypParam "A")
     ) (@@ "pervasive/option.rs:101:18: 101:35 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!option.Option." :variant
         "Some" :field "_0" :get_variant true)
       ) (@@ "pervasive/option.rs:101:18: 101:22 (#0)" (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A"))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/option.rs:102:5: 107:6 (#0)" (> Block () (@@ "pervasive/option.rs:103:9: 106:10 (#0)" (> Match (@@ "pervasive/option.rs:103:15: 103:19 (#0)"
       (> Var "self~2") (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
      ) ((@ "pervasive/option.rs:104:13: 104:33 (#0)" (Arm :pattern (@@ "pervasive/option.rs:104:13: 104:28 (#0)" (Pattern Constructor
           "vstd!option.Option." "Some" ((-> _0 (@@ "pervasive/option.rs:104:26: 104:27 (#0)" (Pattern Var :name "a~42" :mutable false)
              (Typ TypParam "A"))))
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:103:9: 106:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "A")) :body (@@ "pervasive/option.rs:104:32: 104:33 (#0)"
          (> Var "a~42") (Typ TypParam "A")))
       ) (@ "pervasive/option.rs:105:13: 105:47 (#0)" (Arm :pattern (@@ "pervasive/option.rs:105:13: 105:25 (#0)" (Pattern Constructor
           "vstd!option.Option." "None" ()
          ) (Typ Datatype "vstd!option.Option." ((Typ TypParam "A")))
         ) :guard (@@ "pervasive/option.rs:103:9: 106:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "A")) :body (@@ "pervasive/option.rs:105:29: 105:47 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!pervasive.proof_from_false.") ((Typ TypParam "A")) () (AutospecUsage
             IfMarked)
           ) ()
          ) (Typ TypParam "A")))))
     ) (Typ TypParam "A"))
   ) (Typ TypParam "A")
  ) :extra_dependencies ()))

(@ "pervasive/result.rs:22:5: 22:44 (#0)" (Function
  :name (Fun :path "vstd!result.impl&%0.is_ok.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!result." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/result.rs:22:24: 22:29 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result."
       ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/result.rs:22:40: 22:44 (#0)" (Param :name "res~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/result.rs:23:17: 23:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:23:17: 23:20 (#0)" (> Var "res~10")
      (Typ Bool)
     ) (@@ "pervasive/result.rs:23:26: 23:38 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Ok")
       (@@ "pervasive/result.rs:23:26: 23:30 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result."
          ((Typ TypParam "T") (Typ TypParam "E")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/result.rs:24:5: 29:6 (#0)" (> Block () (@@ "pervasive/result.rs:25:9: 28:10 (#0)" (> Match (@@ "pervasive/result.rs:25:15: 25:19 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E"))))
      ) ((@ "pervasive/result.rs:26:13: 26:34 (#0)" (Arm :pattern (@@ "pervasive/result.rs:26:13: 26:26 (#0)" (Pattern Constructor "vstd!result.Result."
           "Ok" ((-> _0 (@@ "pervasive/result.rs:26:24: 26:25 (#0)" (Pattern Wildcard false) (Typ TypParam "T"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:25:9: 28:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/result.rs:26:30: 26:34 (#0)"
          (> Const (Constant Bool true)) (Typ Bool)))
       ) (@ "pervasive/result.rs:27:13: 27:36 (#0)" (Arm :pattern (@@ "pervasive/result.rs:27:13: 27:27 (#0)" (Pattern Constructor "vstd!result.Result."
           "Err" ((-> _0 (@@ "pervasive/result.rs:27:25: 27:26 (#0)" (Pattern Wildcard false) (Typ TypParam "E"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:25:9: 28:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/result.rs:27:31: 27:36 (#0)"
          (> Const (Constant Bool false)) (Typ Bool)))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/result.rs:32:5: 32:45 (#0)" (Function
  :name (Fun :path "vstd!result.impl&%0.is_err.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!result." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/result.rs:32:25: 32:30 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result."
       ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/result.rs:32:41: 32:45 (#0)" (Param :name "res~10" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/result.rs:33:17: 33:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:33:17: 33:20 (#0)" (> Var "res~10")
      (Typ Bool)
     ) (@@ "pervasive/result.rs:33:26: 33:39 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Err")
       (@@ "pervasive/result.rs:33:26: 33:30 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result."
          ((Typ TypParam "T") (Typ TypParam "E")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/result.rs:34:5: 39:6 (#0)" (> Block () (@@ "pervasive/result.rs:35:9: 38:10 (#0)" (> Match (@@ "pervasive/result.rs:35:15: 35:19 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E"))))
      ) ((@ "pervasive/result.rs:36:13: 36:35 (#0)" (Arm :pattern (@@ "pervasive/result.rs:36:13: 36:26 (#0)" (Pattern Constructor "vstd!result.Result."
           "Ok" ((-> _0 (@@ "pervasive/result.rs:36:24: 36:25 (#0)" (Pattern Wildcard false) (Typ TypParam "T"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:35:9: 38:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/result.rs:36:30: 36:35 (#0)"
          (> Const (Constant Bool false)) (Typ Bool)))
       ) (@ "pervasive/result.rs:37:13: 37:35 (#0)" (Arm :pattern (@@ "pervasive/result.rs:37:13: 37:27 (#0)" (Pattern Constructor "vstd!result.Result."
           "Err" ((-> _0 (@@ "pervasive/result.rs:37:25: 37:26 (#0)" (Pattern Wildcard false) (Typ TypParam "E"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:35:9: 38:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/result.rs:37:31: 37:35 (#0)"
          (> Const (Constant Bool true)) (Typ Bool)))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/result.rs:41:5: 41:47 (#0)" (Function
  :name (Fun :path "vstd!result.impl&%0.as_ref.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!result." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/result.rs:41:19: 41:24 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result."
       ((Typ TypParam "T") (Typ TypParam "E")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/result.rs:41:33: 41:47 (#0)" (Param :name "r~10" :typ (Typ Datatype "vstd!result.Result." ((Typ Decorate
       (TypDecoration Ref) (Typ TypParam "T")
      ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/result.rs:43:11: 43:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:43:11: 43:20 (#0)" (> UnaryOpr
       (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Ok") (@@ "pervasive/result.rs:43:11: 43:12 (#0)" (> Var "r~10")
        (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
           (Typ TypParam "E")))))
      ) (Typ Bool)
     ) (@@ "pervasive/result.rs:43:26: 43:38 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Ok")
       (@@ "pervasive/result.rs:43:26: 43:30 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result."
          ((Typ TypParam "T") (Typ TypParam "E")))))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/result.rs:44:11: 44:12 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/result.rs:44:11: 44:20 (#0)" (> UnaryOpr
       (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Ok") (@@ "pervasive/result.rs:44:11: 44:12 (#0)" (> Var "r~10")
        (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
           (Typ TypParam "E")))))
      ) (Typ Bool)
     ) (@@ "pervasive/result.rs:44:25: 44:29 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:44:25: 44:40 (#0)" (> UnaryOpr
         (UnaryOpr Field (FieldOpr :datatype "vstd!result.Result." :variant "Ok" :field "_0" :get_variant true)) (@@ "pervasive/result.rs:44:25: 44:29 (#0)"
          (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
        ) (Typ TypParam "T")
       ) (@@ "pervasive/result.rs:44:44: 44:56 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!result.Result." :variant
           "Ok" :field "_0" :get_variant true)
         ) (@@ "pervasive/result.rs:44:44: 44:45 (#0)" (> Var "r~10") (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration
              Ref
             ) (Typ TypParam "T")
            ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))))
        ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/result.rs:45:11: 45:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:45:11: 45:21 (#0)" (> UnaryOpr
       (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Err") (@@ "pervasive/result.rs:45:11: 45:12 (#0)" (> Var "r~10")
        (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
           (Typ TypParam "E")))))
      ) (Typ Bool)
     ) (@@ "pervasive/result.rs:45:27: 45:40 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Err")
       (@@ "pervasive/result.rs:45:27: 45:31 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result."
          ((Typ TypParam "T") (Typ TypParam "E")))))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/result.rs:46:11: 46:12 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/result.rs:46:11: 46:21 (#0)" (> UnaryOpr
       (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Err") (@@ "pervasive/result.rs:46:11: 46:12 (#0)" (> Var "r~10")
        (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
           (Typ TypParam "E")))))
      ) (Typ Bool)
     ) (@@ "pervasive/result.rs:46:26: 46:30 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:46:26: 46:42 (#0)" (> UnaryOpr
         (UnaryOpr Field (FieldOpr :datatype "vstd!result.Result." :variant "Err" :field "_0" :get_variant true)) (@@ "pervasive/result.rs:46:26: 46:30 (#0)"
          (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))))
        ) (Typ TypParam "E")
       ) (@@ "pervasive/result.rs:46:46: 46:59 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!result.Result." :variant
           "Err" :field "_0" :get_variant true)
         ) (@@ "pervasive/result.rs:46:46: 46:47 (#0)" (> Var "r~10") (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration
              Ref
             ) (Typ TypParam "T")
            ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))))
        ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/result.rs:47:5: 52:6 (#0)" (> Block () (@@ "pervasive/result.rs:48:9: 51:10 (#0)" (> Match (@@ "pervasive/result.rs:48:15: 48:19 (#0)"
       (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E"))))
      ) ((@ "pervasive/result.rs:49:13: 49:43 (#0)" (Arm :pattern (@@ "pervasive/result.rs:49:13: 49:26 (#0)" (Pattern Constructor "vstd!result.Result."
           "Ok" ((-> _0 (@@ "pervasive/result.rs:49:24: 49:25 (#0)" (Pattern Var :name "t~100" :mutable false) (Typ Decorate (TypDecoration
                Ref
               ) (Typ TypParam "T")))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:48:9: 51:10 (#0)" (> Const (Constant Bool true)) (Typ Datatype "vstd!result.Result." ((Typ
             Decorate (TypDecoration Ref) (Typ TypParam "T")
            ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))
         ) :body (@@ "pervasive/result.rs:49:30: 49:43 (#0)" (> Ctor "vstd!result.Result." "Ok" ((-> _0 (@@ "pervasive/result.rs:49:41: 49:42 (#0)"
              (> Var "t~100") (Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))))
           ) None
          ) (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
             (Typ TypParam "E"))))))
       ) (@ "pervasive/result.rs:50:13: 50:45 (#0)" (Arm :pattern (@@ "pervasive/result.rs:50:13: 50:27 (#0)" (Pattern Constructor "vstd!result.Result."
           "Err" ((-> _0 (@@ "pervasive/result.rs:50:25: 50:26 (#0)" (Pattern Var :name "e~111" :mutable false) (Typ Decorate (TypDecoration
                Ref
               ) (Typ TypParam "E")))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:48:9: 51:10 (#0)" (> Const (Constant Bool true)) (Typ Datatype "vstd!result.Result." ((Typ
             Decorate (TypDecoration Ref) (Typ TypParam "T")
            ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))
         ) :body (@@ "pervasive/result.rs:50:31: 50:45 (#0)" (> Ctor "vstd!result.Result." "Err" ((-> _0 (@@ "pervasive/result.rs:50:43: 50:44 (#0)"
              (> Var "e~111") (Typ Decorate (TypDecoration Ref) (Typ TypParam "E"))))
           ) None
          ) (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
             (Typ TypParam "E"))))))))
     ) (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
        (Typ TypParam "E")))))
   ) (Typ Datatype "vstd!result.Result." ((Typ Decorate (TypDecoration Ref) (Typ TypParam "T")) (Typ Decorate (TypDecoration Ref)
      (Typ TypParam "E"))))
  ) :extra_dependencies ()))

(@ "pervasive/result.rs:56:5: 56:44 (#0)" (Function
  :name (Fun :path "vstd!result.impl&%0.spec_unwrap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/result.rs:56:34: 56:38 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!result.Result." ((Typ TypParam "T")
       (Typ TypParam "E"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/result.rs:56:43: 56:44 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/result.rs:57:16: 57:28 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Ok")
     (@@ "pervasive/result.rs:57:16: 57:20 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
         "E"))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/result.rs:58:5: 60:6 (#0)" (> Block () (@@ "pervasive/result.rs:59:9: 59:24 (#0)" (> UnaryOpr (UnaryOpr
       Field (FieldOpr :datatype "vstd!result.Result." :variant "Ok" :field "_0" :get_variant true)
      ) (@@ "pervasive/result.rs:59:9: 59:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
          "E"))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/result.rs:63:5: 63:33 (#0)" (Function
  :name (Fun :path "vstd!result.impl&%0.unwrap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!result." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/result.rs:63:19: 63:23 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!result.Result." ((Typ TypParam "T")
       (Typ TypParam "E"))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/result.rs:63:32: 63:33 (#0)" (Param :name "t~21" :typ (Typ TypParam "T") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/result.rs:65:13: 65:25 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Ok")
     (@@ "pervasive/result.rs:65:13: 65:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
         "E"))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/result.rs:67:13: 67:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:67:13: 67:14 (#0)" (> Var "t~21")
      (Typ TypParam "T")
     ) (@@ "pervasive/result.rs:67:18: 67:33 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!result.Result." :variant
         "Ok" :field "_0" :get_variant true)
       ) (@@ "pervasive/result.rs:67:18: 67:22 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
           "E"))))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!result.impl&%0.spec_unwrap.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/result.rs:68:5: 73:6 (#0)" (> Block () (@@ "pervasive/result.rs:69:9: 72:10 (#0)" (> Match (@@ "pervasive/result.rs:69:15: 69:19 (#0)"
       (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
      ) ((@ "pervasive/result.rs:70:13: 70:31 (#0)" (Arm :pattern (@@ "pervasive/result.rs:70:13: 70:26 (#0)" (Pattern Constructor "vstd!result.Result."
           "Ok" ((-> _0 (@@ "pervasive/result.rs:70:24: 70:25 (#0)" (Pattern Var :name "t~42" :mutable false) (Typ TypParam "T"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:69:9: 72:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "T")) :body (@@ "pervasive/result.rs:70:30: 70:31 (#0)"
          (> Var "t~42") (Typ TypParam "T")))
       ) (@ "pervasive/result.rs:71:13: 71:42 (#0)" (Arm :pattern (@@ "pervasive/result.rs:71:13: 71:27 (#0)" (Pattern Constructor "vstd!result.Result."
           "Err" ((-> _0 (@@ "pervasive/result.rs:71:25: 71:26 (#0)" (Pattern Wildcard false) (Typ TypParam "E"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:69:9: 72:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "T")) :body (@@ "pervasive/result.rs:71:31: 71:42 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!pervasive.unreached.") ((Typ TypParam "T")) () (AutospecUsage
             Final)
           ) ()
          ) (Typ TypParam "T")))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/result.rs:77:5: 77:48 (#0)" (Function
  :name (Fun :path "vstd!result.impl&%0.spec_unwrap_err.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!result." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/result.rs:77:38: 77:42 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!result.Result." ((Typ TypParam "T")
       (Typ TypParam "E"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/result.rs:77:47: 77:48 (#0)" (Param :name "%return" :typ (Typ TypParam "E") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/result.rs:78:16: 78:29 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Err")
     (@@ "pervasive/result.rs:78:16: 78:20 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
         "E"))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/result.rs:79:5: 81:6 (#0)" (> Block () (@@ "pervasive/result.rs:80:9: 80:25 (#0)" (> UnaryOpr (UnaryOpr
       Field (FieldOpr :datatype "vstd!result.Result." :variant "Err" :field "_0" :get_variant true)
      ) (@@ "pervasive/result.rs:80:9: 80:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
          "E"))))
     ) (Typ TypParam "E"))
   ) (Typ TypParam "E")
  ) :extra_dependencies ()))

(@ "pervasive/result.rs:84:5: 84:37 (#0)" (Function
  :name (Fun :path "vstd!result.impl&%0.unwrap_err.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!result." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/result.rs:84:23: 84:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!result.Result." ((Typ TypParam "T")
       (Typ TypParam "E"))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/result.rs:84:36: 84:37 (#0)" (Param :name "e~21" :typ (Typ TypParam "E") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/result.rs:86:13: 86:26 (#0)" (> UnaryOpr (UnaryOpr IsVariant :datatype "vstd!result.Result." :variant "Err")
     (@@ "pervasive/result.rs:86:13: 86:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
         "E"))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/result.rs:88:13: 88:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/result.rs:88:13: 88:14 (#0)" (> Var "e~21")
      (Typ TypParam "E")
     ) (@@ "pervasive/result.rs:88:18: 88:34 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!result.Result." :variant
         "Err" :field "_0" :get_variant true)
       ) (@@ "pervasive/result.rs:88:18: 88:22 (#0)" (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam
           "E"))))
      ) (Typ TypParam "E"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!result.impl&%0.spec_unwrap_err.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/result.rs:89:5: 94:6 (#0)" (> Block () (@@ "pervasive/result.rs:90:9: 93:10 (#0)" (> Match (@@ "pervasive/result.rs:90:15: 90:19 (#0)"
       (> Var "self~2") (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
      ) ((@ "pervasive/result.rs:91:13: 91:41 (#0)" (Arm :pattern (@@ "pervasive/result.rs:91:13: 91:26 (#0)" (Pattern Constructor "vstd!result.Result."
           "Ok" ((-> _0 (@@ "pervasive/result.rs:91:24: 91:25 (#0)" (Pattern Wildcard false) (Typ TypParam "T"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:90:9: 93:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "E")) :body (@@ "pervasive/result.rs:91:30: 91:41 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!pervasive.unreached.") ((Typ TypParam "E")) () (AutospecUsage
             Final)
           ) ()
          ) (Typ TypParam "E")))
       ) (@ "pervasive/result.rs:92:13: 92:32 (#0)" (Arm :pattern (@@ "pervasive/result.rs:92:13: 92:27 (#0)" (Pattern Constructor "vstd!result.Result."
           "Err" ((-> _0 (@@ "pervasive/result.rs:92:25: 92:26 (#0)" (Pattern Var :name "e~50" :mutable false) (Typ TypParam "E"))))
          ) (Typ Datatype "vstd!result.Result." ((Typ TypParam "T") (Typ TypParam "E")))
         ) :guard (@@ "pervasive/result.rs:90:9: 93:10 (#0)" (> Const (Constant Bool true)) (Typ TypParam "E")) :body (@@ "pervasive/result.rs:92:31: 92:32 (#0)"
          (> Var "e~50") (Typ TypParam "E")))))
     ) (Typ TypParam "E"))
   ) (Typ TypParam "E")
  ) :extra_dependencies ()))

(@ "pervasive/seq.rs:42:5: 42:34 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/seq.rs:42:28: 42:34 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:47:5: 47:62 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "impl%1" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:47:21: 47:29 (#0)" (Param :name "len~2" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:47:31: 47:51 (#0)" (Param :name "f~4" :typ (Typ TypParam "impl%1") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:47:56: 47:62 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:52:5: 52:33 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:52:21: 52:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:52:30: 52:33 (#0)" (Param :name "%return" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:60:5: 60:41 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:60:23: 60:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:60:29: 60:35 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:60:40: 60:41 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:61:20: 61:21 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:61:20: 61:21 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:61:25: 61:26 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:61:29: 61:39 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:61:29: 61:33 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:66:5: 66:51 (#0)" (Function
  :name (Fun :path "vstd!seq.impl&%0.spec_index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:66:33: 66:37 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:66:39: 66:45 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:66:50: 66:51 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:67:20: 67:21 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:67:20: 67:21 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:67:25: 67:26 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:67:29: 67:39 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:67:29: 67:33 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq.rs:68:5: 70:6 (#0)" (> Block () (@@ "pervasive/seq.rs:69:9: 69:22 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq.rs:69:9: 69:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:69:20: 69:21 (#0)"
        (> Var "i~4") (Typ Int (IntRange Int))))
     ) (Typ TypParam "A"))
   ) (Typ TypParam "A")
  ) :extra_dependencies ()))

(@ "pervasive/seq.rs:87:5: 87:43 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.push.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:87:22: 87:26 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:87:28: 87:32 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:87:37: 87:43 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:103:5: 103:53 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.update.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:103:24: 103:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:103:30: 103:36 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:103:38: 103:42 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:103:47: 103:53 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/seq.rs:104:20: 104:21 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:104:20: 104:21 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:104:25: 104:26 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:104:29: 104:39 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:104:29: 104:33 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:119:5: 119:57 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:119:32: 119:36 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:119:38: 119:48 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:119:53: 119:57 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq.rs:119:58: 121:6 (#0)" (> Block () (@@ "pervasive/seq.rs:120:9: 120:13 (#0)" (> BinaryOpr (BinaryOpr
       ExtEq false (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
      ) (@@ "pervasive/seq.rs:120:9: 120:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:120:18: 120:20 (#0)"
       (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/seq.rs:138:5: 138:83 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.subrange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:138:26: 138:30 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:138:32: 138:52 (#0)" (Param :name "start_inclusive~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/seq.rs:138:54: 138:72 (#0)" (Param :name "end_exclusive~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:138:77: 138:83 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/seq.rs:139:20: 139:21 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Le) (InequalityOp Le)))
     ((@@ "pervasive/seq.rs:139:20: 139:21 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq.rs:139:25: 139:40 (#0)"
       (> Var "start_inclusive~4") (Typ Int (IntRange Int))
      ) (@@ "pervasive/seq.rs:139:44: 139:57 (#0)" (> Var "end_exclusive~6") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:139:61: 139:71 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:139:61: 139:65 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:155:5: 155:49 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:155:21: 155:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:155:27: 155:38 (#0)" (Param :name "rhs~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:155:43: 155:49 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:160:5: 160:59 (#0)" (Function
  :name (Fun :path "vstd!seq.impl&%0.spec_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:160:31: 160:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:160:37: 160:48 (#0)" (Param :name "rhs~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:160:53: 160:59 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq.rs:160:60: 162:6 (#0)" (> Block () (@@ "pervasive/seq.rs:161:9: 161:22 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!seq.Seq.add.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq.rs:161:9: 161:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:161:18: 161:21 (#0)"
        (> Var "rhs~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/seq.rs:167:5: 167:37 (#0)" (Function
  :name (Fun :path "vstd!seq.Seq.last.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!seq." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:167:27: 167:31 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:167:36: 167:37 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:168:20: 168:21 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq.rs:168:20: 168:21 (#0)"
      (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:168:24: 168:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:168:24: 168:28 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq.rs:169:5: 171:6 (#0)" (> Block () (@@ "pervasive/seq.rs:170:9: 170:13 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq.rs:170:9: 170:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:170:14: 170:18 (#0)"
        (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq.rs:170:14: 170:24 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/seq.rs:170:14: 170:18 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/seq.rs:170:34: 170:35 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Int))))
     ) (Typ TypParam "A"))
   ) (Typ TypParam "A")
  ) :extra_dependencies ()))

(@ "pervasive/seq.rs:178:1: 178:61 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_index_decreases.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:178:43: 178:52 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:178:54: 178:60 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:183:1: 183:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:180:9: 180:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:180:9: 180:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:180:14: 180:15 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:180:18: 180:25 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:180:18: 180:19 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "/Users/byc/Desktop/REUSE2023/verus/source/builtin/src/lib.rs:1118:9: 1118:68 (#114)" (> Unary (UnaryOp Trigger (TriggerAnnotation
       Trigger None)
     ) (@@ "/Users/byc/Desktop/REUSE2023/verus/source/builtin/src/lib.rs:1118:9: 1118:68 (#114)" (> Binary (BinaryOp HeightCompare
        :strictly_lt true :recursive_function_field false
       ) (@@ "pervasive/seq.rs:182:39: 182:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:182:39: 182:40 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:182:41: 182:42 (#0)"
           (> Var "i~4") (Typ Int (IntRange Int))))
        ) (Typ TypParam "A")
       ) (@@ "pervasive/seq.rs:182:34: 182:35 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:188:1: 188:34 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/seq.rs:191:1: 191:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/seq.rs:190:9: 190:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:190:20: 190:43 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:190:20: 190:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:190:20: 190:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ()
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:190:47: 190:48 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:196:1: 196:65 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_new_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:196:35: 196:43 (#0)" (Param :name "len~2" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:196:45: 196:54 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "A"))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:199:1: 199:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq.rs:198:9: 198:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:198:20: 198:42 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:198:20: 198:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:198:20: 198:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.new.")
             ((Typ TypParam "A") (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "A"))) ((tuple "impl%1" "builtin!impl&%49.")) (AutospecUsage
              IfMarked)
            ) ((@@ "pervasive/seq.rs:198:29: 198:32 (#0)" (> Var "len~2") (Typ Int (IntRange Nat))) (@@ "pervasive/seq.rs:198:34: 198:35 (#0)"
              (> Var "f~4") (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "A"))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:198:46: 198:49 (#0)" (> Var "len~2") (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:204:1: 204:75 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_new_index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:204:37: 204:45 (#0)" (Param :name "len~2" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:204:47: 204:56 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "A"))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:204:68: 204:74 (#0)" (Param :name "i~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:209:1: 209:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:206:9: 206:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:206:9: 206:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:206:14: 206:15 (#0)" (> Var "i~6") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:206:18: 206:21 (#0)"
       (> Var "len~2") (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:208:9: 208:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:208:9: 208:17 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:208:9: 208:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.new.")
           ((Typ TypParam "A") (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "A"))) ((tuple "impl%1" "builtin!impl&%49.")) (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/seq.rs:208:18: 208:21 (#0)" (> Var "len~2") (Typ Int (IntRange Nat))) (@@ "pervasive/seq.rs:208:23: 208:24 (#0)"
            (> Var "f~4") (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "A"))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq.rs:208:26: 208:27 (#0)" (> Var "i~6") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:208:32: 208:36 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq.rs:208:32: 208:33 (#0)" (> Var "f~4")
         (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "A")))
       ) ((@@ "pervasive/seq.rs:208:34: 208:35 (#0)" (> Var "i~6") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:214:1: 214:52 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_push_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:214:36: 214:45 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:214:47: 214:51 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:217:1: 217:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq.rs:216:9: 216:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:216:20: 216:35 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:216:20: 216:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:216:20: 216:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:216:20: 216:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:216:27: 216:28 (#0)"
              (> Var "a~4") (Typ TypParam "A")))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:216:39: 216:40 (#0)" (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate true) (@@ "pervasive/seq.rs:216:39: 216:40 (#0)"
        (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/seq.rs:216:39: 216:46 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/seq.rs:216:39: 216:40 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/seq.rs:216:49: 216:50 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:222:1: 222:67 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_push_index_same.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:222:43: 222:52 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:222:54: 222:58 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:222:60: 222:66 (#0)" (Param :name "i~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:227:1: 227:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:224:9: 224:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:224:9: 224:10 (#0)" (> Var "i~6")
      (Typ Int (IntRange Int))
     ) (@@ "pervasive/seq.rs:224:14: 224:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:224:14: 224:15 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:226:9: 226:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:226:9: 226:21 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:226:9: 226:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:226:20: 226:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:226:20: 226:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:226:27: 226:28 (#0)"
              (> Var "a~4") (Typ TypParam "A")))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
          ) (@@ "pervasive/seq.rs:226:30: 226:31 (#0)" (> Var "i~6") (Typ Int (IntRange Int))))
        ) (Typ TypParam "A"))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:226:36: 226:37 (#0)" (> Var "a~4") (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:232:1: 232:72 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_push_index_different.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:232:48: 232:57 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:232:59: 232:63 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:232:65: 232:71 (#0)" (Param :name "i~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:237:1: 237:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:234:9: 234:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:234:9: 234:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:234:14: 234:15 (#0)" (> Var "i~6") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:234:18: 234:25 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:234:18: 234:19 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:236:9: 236:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:236:9: 236:10 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:236:9: 236:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq.rs:236:9: 236:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:236:16: 236:17 (#0)"
            (> Var "a~4") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq.rs:236:19: 236:20 (#0)" (> Var "i~6") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:236:25: 236:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:236:25: 236:26 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:236:27: 236:28 (#0)"
         (> Var "i~6") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:242:1: 242:62 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_update_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:242:38: 242:47 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:242:49: 242:55 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:242:57: 242:61 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:247:1: 247:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:244:9: 244:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:244:9: 244:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:244:14: 244:15 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:244:18: 244:25 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:244:18: 244:19 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:246:9: 246:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:246:20: 246:40 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:246:20: 246:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:246:20: 246:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:246:20: 246:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:246:29: 246:30 (#0)"
              (> Var "i~4") (Typ Int (IntRange Int))
             ) (@@ "pervasive/seq.rs:246:32: 246:33 (#0)" (> Var "a~6") (Typ TypParam "A")))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:246:44: 246:51 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:246:44: 246:45 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:252:1: 252:63 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_update_same.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:252:39: 252:48 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:252:50: 252:56 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:252:58: 252:62 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:257:1: 257:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:254:9: 254:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:254:9: 254:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:254:14: 254:15 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:254:18: 254:25 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:254:18: 254:19 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:256:9: 256:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:256:9: 256:21 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:256:9: 256:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:256:20: 256:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:256:20: 256:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:256:29: 256:30 (#0)"
              (> Var "i~4") (Typ Int (IntRange Int))
             ) (@@ "pervasive/seq.rs:256:32: 256:33 (#0)" (> Var "a~6") (Typ TypParam "A")))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
          ) (@@ "pervasive/seq.rs:256:35: 256:36 (#0)" (> Var "i~4") (Typ Int (IntRange Int))))
        ) (Typ TypParam "A"))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:256:41: 256:42 (#0)" (> Var "a~6") (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:262:1: 262:78 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_update_different.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:262:44: 262:53 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:262:55: 262:62 (#0)" (Param :name "i1~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:262:64: 262:71 (#0)" (Param :name "i2~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:262:73: 262:77 (#0)" (Param :name "a~8" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:269:1: 269:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:264:9: 264:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:264:9: 264:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:264:14: 264:16 (#0)" (> Var "i1~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:264:19: 264:26 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:264:19: 264:20 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
   (@@ "pervasive/seq.rs:265:9: 265:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:265:9: 265:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:265:14: 265:16 (#0)" (> Var "i2~6") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:265:19: 265:26 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:265:19: 265:20 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
   (@@ "pervasive/seq.rs:266:9: 266:11 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/seq.rs:266:9: 266:11 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/seq.rs:266:9: 266:11 (#0)" (> Var "i1~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:266:15: 266:17 (#0)"
        (> Var "i2~6") (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:268:9: 268:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:268:9: 268:10 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:268:9: 268:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq.rs:268:9: 268:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:268:18: 268:20 (#0)"
            (> Var "i2~6") (Typ Int (IntRange Int))
           ) (@@ "pervasive/seq.rs:268:22: 268:23 (#0)" (> Var "a~8") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq.rs:268:25: 268:27 (#0)" (> Var "i1~4") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:268:32: 268:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:268:32: 268:33 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:268:34: 268:36 (#0)"
         (> Var "i1~4") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:274:1: 274:60 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:274:37: 274:47 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:274:49: 274:59 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:280:1: 280:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq.rs:276:9: 276:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:276:20: 276:31 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:276:20: 276:31 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
         (@@ "pervasive/seq.rs:276:21: 276:23 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:276:28: 276:30 (#0)"
          (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/seq.rs:276:37: 279:10 (#0)" (> Block () (@@ "pervasive/seq.rs:277:17: 278:23 (#0)" (> Binary (BinaryOp And)
         (@@ "pervasive/seq.rs:277:17: 277:19 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:277:17: 277:25 (#0)" (> Call (CallTarget
              Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq.rs:277:17: 277:19 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Int (IntRange Nat))
           ) (@@ "pervasive/seq.rs:277:29: 277:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq.rs:277:29: 277:31 (#0)" (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Int (IntRange Nat)))
          ) (Typ Bool)
         ) (@@ "pervasive/seq.rs:278:17: 278:23 (#0)" (> Quant (Forall :boxed_params true) ((-> i~47 (Typ Int (IntRange Int)))) (@@ "pervasive/seq.rs:278:32: 278:33 (#0)"
            (> Binary (BinaryOp Implies) (@@ "pervasive/seq.rs:278:32: 278:33 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp
                  Lt))
               ) ((@@ "pervasive/seq.rs:278:32: 278:33 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq.rs:278:37: 278:38 (#0)"
                 (> Var "i~47") (Typ Int (IntRange Int))
                ) (@@ "pervasive/seq.rs:278:41: 278:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                   ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/seq.rs:278:41: 278:43 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                 ) (Typ Int (IntRange Nat))))
              ) (Typ Bool)
             ) (@@ "pervasive/seq.rs:278:54: 278:56 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:278:54: 278:56 (#0)" (> Call
                 (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                 ((@@ "pervasive/seq.rs:278:54: 278:56 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:278:57: 278:58 (#0)"
                   (> Var "i~47") (Typ Int (IntRange Int))))
                ) (Typ TypParam "A")
               ) (@@ "pervasive/seq.rs:278:63: 278:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq.rs:278:63: 278:65 (#0)" (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:278:66: 278:67 (#0)"
                   (> Var "i~47") (Typ Int (IntRange Int))))
                ) (Typ TypParam "A"))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:285:1: 285:65 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_ext_equal_deep.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:285:42: 285:52 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:285:54: 285:64 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:291:1: 291:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq.rs:287:9: 287:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:287:20: 287:32 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:287:20: 287:32 (#0)" (> BinaryOpr (BinaryOpr ExtEq true (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
         (@@ "pervasive/seq.rs:287:21: 287:23 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:287:29: 287:31 (#0)"
          (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/seq.rs:287:38: 290:10 (#0)" (> Block () (@@ "pervasive/seq.rs:288:17: 289:23 (#0)" (> Binary (BinaryOp And)
         (@@ "pervasive/seq.rs:288:17: 288:19 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:288:17: 288:25 (#0)" (> Call (CallTarget
              Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq.rs:288:17: 288:19 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Int (IntRange Nat))
           ) (@@ "pervasive/seq.rs:288:29: 288:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq.rs:288:29: 288:31 (#0)" (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Int (IntRange Nat)))
          ) (Typ Bool)
         ) (@@ "pervasive/seq.rs:289:17: 289:23 (#0)" (> Quant (Forall :boxed_params true) ((-> i~47 (Typ Int (IntRange Int)))) (@@ "pervasive/seq.rs:289:32: 289:33 (#0)"
            (> Binary (BinaryOp Implies) (@@ "pervasive/seq.rs:289:32: 289:33 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp
                  Lt))
               ) ((@@ "pervasive/seq.rs:289:32: 289:33 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq.rs:289:37: 289:38 (#0)"
                 (> Var "i~47") (Typ Int (IntRange Int))
                ) (@@ "pervasive/seq.rs:289:41: 289:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                   ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/seq.rs:289:41: 289:43 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                 ) (Typ Int (IntRange Nat))))
              ) (Typ Bool)
             ) (@@ "pervasive/seq.rs:289:54: 289:56 (#0)" (> BinaryOpr (BinaryOpr ExtEq true (Typ TypParam "A")) (@@ "pervasive/seq.rs:289:54: 289:56 (#0)"
                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                   IfMarked)
                 ) ((@@ "pervasive/seq.rs:289:54: 289:56 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:289:57: 289:58 (#0)"
                   (> Var "i~47") (Typ Int (IntRange Int))))
                ) (Typ TypParam "A")
               ) (@@ "pervasive/seq.rs:289:65: 289:67 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq.rs:289:65: 289:67 (#0)" (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:289:68: 289:69 (#0)"
                   (> Var "i~47") (Typ Int (IntRange Int))))
                ) (Typ TypParam "A"))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:296:1: 296:66 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_subrange_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:296:40: 296:49 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:296:51: 296:57 (#0)" (Param :name "j~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:296:59: 296:65 (#0)" (Param :name "k~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:301:1: 301:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:298:9: 298:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Le) (InequalityOp Le)))
     ((@@ "pervasive/seq.rs:298:9: 298:10 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq.rs:298:14: 298:15 (#0)"
       (> Var "j~4") (Typ Int (IntRange Int))
      ) (@@ "pervasive/seq.rs:298:19: 298:20 (#0)" (> Var "k~6") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:298:24: 298:31 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:298:24: 298:25 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:300:9: 300:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:300:20: 300:42 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:300:20: 300:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:300:20: 300:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:300:20: 300:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:300:31: 300:32 (#0)"
              (> Var "j~4") (Typ Int (IntRange Int))
             ) (@@ "pervasive/seq.rs:300:34: 300:35 (#0)" (> Var "k~6") (Typ Int (IntRange Int))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:300:46: 300:47 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq.rs:300:46: 300:47 (#0)"
        (> Var "k~6") (Typ Int (IntRange Int))
       ) (@@ "pervasive/seq.rs:300:50: 300:51 (#0)" (> Var "j~4") (Typ Int (IntRange Int)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:306:1: 306:76 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_subrange_index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:306:42: 306:51 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:306:53: 306:59 (#0)" (Param :name "j~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:306:61: 306:67 (#0)" (Param :name "k~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq.rs:306:69: 306:75 (#0)" (Param :name "i~8" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:312:1: 312:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:308:9: 308:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Le) (InequalityOp Le)))
     ((@@ "pervasive/seq.rs:308:9: 308:10 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq.rs:308:14: 308:15 (#0)"
       (> Var "j~4") (Typ Int (IntRange Int))
      ) (@@ "pervasive/seq.rs:308:19: 308:20 (#0)" (> Var "k~6") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:308:24: 308:31 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:308:24: 308:25 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
   (@@ "pervasive/seq.rs:309:9: 309:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:309:9: 309:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:309:14: 309:15 (#0)" (> Var "i~8") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:309:18: 309:19 (#0)"
       (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq.rs:309:18: 309:19 (#0)" (> Var "k~6") (Typ Int (IntRange Int)))
        (@@ "pervasive/seq.rs:309:22: 309:23 (#0)" (> Var "j~4") (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:311:9: 311:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:311:9: 311:10 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:311:9: 311:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq.rs:311:9: 311:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:311:20: 311:21 (#0)"
            (> Var "j~4") (Typ Int (IntRange Int))
           ) (@@ "pervasive/seq.rs:311:23: 311:24 (#0)" (> Var "k~6") (Typ Int (IntRange Int))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq.rs:311:26: 311:27 (#0)" (> Var "i~8") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:311:32: 311:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:311:32: 311:33 (#0)" (> Var "s~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:311:34: 311:35 (#0)"
         (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/seq.rs:311:34: 311:35 (#0)" (> Var "i~8") (Typ Int (IntRange Int)))
          (@@ "pervasive/seq.rs:311:38: 311:39 (#0)" (> Var "j~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:317:1: 317:58 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_add_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:317:35: 317:45 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:317:47: 317:57 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq.rs:319:1: 319:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq.rs:318:13: 318:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:318:24: 318:40 (#0)" (> Unary (
        UnaryOp Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/seq.rs:318:24: 318:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:318:24: 318:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.add.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:318:24: 318:26 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:318:31: 318:33 (#0)"
              (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:318:44: 318:46 (#0)" (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate true) (@@ "pervasive/seq.rs:318:44: 318:46 (#0)"
        (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/seq.rs:318:44: 318:52 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/seq.rs:318:44: 318:46 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/seq.rs:318:55: 318:63 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/seq.rs:318:55: 318:57 (#0)" (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:324:1: 324:69 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_add_index1.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:324:38: 324:48 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:324:50: 324:60 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:324:62: 324:68 (#0)" (Param :name "i~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:329:1: 329:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:326:9: 326:10 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq.rs:326:9: 326:10 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq.rs:326:14: 326:15 (#0)" (> Var "i~6") (Typ Int (IntRange Int))) (@@ "pervasive/seq.rs:326:18: 326:26 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq.rs:326:18: 326:20 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:328:9: 328:11 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:328:9: 328:11 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:328:9: 328:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.add.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq.rs:328:9: 328:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:328:16: 328:18 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq.rs:328:20: 328:21 (#0)" (> Var "i~6") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:328:26: 328:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:328:26: 328:28 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:328:29: 328:30 (#0)"
         (> Var "i~6") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq.rs:334:1: 334:69 (#0)" (Function
  :name (Fun :path "vstd!seq.axiom_seq_add_index2.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq.rs:334:38: 334:48 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:334:50: 334:60 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq.rs:334:62: 334:68 (#0)" (Param :name "i~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq.rs:340:1: 340:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq.rs:336:9: 336:10 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/seq.rs:336:9: 336:10 (#0)"
      (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq.rs:336:14: 336:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:336:14: 336:16 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
   (@@ "pervasive/seq.rs:337:9: 337:10 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq.rs:337:9: 337:10 (#0)"
      (> Var "i~6") (Typ Int (IntRange Int))
     ) (@@ "pervasive/seq.rs:337:13: 337:14 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/seq.rs:337:13: 337:21 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
         ((@@ "pervasive/seq.rs:337:13: 337:15 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/seq.rs:337:31: 337:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq.rs:337:31: 337:33 (#0)" (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq.rs:339:9: 339:11 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq.rs:339:9: 339:11 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:339:9: 339:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.add.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq.rs:339:9: 339:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:339:16: 339:18 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq.rs:339:20: 339:21 (#0)" (> Var "i~6") (Typ Int (IntRange Int))))
      ) (Typ TypParam "A")
     ) (@@ "pervasive/seq.rs:339:26: 339:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq.rs:339:26: 339:28 (#0)" (> Var "s2~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq.rs:339:29: 339:30 (#0)"
         (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq.rs:339:29: 339:30 (#0)" (> Var "i~6") (Typ Int (IntRange Int)))
          (@@ "pervasive/seq.rs:339:33: 339:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") (
              (Typ TypParam "A")
             ) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq.rs:339:33: 339:35 (#0)" (> Var "s1~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Int (IntRange Nat)))
         ) (Typ Int (IntRange Int))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:19:5: 19:68 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.map.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:19:29: 19:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:19:35: 19:44 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ Int (IntRange Int)) (Typ TypParam "A"))
      (Typ TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:19:62: 19:68 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "B")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:19:69: 21:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:20:9: 20:53 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.new.") ((Typ TypParam "B") (Typ Lambda ((Typ Int (IntRange Int))) (Typ
          TypParam "B"))
       ) ((tuple "impl%1" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq_lib.rs:20:18: 20:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:20:18: 20:22 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/seq_lib.rs:20:30: 20:52 (#0)" (> Closure ((-> i~21 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:20:39: 20:52 (#0)"
          (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:20:39: 20:40 (#0)" (> Var "f~4") (Typ Lambda ((Typ Int (IntRange Int)) (Typ
                TypParam "A")
              ) (Typ TypParam "B")))
           ) ((@@ "pervasive/seq_lib.rs:20:41: 20:42 (#0)" (> Var "i~21") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:20:44: 20:48 (#0)"
             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:20:44: 20:48 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:20:49: 20:50 (#0)"
                (> Var "i~21") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")))
          ) (Typ TypParam "B"))
        ) (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "B"))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "B"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "B")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:27:5: 27:70 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.map_values.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:27:36: 27:40 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:27:42: 27:51 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B")) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:27:64: 27:70 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "B")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:27:71: 29:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:28:9: 28:50 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.new.") ((Typ TypParam "B") (Typ Lambda ((Typ Int (IntRange Int))) (Typ
          TypParam "B"))
       ) ((tuple "impl%1" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq_lib.rs:28:18: 28:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:28:18: 28:22 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/seq_lib.rs:28:30: 28:49 (#0)" (> Closure ((-> i~21 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:28:39: 28:49 (#0)"
          (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:28:39: 28:40 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A")) (Typ TypParam
               "B")))
           ) ((@@ "pervasive/seq_lib.rs:28:41: 28:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:28:41: 28:45 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:28:46: 28:47 (#0)"
                (> Var "i~21") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")))
          ) (Typ TypParam "B"))
        ) (Typ Lambda ((Typ Int (IntRange Int))) (Typ TypParam "B"))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "B"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "B")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:32:5: 32:67 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.filter.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 0 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:32:29: 32:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:32:35: 32:47 (#0)" (Param :name "pred~4" :typ (Typ Lambda ((Typ TypParam "A")) (Typ Bool)) :mode Spec
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:32:63: 32:67 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease ((@@ "pervasive/seq_lib.rs:33:19: 33:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
      (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:33:19: 33:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish true
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:34:5: 41:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:35:9: 40:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:35:12: 35:16 (#0)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:35:12: 35:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun
            :path "vstd!seq.Seq.len."
           ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:35:12: 35:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:35:26: 35:27 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:35:28: 37:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:36:13: 36:17 (#0)" (> Var "self~2") (Typ
          Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
       ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
      ) (@@ "pervasive/seq_lib.rs:37:16: 40:10 (#0)" (> Block (
         (@ "pervasive/seq_lib.rs:38:17: 38:23 (#0)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:38:17: 38:23 (#0)" (Pattern Var :name
             "subseq~47" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:38:26: 38:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:38:26: 38:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:38:26: 38:30 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:38:50: 38:54 (#0)" (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
        ) (@@ "pervasive/seq_lib.rs:39:13: 39:78 (#0)" (> If (@@ "pervasive/seq_lib.rs:39:16: 39:33 (#0)" (> Call (CallTarget FnSpec (
              @@ "pervasive/seq_lib.rs:39:16: 39:20 (#0)" (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
            ) ((@@ "pervasive/seq_lib.rs:39:21: 39:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:39:21: 39:25 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              ) (Typ TypParam "A")))
           ) (Typ Bool)
          ) (@@ "pervasive/seq_lib.rs:39:34: 39:62 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:39:36: 39:60 (#0)" (> Call (CallTarget Fun
               (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:39:36: 39:42 (#0)" (> Var "subseq~47") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                @@ "pervasive/seq_lib.rs:39:48: 39:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:39:48: 39:52 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                ) (Typ TypParam "A")))
             ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
          ) (@@ "pervasive/seq_lib.rs:39:68: 39:78 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:39:70: 39:76 (#0)" (> Var "subseq~47")
             (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
       ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:43:5: 43:61 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.filter_lemma.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:43:31: 43:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:43:37: 43:49 (#0)" (Param :name "pred~4" :typ (Typ Lambda ((Typ TypParam "A")) (Typ Bool)) :mode Spec
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:56:5: 56:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:49:13: 49:19 (#0)" (> Quant (Forall :boxed_params true) ((-> i~18 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:49:29: 49:30 (#0)"
      (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:49:29: 49:30 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp
            Lt))
         ) ((@@ "pervasive/seq_lib.rs:49:29: 49:30 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:49:34: 49:35 (#0)"
           (> Var "i~18") (Typ Int (IntRange Int))
          ) (@@ "pervasive/seq_lib.rs:49:38: 49:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:49:38: 49:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:49:38: 49:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:49:50: 49:54 (#0)"
                 (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Int (IntRange Nat))))
        ) (Typ Bool)
       ) (@@ "pervasive/seq_lib.rs:49:66: 49:103 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:49:66: 49:70 (#0)" (> Var
            "pred~4"
           ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
         ) ((@@ "pervasive/seq_lib.rs:49:71: 49:86 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:49:71: 49:86 (#0)"
             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:49:82: 49:99 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:49:82: 49:86 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:49:94: 49:98 (#0)"
                   (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
                ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:49:100: 49:101 (#0)" (> Var "i~18") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A"))
           ) (Typ TypParam "A")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/seq_lib.rs:51:13: 51:19 (#0)" (> Quant (Forall :boxed_params true) ((-> i~82 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:51:29: 51:30 (#0)"
      (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:51:29: 51:65 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:51:29: 51:30 (#0)"
          (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:51:29: 51:30 (#0)" (> Const (Constant
               Int 0)
             ) (Typ Int (IntRange Nat))
            ) (@@ "pervasive/seq_lib.rs:51:34: 51:35 (#0)" (> Var "i~82") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:51:38: 51:48 (#0)"
             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
              ((@@ "pervasive/seq_lib.rs:51:38: 51:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
             ) (Typ Int (IntRange Nat))))
          ) (Typ Bool)
         ) (@@ "pervasive/seq_lib.rs:51:52: 51:65 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:51:52: 51:56 (#0)" (> Var
              "pred~4"
             ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
           ) ((@@ "pervasive/seq_lib.rs:51:57: 51:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:51:57: 51:61 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:51:62: 51:63 (#0)"
                (> Var "i~82") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/seq_lib.rs:52:32: 52:67 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:52:32: 52:67 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
             IfMarked)
           ) ((@@ "pervasive/seq_lib.rs:52:32: 52:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:52:32: 52:36 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:52:44: 52:48 (#0)"
                (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
             ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
            ) (@@ "pervasive/seq_lib.rs:52:59: 52:63 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:52:59: 52:63 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:52:64: 52:65 (#0)"
                (> Var "i~82") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/seq_lib.rs:54:13: 54:17 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/seq_lib.rs:54:13: 54:36 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:54:13: 54:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:54:13: 54:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:54:25: 54:29 (#0)"
            (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq_lib.rs:54:40: 54:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:54:40: 54:44 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:55:19: 55:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:55:19: 55:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:56:5: 79:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:57:9: 57:29 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:57:9: 57:29 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.filter.")
         1
        ) (Typ Tuple ()))))
     (@ "pervasive/seq_lib.rs:58:13: 58:16 (#0)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:58:13: 58:16 (#0)" (Pattern Var :name
         "out~187" :mutable false
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) :mode Spec :init (@@ "pervasive/seq_lib.rs:58:19: 58:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:58:19: 58:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:58:31: 58:35 (#0)"
           (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
    ) (@@ "pervasive/seq_lib.rs:59:9: 78:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:59:12: 59:13 (#0)" (> Binary (BinaryOp Inequality
         (InequalityOp Lt)
        ) (@@ "pervasive/seq_lib.rs:59:12: 59:13 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:59:16: 59:26 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
          ((@@ "pervasive/seq_lib.rs:59:16: 59:20 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:59:27: 78:10 (#0)" (> Block (
         (@ "pervasive/seq_lib.rs:60:13: 60:48 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:60:13: 60:48 (#0)" (> Call (CallTarget Fun (CallTargetKind
               Static
              ) (Fun :path "vstd!seq_lib.impl&%0.filter_lemma.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:60:13: 60:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:60:13: 60:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:60:43: 60:47 (#0)" (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:61:13: 61:19 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:61:13: 61:19 (#0)" (> Block (
              (@ "pervasive/seq_lib.rs:61:13: 61:19 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:61:13: 61:19 (#0)" (> AssertBy :vars ((-> i~219
                    (Typ Int (IntRange Int)))
                  ) :require (
                   @@
                   "pervasive/seq_lib.rs:61:36: 61:37 (#0)"
                   (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:61:36: 61:37 (#0)" (> Const (Constant
                        Int 0)
                      ) (Typ Int (IntRange Nat))
                     ) (@@ "pervasive/seq_lib.rs:61:41: 61:42 (#0)" (> Var "i~219") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:61:45: 61:54 (#0)"
                      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                       ((@@ "pervasive/seq_lib.rs:61:45: 61:48 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                      ) (Typ Int (IntRange Nat)))))
                   (Typ Bool)
                  ) :ensure (
                   @@
                   "pervasive/seq_lib.rs:61:63: 61:75 (#0)"
                   (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:61:63: 61:67 (#0)" (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ
                        Bool)))
                    ) ((@@ "pervasive/seq_lib.rs:61:68: 61:71 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:61:68: 61:71 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                         "pervasive/seq_lib.rs:61:72: 61:73 (#0)" (> Var "i~219") (Typ Int (IntRange Int))))
                      ) (Typ TypParam "A"))))
                   (Typ Bool)
                  ) :proof (@@ "pervasive/seq_lib.rs:61:79: 66:14 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:62:17: 65:18 (#0)" (> If (@@ "pervasive/seq_lib.rs:62:20: 62:21 (#0)"
                       (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:62:20: 62:21 (#0)" (> Var "i~219") (Typ Int (IntRange
                           Int))
                        ) (@@ "pervasive/seq_lib.rs:62:24: 62:27 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:62:24: 62:33 (#0)"
                           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                            ((@@ "pervasive/seq_lib.rs:62:24: 62:27 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                           ) (Typ Int (IntRange Nat))
                          ) (@@ "pervasive/seq_lib.rs:62:34: 62:35 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                         ) (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:62:36: 65:18 (#0)" (> Block (
                         (@ "pervasive/seq_lib.rs:63:21: 63:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:63:21: 63:27 (#0)" (> AssertAssume :is_assume
                             false :expr (@@ "pervasive/seq_lib.rs:63:28: 63:32 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:63:28: 63:32 (#0)"
                                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                                   IfMarked)
                                 ) ((@@ "pervasive/seq_lib.rs:63:28: 63:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                    ) ((@@ "pervasive/seq_lib.rs:63:28: 63:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                                        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                       ) ((@@ "pervasive/seq_lib.rs:63:28: 63:32 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                                      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                                     ) (@@ "pervasive/seq_lib.rs:63:52: 63:56 (#0)" (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
                                   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                                  ) (@@ "pervasive/seq_lib.rs:63:58: 63:59 (#0)" (> Var "i~219") (Typ Int (IntRange Int))))
                                ) (Typ TypParam "A")
                               ) (@@ "pervasive/seq_lib.rs:63:64: 63:67 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                 ) ((@@ "pervasive/seq_lib.rs:63:64: 63:79 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                    ) ((@@ "pervasive/seq_lib.rs:63:64: 63:67 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                                   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                                  ) (@@ "pervasive/seq_lib.rs:63:80: 63:81 (#0)" (> Var "i~219") (Typ Int (IntRange Int))))
                                ) (Typ TypParam "A"))
                              ) (Typ Bool))
                            ) (Typ Tuple ()))))
                         (@ "pervasive/seq_lib.rs:64:21: 64:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:64:21: 64:27 (#0)" (> AssertAssume :is_assume
                             false :expr (@@ "pervasive/seq_lib.rs:64:28: 64:40 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:64:28: 64:32 (#0)"
                                 (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
                               ) ((@@ "pervasive/seq_lib.rs:64:33: 64:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                                   ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                  ) ((@@ "pervasive/seq_lib.rs:64:33: 64:36 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                                    "pervasive/seq_lib.rs:64:37: 64:38 (#0)" (> Var "i~219") (Typ Int (IntRange Int))))
                                 ) (Typ TypParam "A")))
                              ) (Typ Bool))
                            ) (Typ Tuple ()))))
                        ) None
                       ) (Typ Tuple ())
                      ) None
                     ) (Typ Tuple ()))
                   ) (Typ Tuple ())
                  ) :assumption (@@ "pervasive/seq_lib.rs:61:13: 61:19 (#0)" (> Quant (Forall :boxed_params true) ((-> i~219 (Typ Int (IntRange Int))))
                    (@@ "pervasive/seq_lib.rs:61:13: 61:19 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:61:36: 61:37 (#0)" (> Multi
                        (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:61:36: 61:37 (#0)" (> Const (Constant Int
                            0)
                          ) (Typ Int (IntRange Nat))
                         ) (@@ "pervasive/seq_lib.rs:61:41: 61:42 (#0)" (> Var "i~219") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:61:45: 61:54 (#0)"
                          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                           ((@@ "pervasive/seq_lib.rs:61:45: 61:48 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                          ) (Typ Int (IntRange Nat))))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:61:63: 61:75 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:61:63: 61:67 (#0)" (> Var
                           "pred~4"
                          ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
                        ) ((@@ "pervasive/seq_lib.rs:61:68: 61:71 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/seq_lib.rs:61:68: 61:71 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                             "pervasive/seq_lib.rs:61:72: 61:73 (#0)" (> Var "i~219") (Typ Int (IntRange Int))))
                          ) (Typ TypParam "A")))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Tuple ()))))
             ) None
            ) (Typ Tuple ()))))
        ) (@@ "pervasive/seq_lib.rs:67:13: 67:19 (#0)" (> Block (
           (@ "pervasive/seq_lib.rs:67:13: 67:19 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:67:13: 67:19 (#0)" (> AssertBy :vars ((-> i~354
                 (Typ Int (IntRange Int)))
               ) :require (
                @@
                "pervasive/seq_lib.rs:67:36: 67:72 (#0)"
                (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:67:36: 67:37 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp
                      Lt))
                   ) ((@@ "pervasive/seq_lib.rs:67:36: 67:37 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:67:41: 67:42 (#0)"
                     (> Var "i~354") (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:67:45: 67:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:67:45: 67:49 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Int (IntRange Nat))))
                  ) (Typ Bool)
                 ) (@@ "pervasive/seq_lib.rs:67:59: 67:72 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:67:59: 67:63 (#0)" (> Var
                      "pred~4"
                     ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
                   ) ((@@ "pervasive/seq_lib.rs:67:64: 67:68 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:67:64: 67:68 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:67:69: 67:70 (#0)"
                        (> Var "i~354") (Typ Int (IntRange Int))))
                     ) (Typ TypParam "A")))
                  ) (Typ Bool)))
                (Typ Bool)
               ) :ensure (
                @@
                "pervasive/seq_lib.rs:68:36: 68:57 (#0)"
                (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:68:36: 68:57 (#0)" (> Call (CallTarget
                    Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:68:36: 68:39 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:68:49: 68:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:68:49: 68:53 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:68:54: 68:55 (#0)"
                        (> Var "i~354") (Typ Int (IntRange Int))))
                     ) (Typ TypParam "A")))
                  ) (Typ Bool)))
                (Typ Bool)
               ) :proof (@@ "pervasive/seq_lib.rs:68:61: 77:14 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:69:17: 76:18 (#0)" (> If (@@ "pervasive/seq_lib.rs:69:20: 69:21 (#0)"
                    (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:69:20: 69:21 (#0)" (> Var "i~354") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:69:23: 69:27 (#0)"
                      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:69:23: 69:33 (#0)" (> Call (CallTarget Fun (CallTargetKind
                           Static
                          ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                         ) ((@@ "pervasive/seq_lib.rs:69:23: 69:27 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                        ) (Typ Int (IntRange Nat))
                       ) (@@ "pervasive/seq_lib.rs:69:34: 69:35 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                      ) (Typ Int (IntRange Int)))
                    ) (Typ Bool)
                   ) (@@ "pervasive/seq_lib.rs:69:36: 71:18 (#0)" (> Block (
                      (@ "pervasive/seq_lib.rs:70:21: 70:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:70:21: 70:27 (#0)" (> AssertAssume :is_assume
                          false :expr (@@ "pervasive/seq_lib.rs:70:28: 70:32 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:70:28: 70:32 (#0)"
                             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                                IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:70:28: 70:32 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:70:33: 70:34 (#0)"
                                (> Var "i~354") (Typ Int (IntRange Int))))
                             ) (Typ TypParam "A")
                            ) (@@ "pervasive/seq_lib.rs:70:39: 70:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:70:39: 70:42 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                                "pervasive/seq_lib.rs:70:43: 70:46 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:70:43: 70:52 (#0)"
                                  (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                                   ((@@ "pervasive/seq_lib.rs:70:43: 70:46 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                                  ) (Typ Int (IntRange Nat))
                                 ) (@@ "pervasive/seq_lib.rs:70:53: 70:54 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                                ) (Typ Int (IntRange Int))))
                             ) (Typ TypParam "A"))
                           ) (Typ Bool))
                         ) (Typ Tuple ()))))
                     ) None
                    ) (Typ Tuple ())
                   ) (@@ "pervasive/seq_lib.rs:71:24: 76:18 (#0)" (> Block (
                      (@ "pervasive/seq_lib.rs:72:25: 72:31 (#0)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:72:25: 72:31 (#0)" (Pattern Var :name
                          "subseq~487" :mutable false
                         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                        ) :mode Spec :init (@@ "pervasive/seq_lib.rs:72:34: 72:63 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:72:34: 72:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                             ) ((@@ "pervasive/seq_lib.rs:72:34: 72:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                           ) (@@ "pervasive/seq_lib.rs:72:58: 72:62 (#0)" (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
                         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
                      (@ "pervasive/seq_lib.rs:73:21: 73:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:73:21: 73:27 (#0)" (> AssertAssume :is_assume
                          false :expr (@@ "pervasive/seq_lib.rs:73:28: 73:64 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:73:28: 73:34 (#0)" (> Var "subseq~487") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                             (@@ "pervasive/seq_lib.rs:73:44: 73:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                               ) ((@@ "pervasive/seq_lib.rs:73:44: 73:60 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                                   ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                  ) ((@@ "pervasive/seq_lib.rs:73:44: 73:48 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                                 ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                                ) (@@ "pervasive/seq_lib.rs:73:61: 73:62 (#0)" (> Var "i~354") (Typ Int (IntRange Int))))
                              ) (Typ TypParam "A")))
                           ) (Typ Bool))
                         ) (Typ Tuple ()))))
                      (@ "pervasive/seq_lib.rs:74:25: 74:26 (#0)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:74:25: 74:26 (#0)" (Pattern Var :name
                          "j~567" :mutable false
                         ) (Typ Int (IntRange Int))
                        ) :mode Spec :init (@@ "pervasive/seq_lib.rs:74:29: 74:35 (#0)" (> Choose :params (
                           (-> j~514 (Typ Int (IntRange Int)))
                          ) :cond (@@ "pervasive/seq_lib.rs:74:39: 74:66 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:74:39: 74:40 (#0)" (
                              > Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:74:39: 74:40 (#0)" (> Const (Constant
                                  Int 0)
                                ) (Typ Int (IntRange Nat))
                               ) (@@ "pervasive/seq_lib.rs:74:42: 74:43 (#0)" (> Var "j~514") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:74:44: 74:56 (#0)"
                                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                                 ((@@ "pervasive/seq_lib.rs:74:44: 74:50 (#0)" (> Var "subseq~487") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                                ) (Typ Int (IntRange Nat))))
                             ) (Typ Bool)
                            ) (@@ "pervasive/seq_lib.rs:74:60: 74:66 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:74:60: 74:66 (#0)" (> Call
                                (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                                ((@@ "pervasive/seq_lib.rs:74:60: 74:66 (#0)" (> Var "subseq~487") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                                  "pervasive/seq_lib.rs:74:67: 74:68 (#0)" (> Var "j~514") (Typ Int (IntRange Int))))
                               ) (Typ TypParam "A")
                              ) (@@ "pervasive/seq_lib.rs:74:71: 74:75 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                ) ((@@ "pervasive/seq_lib.rs:74:71: 74:75 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:74:76: 74:77 (#0)"
                                  (> Var "i~354") (Typ Int (IntRange Int))))
                               ) (Typ TypParam "A"))
                             ) (Typ Bool))
                           ) (Typ Bool)
                          ) :body (@@ "pervasive/seq_lib.rs:74:36: 74:37 (#0)" (> Var "j~514") (Typ Int (IntRange Int)))
                         ) (Typ Int (IntRange Int)))))
                      (@ "pervasive/seq_lib.rs:75:21: 75:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:75:21: 75:27 (#0)" (> AssertAssume :is_assume
                          false :expr (@@ "pervasive/seq_lib.rs:75:28: 75:31 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:75:28: 75:31 (#0)"
                             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                                IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:75:28: 75:31 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                                "pervasive/seq_lib.rs:75:32: 75:33 (#0)" (> Var "j~567") (Typ Int (IntRange Int))))
                             ) (Typ TypParam "A")
                            ) (@@ "pervasive/seq_lib.rs:75:38: 75:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:75:38: 75:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:75:43: 75:44 (#0)"
                                (> Var "i~354") (Typ Int (IntRange Int))))
                             ) (Typ TypParam "A"))
                           ) (Typ Bool))
                         ) (Typ Tuple ()))))
                     ) None
                    ) (Typ Tuple ()))
                  ) (Typ Tuple ()))
                ) (Typ Tuple ())
               ) :assumption (@@ "pervasive/seq_lib.rs:67:13: 67:19 (#0)" (> Quant (Forall :boxed_params true) ((-> i~354 (Typ Int (IntRange Int))))
                 (@@ "pervasive/seq_lib.rs:67:13: 67:19 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:67:36: 67:72 (#0)" (> Binary
                     (BinaryOp And) (@@ "pervasive/seq_lib.rs:67:36: 67:37 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt)))
                       ((@@ "pervasive/seq_lib.rs:67:36: 67:37 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:67:41: 67:42 (#0)"
                         (> Var "i~354") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:67:45: 67:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:67:45: 67:49 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat))))
                      ) (Typ Bool)
                     ) (@@ "pervasive/seq_lib.rs:67:59: 67:72 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:67:59: 67:63 (#0)" (> Var
                          "pred~4"
                         ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
                       ) ((@@ "pervasive/seq_lib.rs:67:64: 67:68 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:67:64: 67:68 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:67:69: 67:70 (#0)"
                            (> Var "i~354") (Typ Int (IntRange Int))))
                         ) (Typ TypParam "A")))
                      ) (Typ Bool))
                    ) (Typ Bool)
                   ) (@@ "pervasive/seq_lib.rs:68:36: 68:57 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:68:36: 68:57 (#0)"
                      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
                         IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:68:36: 68:39 (#0)" (> Var "out~187") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                         "pervasive/seq_lib.rs:68:49: 68:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:68:49: 68:53 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:68:54: 68:55 (#0)"
                            (> Var "i~354") (Typ Int (IntRange Int))))
                         ) (Typ TypParam "A")))
                      ) (Typ Bool))
                    ) (Typ Bool))
                  ) (Typ Bool))
                ) (Typ Bool))
              ) (Typ Tuple ()))))
          ) None
         ) (Typ Tuple ()))
       ) (Typ Tuple ())
      ) None
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:83:5: 83:71 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.filter_lemma_broadcast.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:83:41: 83:45 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:83:47: 83:59 (#0)" (Param :name "pred~4" :typ (Typ Lambda ((Typ TypParam "A")) (Typ Bool)) :mode Spec
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:88:61: 88:61 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:85:13: 85:19 (#0)" (> Quant (Forall :boxed_params true) ((-> i~18 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:85:29: 85:30 (#0)"
      (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:85:29: 85:30 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp
            Lt))
         ) ((@@ "pervasive/seq_lib.rs:85:29: 85:30 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:85:34: 85:35 (#0)"
           (> Var "i~18") (Typ Int (IntRange Int))
          ) (@@ "pervasive/seq_lib.rs:85:38: 85:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:85:38: 85:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:85:38: 85:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:85:50: 85:54 (#0)"
                 (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Int (IntRange Nat))))
        ) (Typ Bool)
       ) (@@ "pervasive/seq_lib.rs:85:66: 85:103 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:85:66: 85:70 (#0)" (> Var
            "pred~4"
           ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
         ) ((@@ "pervasive/seq_lib.rs:85:71: 85:86 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:85:71: 85:86 (#0)"
             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:85:82: 85:99 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:85:82: 85:86 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:85:94: 85:98 (#0)"
                   (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
                ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:85:100: 85:101 (#0)" (> Var "i~18") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A"))
           ) (Typ TypParam "A")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/seq_lib.rs:86:13: 86:19 (#0)" (> Quant (Forall :boxed_params true) ((-> i~82 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:86:29: 86:30 (#0)"
      (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:86:29: 86:65 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:86:29: 86:30 (#0)"
          (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:86:29: 86:30 (#0)" (> Const (Constant
               Int 0)
             ) (Typ Int (IntRange Nat))
            ) (@@ "pervasive/seq_lib.rs:86:34: 86:35 (#0)" (> Var "i~82") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:86:38: 86:48 (#0)"
             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
              ((@@ "pervasive/seq_lib.rs:86:38: 86:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
             ) (Typ Int (IntRange Nat))))
          ) (Typ Bool)
         ) (@@ "pervasive/seq_lib.rs:86:52: 86:65 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:86:52: 86:56 (#0)" (> Var
              "pred~4"
             ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
           ) ((@@ "pervasive/seq_lib.rs:86:57: 86:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:86:57: 86:61 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:86:62: 86:63 (#0)"
                (> Var "i~82") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/seq_lib.rs:87:32: 87:67 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:87:32: 87:67 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
             IfMarked)
           ) ((@@ "pervasive/seq_lib.rs:87:32: 87:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:87:32: 87:36 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:87:44: 87:48 (#0)"
                (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
             ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
            ) (@@ "pervasive/seq_lib.rs:87:59: 87:63 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:87:59: 87:63 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:87:64: 87:65 (#0)"
                (> Var "i~82") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/seq_lib.rs:88:13: 88:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/seq_lib.rs:88:24: 88:47 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:88:24: 88:47 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:88:24: 88:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:88:24: 88:28 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:88:36: 88:40 (#0)"
              (> Var "pred~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq_lib.rs:88:51: 88:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:88:51: 88:55 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:90:11: 90:79 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.filter_distributes_over_add.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to "vstd!seq_lib.") :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:90:42: 90:48 (#0)" (Param :name "a~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:90:50: 90:56 (#0)" (Param :name "b~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:90:58: 90:69 (#0)" (Param :name "pred~6" :typ (Typ Lambda ((Typ TypParam "A")) (Typ Bool)) :mode Spec
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:94:5: 94:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:92:9: 92:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:92:9: 92:27 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:92:9: 92:14 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:92:10: 92:11 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:92:12: 92:13 (#0)"
            (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq_lib.rs:92:22: 92:26 (#0)" (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/seq_lib.rs:92:31: 92:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:92:31: 92:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:92:31: 92:32 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:92:40: 92:44 (#0)"
            (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq_lib.rs:92:48: 92:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:92:48: 92:49 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:92:57: 92:61 (#0)"
            (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:93:15: 93:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:93:15: 93:16 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:94:5: 107:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:95:9: 95:29 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:95:9: 95:29 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.filter.")
         1
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/seq_lib.rs:96:9: 106:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:96:12: 96:13 (#0)" (> Binary (BinaryOp Inequality
         (InequalityOp Lt)
        ) (@@ "pervasive/seq_lib.rs:96:12: 96:13 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:96:16: 96:23 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
          ((@@ "pervasive/seq_lib.rs:96:16: 96:17 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:97:9: 103:10 (#0)" (> Block (
         (@ "pervasive/seq_lib.rs:98:13: 98:55 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:98:13: 98:55 (#0)" (> Call (CallTarget Fun (CallTargetKind
               Static
              ) (Fun :path "vstd!seq_lib.impl&%0.drop_last_distributes_over_add.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:98:50: 98:51 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:98:53: 98:54 (#0)"
               (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:99:13: 99:70 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:99:13: 99:70 (#0)" (> Call (CallTarget Fun (CallTargetKind
               Static
              ) (Fun :path "vstd!seq_lib.impl&%0.filter_distributes_over_add.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:99:47: 99:48 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:99:50: 99:63 (#0)"
               (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.") ((Typ TypParam "A")) () (AutospecUsage
                  IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:99:50: 99:51 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:99:65: 99:69 (#0)" (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
            ) (Typ Tuple ()))))
        ) (@@ "pervasive/seq_lib.rs:100:13: 102:14 (#0)" (> If (@@ "pervasive/seq_lib.rs:100:16: 100:30 (#0)" (> Call (CallTarget FnSpec
             (@@ "pervasive/seq_lib.rs:100:16: 100:20 (#0)" (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
            ) ((@@ "pervasive/seq_lib.rs:100:21: 100:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:100:21: 100:22 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              ) (Typ TypParam "A")))
           ) (Typ Bool)
          ) (@@ "pervasive/seq_lib.rs:100:31: 102:14 (#0)" (> Block (
             (@ "pervasive/seq_lib.rs:101:17: 101:102 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:101:17: 101:102 (#0)" (> Call (CallTarget
                  Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.push_distributes_over_add.") ((Typ TypParam "A")) () (AutospecUsage
                   IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:101:49: 101:63 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:101:49: 101:50 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:101:58: 101:62 (#0)"
                      (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
                   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                  ) (@@ "pervasive/seq_lib.rs:101:65: 101:91 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:101:65: 101:78 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:101:65: 101:66 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                     ) (@@ "pervasive/seq_lib.rs:101:86: 101:90 (#0)" (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
                   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                  ) (@@ "pervasive/seq_lib.rs:101:93: 101:101 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:101:93: 101:94 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ TypParam "A")))
                ) (Typ Tuple ()))))
            ) None
           ) (Typ Tuple ())
          ) None
         ) (Typ Tuple ()))
       ) (Typ Tuple ())
      ) (@@ "pervasive/seq_lib.rs:103:16: 106:10 (#0)" (> Block (
         (@ "pervasive/seq_lib.rs:104:13: 104:34 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:104:13: 104:34 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.add_empty.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:104:29: 104:30 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:104:32: 104:33 (#0)"
               (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:105:13: 105:60 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:105:13: 105:60 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.add_empty.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:105:29: 105:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:105:29: 105:30 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:105:38: 105:42 (#0)"
                  (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:105:45: 105:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:105:45: 105:46 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:105:54: 105:58 (#0)"
                  (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:109:5: 109:45 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.add_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:109:28: 109:35 (#0)" (Param :name "a~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:109:37: 109:44 (#0)" (Param :name "b~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:114:5: 114:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:111:9: 111:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:111:9: 111:16 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:111:9: 111:10 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq_lib.rs:111:20: 111:21 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq_lib.rs:113:9: 113:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:113:9: 113:10 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:113:9: 113:10 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:113:11: 113:12 (#0)"
         (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/seq_lib.rs:113:16: 113:17 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:114:5: 116:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:535:31: 535:33 (#750)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#750)" (Pattern
         Var :name "s1~60" :mutable false
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#750)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!seq_lib.check_argument_is_seq."
          ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:115:28: 115:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:115:28: 115:29 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:115:30: 115:31 (#0)"
              (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
     (@ "pervasive/seq_lib.rs:536:31: 536:33 (#750)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#750)" (Pattern
         Var :name "s2~70" :mutable false
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#750)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!seq_lib.check_argument_is_seq."
          ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:115:33: 115:34 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
     (@ "pervasive/seq_lib.rs:537:9: 545:11 (#750)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#750)" (> AssertBy :vars ()
         :require (
          @@
          "pervasive/seq_lib.rs:537:9: 545:11 (#750)"
          (> Const (Constant Bool true))
          (Typ Bool)
         ) :ensure (
          @@
          "pervasive/seq_lib.rs:537:30: 537:54 (#750)"
          (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#750)" (> Var "s1~60") (Typ Datatype "vstd!seq.Seq."
             ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#750)" (> Var "s2~70") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          (Typ Bool)
         ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#750)" (> Block (
            (@ "pervasive/seq_lib.rs:538:13: 538:53 (#750)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#750)" (> AssertAssume :is_assume
                false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#750)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#750)"
                   (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                    ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#750)" (> Var "s1~60") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Int (IntRange Nat))
                  ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#750)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#750)" (> Var "s2~70") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Int (IntRange Nat)))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
            (@ "pervasive/seq_lib.rs:539:13: 543:15 (#750)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#750)" (> AssertBy :vars
                ((-> idx~108 (Typ Int (IntRange Int)))) :require (
                 @@
                 "pervasive/seq_lib.rs:532:47: 540:74 (#750)"
                 (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#750)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                    (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#750)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#749)"
                     (> Var "idx~108") (Typ Int (IntRange Int)))
                   ) (Typ Bool)
                  ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#749)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#749)"
                     (> Var "idx~108") (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#750)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#750)" (> Var "s1~60") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Int (IntRange Nat)))
                   ) (Typ Bool)))
                 (Typ Bool)
                ) :ensure (
                 @@
                 "pervasive/seq_lib.rs:541:36: 541:84 (#750)"
                 (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#750)" (> Call (CallTarget Fun (CallTargetKind Static)
                     (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#750)" (> Var "s1~60") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                      @@ "pervasive/seq_lib.rs:541:62: 541:66 (#750)" (> Var "idx~108") (Typ Int (IntRange Int))))
                   ) (Typ TypParam "A")
                  ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#750)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#750)" (> Var "s2~70") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                      @@ "pervasive/seq_lib.rs:541:78: 541:82 (#750)" (> Var "idx~108") (Typ Int (IntRange Int))))
                   ) (Typ TypParam "A")))
                 (Typ Bool)
                ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#750)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#750)" (> Block
                    () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#750)" (> Block () None) (Typ Tuple ()))
                   ) (Typ Tuple ()))
                 ) (Typ Tuple ())
                ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#750)" (> Quant (Forall :boxed_params true) ((-> idx~108 (Typ Int (IntRange
                      Int)))
                  ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#750)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#750)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#750)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#750)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#749)"
                         (> Var "idx~108") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#749)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#749)"
                         (> Var "idx~108") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#750)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#750)" (> Var "s1~60") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool))
                     ) (Typ Bool)
                    ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#750)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#750)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#750)" (> Var "s1~60") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                          "pervasive/seq_lib.rs:541:62: 541:66 (#750)" (> Var "idx~108") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#750)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#750)" (> Var "s2~70") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                          @@ "pervasive/seq_lib.rs:541:78: 541:82 (#750)" (> Var "idx~108") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A"))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
            (@ "pervasive/seq_lib.rs:544:13: 544:61 (#750)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#750)" (> AssertAssume :is_assume
                false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#750)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                    ((Typ TypParam "A")))
                  ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#750)" (> Var "s1~60") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                   @@ "pervasive/seq_lib.rs:544:57: 544:59 (#750)" (> Var "s2~70") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ())
         ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#750)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#750)"
            (> Const (Constant Bool true)) (Typ Bool)
           ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#750)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#750)"
              (> Var "s1~60") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
             ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#750)" (> Var "s2~70") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:118:5: 118:69 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.push_distributes_over_add.") :proxy None :kind (FunctionKind Static) :visibility (
   Visibility :restricted_to None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:118:44: 118:51 (#0)" (Param :name "a~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:118:53: 118:60 (#0)" (Param :name "b~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:118:62: 118:68 (#0)" (Param :name "elt~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:121:5: 121:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:120:9: 120:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:120:9: 120:24 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:120:9: 120:14 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:120:10: 120:11 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:120:12: 120:13 (#0)"
            (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq_lib.rs:120:20: 120:23 (#0)" (> Var "elt~6") (Typ TypParam "A")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/seq_lib.rs:120:28: 120:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:120:28: 120:29 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:120:30: 120:41 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
          ((@@ "pervasive/seq_lib.rs:120:30: 120:31 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:120:37: 120:40 (#0)"
            (> Var "elt~6") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:121:5: 123:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:535:31: 535:33 (#741)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#741)" (Pattern
         Var :name "s1~56" :mutable false
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#741)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!seq_lib.check_argument_is_seq."
          ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:122:28: 122:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:122:28: 122:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:122:29: 122:30 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:122:31: 122:32 (#0)"
                 (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
             ) (@@ "pervasive/seq_lib.rs:122:39: 122:42 (#0)" (> Var "elt~6") (Typ TypParam "A")))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
     (@ "pervasive/seq_lib.rs:536:31: 536:33 (#741)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#741)" (Pattern
         Var :name "s2~74" :mutable false
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#741)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!seq_lib.check_argument_is_seq."
          ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:122:45: 122:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:122:45: 122:46 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:122:47: 122:58 (#0)"
              (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
               ((@@ "pervasive/seq_lib.rs:122:47: 122:48 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:122:54: 122:57 (#0)"
                 (> Var "elt~6") (Typ TypParam "A")))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
     (@ "pervasive/seq_lib.rs:537:9: 545:11 (#741)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#741)" (> AssertBy :vars ()
         :require (
          @@
          "pervasive/seq_lib.rs:537:9: 545:11 (#741)"
          (> Const (Constant Bool true))
          (Typ Bool)
         ) :ensure (
          @@
          "pervasive/seq_lib.rs:537:30: 537:54 (#741)"
          (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#741)" (> Var "s1~56") (Typ Datatype "vstd!seq.Seq."
             ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#741)" (> Var "s2~74") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          (Typ Bool)
         ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#741)" (> Block (
            (@ "pervasive/seq_lib.rs:538:13: 538:53 (#741)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#741)" (> AssertAssume :is_assume
                false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#741)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#741)"
                   (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                    ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#741)" (> Var "s1~56") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Int (IntRange Nat))
                  ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#741)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#741)" (> Var "s2~74") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Int (IntRange Nat)))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
            (@ "pervasive/seq_lib.rs:539:13: 543:15 (#741)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#741)" (> AssertBy :vars
                ((-> idx~112 (Typ Int (IntRange Int)))) :require (
                 @@
                 "pervasive/seq_lib.rs:532:47: 540:74 (#741)"
                 (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#741)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                    (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#741)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#740)"
                     (> Var "idx~112") (Typ Int (IntRange Int)))
                   ) (Typ Bool)
                  ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#740)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#740)"
                     (> Var "idx~112") (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#741)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#741)" (> Var "s1~56") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Int (IntRange Nat)))
                   ) (Typ Bool)))
                 (Typ Bool)
                ) :ensure (
                 @@
                 "pervasive/seq_lib.rs:541:36: 541:84 (#741)"
                 (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#741)" (> Call (CallTarget Fun (CallTargetKind Static)
                     (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#741)" (> Var "s1~56") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                      @@ "pervasive/seq_lib.rs:541:62: 541:66 (#741)" (> Var "idx~112") (Typ Int (IntRange Int))))
                   ) (Typ TypParam "A")
                  ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#741)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#741)" (> Var "s2~74") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                      @@ "pervasive/seq_lib.rs:541:78: 541:82 (#741)" (> Var "idx~112") (Typ Int (IntRange Int))))
                   ) (Typ TypParam "A")))
                 (Typ Bool)
                ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#741)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#741)" (> Block
                    () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#741)" (> Block () None) (Typ Tuple ()))
                   ) (Typ Tuple ()))
                 ) (Typ Tuple ())
                ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#741)" (> Quant (Forall :boxed_params true) ((-> idx~112 (Typ Int (IntRange
                      Int)))
                  ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#741)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#741)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#741)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#741)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#740)"
                         (> Var "idx~112") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#740)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#740)"
                         (> Var "idx~112") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#741)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#741)" (> Var "s1~56") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool))
                     ) (Typ Bool)
                    ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#741)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#741)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#741)" (> Var "s1~56") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                          "pervasive/seq_lib.rs:541:62: 541:66 (#741)" (> Var "idx~112") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#741)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#741)" (> Var "s2~74") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                          @@ "pervasive/seq_lib.rs:541:78: 541:82 (#741)" (> Var "idx~112") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A"))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
            (@ "pervasive/seq_lib.rs:544:13: 544:61 (#741)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#741)" (> AssertAssume :is_assume
                false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#741)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                    ((Typ TypParam "A")))
                  ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#741)" (> Var "s1~56") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                   @@ "pervasive/seq_lib.rs:544:57: 544:59 (#741)" (> Var "s2~74") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ())
         ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#741)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#741)"
            (> Const (Constant Bool true)) (Typ Bool)
           ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#741)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#741)"
              (> Var "s1~56") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
             ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#741)" (> Var "s2~74") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:127:5: 127:92 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.filter_distributes_over_add_broacast.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:127:55: 127:61 (#0)" (Param :name "a~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:127:63: 127:69 (#0)" (Param :name "b~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:127:71: 127:82 (#0)" (Param :name "pred~6" :typ (Typ Lambda ((Typ TypParam "A")) (Typ Bool)) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:130:5: 130:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:129:9: 129:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:129:20: 129:38 (#0)" (>
       Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:129:20: 129:38 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:129:20: 129:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:129:21: 129:22 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:129:23: 129:24 (#0)"
              (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
          ) (@@ "pervasive/seq_lib.rs:129:33: 129:37 (#0)" (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/seq_lib.rs:129:42: 129:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:129:42: 129:56 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:129:42: 129:43 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:129:51: 129:55 (#0)"
            (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq_lib.rs:129:59: 129:73 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.filter.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:129:59: 129:60 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:129:68: 129:72 (#0)"
            (> Var "pred~6") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:140:5: 140:52 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.add_empty_broacast.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:140:37: 140:43 (#0)" (Param :name "a~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:140:45: 140:51 (#0)" (Param :name "b~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:143:5: 143:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:142:9: 142:10 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:142:9: 142:10 (#0)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:142:9: 142:16 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:142:9: 142:10 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/seq_lib.rs:142:18: 142:19 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
      ) (Typ Bool)
     ) (@@ "pervasive/seq_lib.rs:142:24: 142:25 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:142:24: 142:25 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.") ((Typ TypParam "A")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:142:24: 142:25 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:142:26: 142:27 (#0)"
           (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) (@@ "pervasive/seq_lib.rs:142:31: 142:32 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:151:5: 151:76 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.push_distributes_over_add_broacast.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:151:53: 151:59 (#0)" (Param :name "a~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:151:61: 151:67 (#0)" (Param :name "b~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:151:69: 151:75 (#0)" (Param :name "elt~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:154:5: 154:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:153:9: 153:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:153:9: 153:24 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:153:9: 153:14 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:153:10: 153:11 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:153:12: 153:13 (#0)"
            (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq_lib.rs:153:20: 153:23 (#0)" (> Var "elt~6") (Typ TypParam "A")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/seq_lib.rs:153:28: 153:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:153:28: 153:29 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:153:30: 153:41 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
          ((@@ "pervasive/seq_lib.rs:153:30: 153:31 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:153:37: 153:40 (#0)"
            (> Var "elt~6") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:161:5: 161:55 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.contains.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:161:31: 161:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:161:37: 161:46 (#0)" (Param :name "needle~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:161:51: 161:55 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:161:56: 163:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:162:9: 162:15 (#0)" (> Quant (Exists
       :boxed_params true
      ) ((-> i~12 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:162:24: 162:51 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:162:24: 162:25 (#0)"
         (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:162:24: 162:25 (#0)" (> Const (Constant
              Int 0)
            ) (Typ Int (IntRange Nat))
           ) (@@ "pervasive/seq_lib.rs:162:29: 162:30 (#0)" (> Var "i~12") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:162:33: 162:43 (#0)"
            (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
             ((@@ "pervasive/seq_lib.rs:162:33: 162:37 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Int (IntRange Nat))))
         ) (Typ Bool)
        ) (@@ "pervasive/seq_lib.rs:162:47: 162:51 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:162:47: 162:51 (#0)"
           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
              IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:162:47: 162:51 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
              "pervasive/seq_lib.rs:162:52: 162:53 (#0)" (> Var "i~12") (Typ Int (IntRange Int))))
           ) (Typ TypParam "A")
          ) (@@ "pervasive/seq_lib.rs:162:58: 162:64 (#0)" (> Var "needle~4") (Typ TypParam "A"))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:165:5: 165:54 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.index_of.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:165:31: 165:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:165:37: 165:46 (#0)" (Param :name "needle~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:165:51: 165:54 (#0)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:165:55: 167:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:166:9: 166:15 (#0)" (> Choose :params
      (
       (-> i~12 (Typ Int (IntRange Int)))
      ) :cond (@@ "pervasive/seq_lib.rs:166:24: 166:51 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:166:24: 166:25 (#0)"
         (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:166:24: 166:25 (#0)" (> Const (Constant
              Int 0)
            ) (Typ Int (IntRange Nat))
           ) (@@ "pervasive/seq_lib.rs:166:29: 166:30 (#0)" (> Var "i~12") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:166:33: 166:43 (#0)"
            (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
             ((@@ "pervasive/seq_lib.rs:166:33: 166:37 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Int (IntRange Nat))))
         ) (Typ Bool)
        ) (@@ "pervasive/seq_lib.rs:166:47: 166:51 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:166:47: 166:51 (#0)"
           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
              IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:166:47: 166:51 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
              "pervasive/seq_lib.rs:166:52: 166:53 (#0)" (> Var "i~12") (Typ Int (IntRange Int))))
           ) (Typ TypParam "A")
          ) (@@ "pervasive/seq_lib.rs:166:58: 166:64 (#0)" (> Var "needle~4") (Typ TypParam "A"))
         ) (Typ Bool))
       ) (Typ Bool)
      ) :body (@@ "pervasive/seq_lib.rs:166:16: 166:22 (#0)" (> Var "i~12") (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:173:5: 173:47 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.drop_last.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:173:32: 173:36 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:173:41: 173:47 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:174:20: 174:24 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Ge)) (@@ "pervasive/seq_lib.rs:174:20: 174:30 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:174:20: 174:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq_lib.rs:174:34: 174:35 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:175:5: 177:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:176:9: 176:48 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq_lib.rs:176:9: 176:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
        "pervasive/seq_lib.rs:176:23: 176:24 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
       ) (@@ "pervasive/seq_lib.rs:176:26: 176:30 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:176:26: 176:36 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/seq_lib.rs:176:26: 176:30 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/seq_lib.rs:176:46: 176:47 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Int))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:179:5: 179:66 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.drop_last_distributes_over_add.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:179:49: 179:56 (#0)" (Param :name "a~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:179:58: 179:65 (#0)" (Param :name "b~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:184:5: 184:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:181:9: 181:10 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:181:9: 181:10 (#0)"
      (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq_lib.rs:181:13: 181:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:181:13: 181:14 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq_lib.rs:183:9: 183:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:183:9: 183:26 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:183:9: 183:14 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:183:10: 183:11 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:183:12: 183:13 (#0)"
            (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/seq_lib.rs:183:30: 183:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:183:30: 183:31 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:183:32: 183:45 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.") ((Typ TypParam "A")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:183:32: 183:33 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:184:5: 186:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:535:31: 535:33 (#732)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#732)" (Pattern
         Var :name "s1~67" :mutable false
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#732)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!seq_lib.check_argument_is_seq."
          ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:185:28: 185:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:185:28: 185:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:185:29: 185:30 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:185:31: 185:32 (#0)"
                 (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
     (@ "pervasive/seq_lib.rs:536:31: 536:33 (#732)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#732)" (Pattern
         Var :name "s2~83" :mutable false
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#732)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!seq_lib.check_argument_is_seq."
          ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:185:47: 185:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:185:47: 185:48 (#0)" (> Var "a~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@ "pervasive/seq_lib.rs:185:49: 185:62 (#0)"
              (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.") ((Typ TypParam "A")) () (AutospecUsage
                 IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:185:49: 185:50 (#0)" (> Var "b~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
     (@ "pervasive/seq_lib.rs:537:9: 545:11 (#732)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#732)" (> AssertBy :vars ()
         :require (
          @@
          "pervasive/seq_lib.rs:537:9: 545:11 (#732)"
          (> Const (Constant Bool true))
          (Typ Bool)
         ) :ensure (
          @@
          "pervasive/seq_lib.rs:537:30: 537:54 (#732)"
          (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#732)" (> Var "s1~67") (Typ Datatype "vstd!seq.Seq."
             ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#732)" (> Var "s2~83") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
          (Typ Bool)
         ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#732)" (> Block (
            (@ "pervasive/seq_lib.rs:538:13: 538:53 (#732)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#732)" (> AssertAssume :is_assume
                false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#732)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#732)"
                   (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                    ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#732)" (> Var "s1~67") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Int (IntRange Nat))
                  ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#732)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#732)" (> Var "s2~83") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Int (IntRange Nat)))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
            (@ "pervasive/seq_lib.rs:539:13: 543:15 (#732)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#732)" (> AssertBy :vars
                ((-> idx~121 (Typ Int (IntRange Int)))) :require (
                 @@
                 "pervasive/seq_lib.rs:532:47: 540:74 (#732)"
                 (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#732)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                    (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#732)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#731)"
                     (> Var "idx~121") (Typ Int (IntRange Int)))
                   ) (Typ Bool)
                  ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#731)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#731)"
                     (> Var "idx~121") (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#732)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#732)" (> Var "s1~67") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Int (IntRange Nat)))
                   ) (Typ Bool)))
                 (Typ Bool)
                ) :ensure (
                 @@
                 "pervasive/seq_lib.rs:541:36: 541:84 (#732)"
                 (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#732)" (> Call (CallTarget Fun (CallTargetKind Static)
                     (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#732)" (> Var "s1~67") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                      @@ "pervasive/seq_lib.rs:541:62: 541:66 (#732)" (> Var "idx~121") (Typ Int (IntRange Int))))
                   ) (Typ TypParam "A")
                  ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#732)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#732)" (> Var "s2~83") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                      @@ "pervasive/seq_lib.rs:541:78: 541:82 (#732)" (> Var "idx~121") (Typ Int (IntRange Int))))
                   ) (Typ TypParam "A")))
                 (Typ Bool)
                ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#732)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#732)" (> Block
                    () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#732)" (> Block () None) (Typ Tuple ()))
                   ) (Typ Tuple ()))
                 ) (Typ Tuple ())
                ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#732)" (> Quant (Forall :boxed_params true) ((-> idx~121 (Typ Int (IntRange
                      Int)))
                  ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#732)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#732)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#732)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#732)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#731)"
                         (> Var "idx~121") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#731)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#731)"
                         (> Var "idx~121") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#732)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#732)" (> Var "s1~67") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool))
                     ) (Typ Bool)
                    ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#732)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#732)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#732)" (> Var "s1~67") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                          "pervasive/seq_lib.rs:541:62: 541:66 (#732)" (> Var "idx~121") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#732)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#732)" (> Var "s2~83") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                          @@ "pervasive/seq_lib.rs:541:78: 541:82 (#732)" (> Var "idx~121") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A"))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
            (@ "pervasive/seq_lib.rs:544:13: 544:61 (#732)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#732)" (> AssertAssume :is_assume
                false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#732)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                    ((Typ TypParam "A")))
                  ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#732)" (> Var "s1~67") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                   @@ "pervasive/seq_lib.rs:544:57: 544:59 (#732)" (> Var "s2~83") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ())
         ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#732)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#732)"
            (> Const (Constant Bool true)) (Typ Bool)
           ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#732)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#732)"
              (> Var "s1~67") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
             ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#732)" (> Var "s2~83") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:189:5: 189:49 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.no_duplicates.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:189:36: 189:40 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:189:45: 189:49 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:189:50: 192:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:190:9: 190:15 (#0)" (> Quant (Forall
       :boxed_params true
      ) ((-> i~10 (Typ Int (IntRange Int))) (-> j~12 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:190:22: 190:23 (#0)" (
        > Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:190:22: 190:69 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:190:22: 190:46 (#0)"
           (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:190:22: 190:23 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp
                 Lt))
              ) ((@@ "pervasive/seq_lib.rs:190:22: 190:23 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:190:27: 190:28 (#0)"
                (> Var "i~10") (Typ Int (IntRange Int))
               ) (@@ "pervasive/seq_lib.rs:190:31: 190:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:190:31: 190:35 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                ) (Typ Int (IntRange Nat))))
             ) (Typ Bool)
            ) (@@ "pervasive/seq_lib.rs:190:45: 190:46 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:190:45: 190:46 (#0)"
                (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
               ) (@@ "pervasive/seq_lib.rs:190:50: 190:51 (#0)" (> Var "j~12") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:190:54: 190:64 (#0)"
                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                 ((@@ "pervasive/seq_lib.rs:190:54: 190:58 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                ) (Typ Int (IntRange Nat))))
             ) (Typ Bool))
           ) (Typ Bool)
          ) (@@ "pervasive/seq_lib.rs:190:68: 190:69 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/seq_lib.rs:190:68: 190:69 (#0)" (> Binary
              (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:190:68: 190:69 (#0)" (> Var "i~10") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:190:73: 190:74 (#0)"
               (> Var "j~12") (Typ Int (IntRange Int)))
             ) (Typ Bool))
           ) (Typ Bool))
         ) (Typ Bool)
        ) (@@ "pervasive/seq_lib.rs:191:17: 191:21 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/seq_lib.rs:191:17: 191:21 (#0)" (> Binary
            (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:191:17: 191:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
                "vstd!seq.impl&%0.spec_index."
               ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:191:17: 191:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                "pervasive/seq_lib.rs:191:22: 191:23 (#0)" (> Var "i~10") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")
            ) (@@ "pervasive/seq_lib.rs:191:28: 191:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:191:28: 191:32 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                "pervasive/seq_lib.rs:191:33: 191:34 (#0)" (> Var "j~12") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A"))
           ) (Typ Bool))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:195:5: 195:57 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.disjoint.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:195:31: 195:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:195:37: 195:48 (#0)" (Param :name "other~4" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:195:53: 195:57 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:195:58: 197:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:196:9: 196:15 (#0)" (> Quant (Forall
       :boxed_params true
      ) ((-> i~12 (Typ Int (IntRange Int))) (-> j~14 (Typ Int (IntRange Int)))) (@@ "pervasive/seq_lib.rs:196:32: 196:33 (#0)" (
        > Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:196:32: 196:56 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:196:32: 196:33 (#0)"
           (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:196:32: 196:33 (#0)" (> Const (Constant
                Int 0)
              ) (Typ Int (IntRange Nat))
             ) (@@ "pervasive/seq_lib.rs:196:37: 196:38 (#0)" (> Var "i~12") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:196:41: 196:51 (#0)"
              (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
               ((@@ "pervasive/seq_lib.rs:196:41: 196:45 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              ) (Typ Int (IntRange Nat))))
           ) (Typ Bool)
          ) (@@ "pervasive/seq_lib.rs:196:55: 196:56 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:196:55: 196:56 (#0)"
              (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
             ) (@@ "pervasive/seq_lib.rs:196:60: 196:61 (#0)" (> Var "j~14") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:196:64: 196:75 (#0)"
              (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
               ((@@ "pervasive/seq_lib.rs:196:64: 196:69 (#0)" (> Var "other~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              ) (Typ Int (IntRange Nat))))
           ) (Typ Bool))
         ) (Typ Bool)
        ) (@@ "pervasive/seq_lib.rs:196:80: 196:84 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/seq_lib.rs:196:80: 196:84 (#0)" (> Binary
            (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:196:80: 196:84 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
                "vstd!seq.impl&%0.spec_index."
               ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:196:80: 196:84 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                "pervasive/seq_lib.rs:196:85: 196:86 (#0)" (> Var "i~12") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A")
            ) (@@ "pervasive/seq_lib.rs:196:91: 196:96 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/seq_lib.rs:196:91: 196:96 (#0)" (> Var "other~4") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (
                @@ "pervasive/seq_lib.rs:196:97: 196:98 (#0)" (> Var "j~14") (Typ Int (IntRange Int))))
             ) (Typ TypParam "A"))
           ) (Typ Bool))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:200:5: 200:44 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.to_set.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:200:29: 200:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:200:38: 200:44 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:200:45: 202:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:201:9: 201:42 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.") ((Typ TypParam "A") (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
       ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq_lib.rs:201:18: 201:41 (#0)" (> Closure ((-> a~15 (Typ TypParam "A"))) (@@ "pervasive/seq_lib.rs:201:25: 201:41 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
             IfMarked)
           ) ((@@ "pervasive/seq_lib.rs:201:25: 201:29 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
             "pervasive/seq_lib.rs:201:39: 201:40 (#0)" (> Var "a~15") (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:205:5: 205:57 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.insert.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:205:29: 205:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:205:35: 205:41 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq_lib.rs:205:43: 205:46 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:205:51: 205:57 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:206:20: 206:21 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Le))) ((@@ "pervasive/seq_lib.rs:206:20: 206:21 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq_lib.rs:206:25: 206:26 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:206:30: 206:40 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq_lib.rs:206:30: 206:34 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:207:5: 209:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:208:9: 208:13 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq_lib.rs:208:9: 208:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:208:9: 208:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:208:9: 208:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
              "pervasive/seq_lib.rs:208:23: 208:24 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
             ) (@@ "pervasive/seq_lib.rs:208:26: 208:27 (#0)" (> Var "i~4") (Typ Int (IntRange Int))))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
          ) (@@ "pervasive/seq_lib.rs:208:34: 208:35 (#0)" (> Var "a~6") (Typ TypParam "A")))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) (@@ "pervasive/seq_lib.rs:208:39: 208:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:208:39: 208:43 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
           "pervasive/seq_lib.rs:208:53: 208:54 (#0)" (> Var "i~4") (Typ Int (IntRange Int))
          ) (@@ "pervasive/seq_lib.rs:208:56: 208:66 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:208:56: 208:60 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Int (IntRange Nat))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:212:5: 212:52 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.remove.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:212:29: 212:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:212:35: 212:41 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:212:46: 212:52 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:213:20: 213:21 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:213:20: 213:21 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq_lib.rs:213:25: 213:26 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:213:29: 213:39 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq_lib.rs:213:29: 213:33 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:214:5: 216:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:215:9: 215:13 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/seq_lib.rs:215:9: 215:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:215:9: 215:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
           "pervasive/seq_lib.rs:215:23: 215:24 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
          ) (@@ "pervasive/seq_lib.rs:215:26: 215:27 (#0)" (> Var "i~4") (Typ Int (IntRange Int))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) (@@ "pervasive/seq_lib.rs:215:31: 215:70 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:215:31: 215:35 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
           "pervasive/seq_lib.rs:215:45: 215:46 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/seq_lib.rs:215:45: 215:46 (#0)"
             (> Var "i~4") (Typ Int (IntRange Int))
            ) (@@ "pervasive/seq_lib.rs:215:49: 215:50 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/seq_lib.rs:215:52: 215:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:215:52: 215:56 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Int (IntRange Nat))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:224:5: 224:79 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.fold_left.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:224:35: 224:39 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:224:41: 224:45 (#0)" (Param :name "b~4" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq_lib.rs:224:47: 224:56 (#0)" (Param :name "f~6" :typ (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:224:78: 224:79 (#0)" (Param :name "%return" :typ (Typ TypParam "B") :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease ((@@ "pervasive/seq_lib.rs:225:19: 225:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
      (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:225:19: 225:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish true
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:226:5: 232:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:227:9: 231:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:227:12: 227:16 (#0)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:227:12: 227:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (
            Fun :path "vstd!seq.Seq.len."
           ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:227:12: 227:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:227:26: 227:27 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:227:28: 229:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:228:13: 228:14 (#0)" (> Var "b~4") (Typ
          TypParam "B"))
       ) (Typ TypParam "B")
      ) (@@ "pervasive/seq_lib.rs:229:16: 231:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:230:13: 230:61 (#0)" (> Call (CallTarget
           FnSpec (@@ "pervasive/seq_lib.rs:230:13: 230:14 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ
              TypParam "B")))
          ) ((@@ "pervasive/seq_lib.rs:230:15: 230:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left.")
              ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:230:15: 230:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:230:15: 230:19 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:230:42: 230:43 (#0)" (> Var "b~4") (Typ TypParam "B")) (@@ "pervasive/seq_lib.rs:230:45: 230:46 (#0)"
               (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam "B"))))
            ) (Typ TypParam "B")
           ) (@@ "pervasive/seq_lib.rs:230:49: 230:60 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:230:49: 230:53 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ TypParam "A")))
         ) (Typ TypParam "B"))
       ) (Typ TypParam "B"))
     ) (Typ TypParam "B"))
   ) (Typ TypParam "B")
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:237:5: 237:83 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:237:39: 237:43 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:237:45: 237:49 (#0)" (Param :name "b~4" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq_lib.rs:237:51: 237:60 (#0)" (Param :name "f~6" :typ (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:237:82: 237:83 (#0)" (Param :name "%return" :typ (Typ TypParam "B") :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease ((@@ "pervasive/seq_lib.rs:238:19: 238:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
      (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:238:19: 238:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish true
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:239:5: 245:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:240:9: 244:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:240:12: 240:16 (#0)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:240:12: 240:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (
            Fun :path "vstd!seq.Seq.len."
           ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:240:12: 240:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:240:26: 240:27 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:240:28: 242:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:241:13: 241:14 (#0)" (> Var "b~4") (Typ
          TypParam "B"))
       ) (Typ TypParam "B")
      ) (@@ "pervasive/seq_lib.rs:242:16: 244:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:243:13: 243:80 (#0)" (> Call (CallTarget
           Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.") ((Typ TypParam "A") (Typ TypParam "B")) ()
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:243:13: 243:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:243:13: 243:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
               "pervasive/seq_lib.rs:243:27: 243:28 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
              ) (@@ "pervasive/seq_lib.rs:243:30: 243:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:243:30: 243:34 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Int (IntRange Nat))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:243:63: 243:76 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:243:63: 243:64 (#0)" (>
                Var "f~6"
               ) (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam "B")))
             ) ((@@ "pervasive/seq_lib.rs:243:65: 243:66 (#0)" (> Var "b~4") (Typ TypParam "B")) (@@ "pervasive/seq_lib.rs:243:68: 243:72 (#0)"
               (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                  IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:243:68: 243:72 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:243:73: 243:74 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
               ) (Typ TypParam "A")))
            ) (Typ TypParam "B")
           ) (@@ "pervasive/seq_lib.rs:243:78: 243:79 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
              "B"))))
         ) (Typ TypParam "B"))
       ) (Typ TypParam "B"))
     ) (Typ TypParam "B"))
   ) (Typ TypParam "B")
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:248:11: 248:82 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.aux_lemma_fold_left_alt.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to "vstd!seq_lib."
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:248:41: 248:45 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:248:47: 248:51 (#0)" (Param :name "b~4" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq_lib.rs:248:53: 248:62 (#0)" (Param :name "f~6" :typ (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:248:75: 248:81 (#0)" (Param :name "k~8" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:256:5: 256:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:249:18: 249:19 (#0)" (> Multi (MultiOp Chained ((InequalityOp Lt) (InequalityOp Le))) ((@@ "pervasive/seq_lib.rs:249:18: 249:19 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq_lib.rs:249:22: 249:23 (#0)" (> Var "k~8") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:249:27: 249:37 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq_lib.rs:249:27: 249:31 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq_lib.rs:251:11: 251:15 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:251:11: 253:62 (#0)" (
       > Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.") ((Typ TypParam "A") (Typ TypParam
          "B")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:251:11: 251:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:251:11: 251:15 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
            "pervasive/seq_lib.rs:251:25: 251:26 (#0)" (> Var "k~8") (Typ Int (IntRange Int))
           ) (@@ "pervasive/seq_lib.rs:251:28: 251:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:251:28: 251:32 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Int (IntRange Nat))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq_lib.rs:253:19: 253:58 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.")
           ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:253:19: 253:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:253:19: 253:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
               "pervasive/seq_lib.rs:253:33: 253:34 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
              ) (@@ "pervasive/seq_lib.rs:253:36: 253:37 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:253:53: 253:54 (#0)" (> Var "b~4") (Typ TypParam "B")) (@@ "pervasive/seq_lib.rs:253:56: 253:57 (#0)"
            (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam "B"))))
         ) (Typ TypParam "B")
        ) (@@ "pervasive/seq_lib.rs:253:60: 253:61 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
           "B"))))
      ) (Typ TypParam "B")
     ) (@@ "pervasive/seq_lib.rs:254:11: 254:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.")
        ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:254:11: 254:15 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
         "pervasive/seq_lib.rs:254:30: 254:31 (#0)" (> Var "b~4") (Typ TypParam "B")
        ) (@@ "pervasive/seq_lib.rs:254:33: 254:34 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
           "B"))))
      ) (Typ TypParam "B"))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:255:19: 255:20 (#0)" (> Var "k~8") (Typ Int (IntRange Int)))) :decrease_when None
  :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None :attrs (FunctionAttrs
   :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err None :autospec
   None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover
   false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:256:5: 276:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:257:9: 257:54 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:257:9: 257:54 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.")
         2
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/seq_lib.rs:258:9: 275:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:258:12: 258:13 (#0)" (> Binary (BinaryOp Eq Spec)
        (@@ "pervasive/seq_lib.rs:258:12: 258:13 (#0)" (> Var "k~8") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:258:17: 258:18 (#0)"
         (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:258:19: 260:10 (#0)" (> Block () None) (Typ Tuple ())) (@@ "pervasive/seq_lib.rs:260:16: 275:10 (#0)"
       (> Block (
         (@ "pervasive/seq_lib.rs:261:13: 261:97 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:261:13: 261:97 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.aux_lemma_fold_left_alt.") ((Typ TypParam "A") (Typ TypParam "B"))
              () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:261:13: 261:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:261:13: 261:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:261:27: 261:28 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:261:30: 261:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:261:30: 261:34 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:261:73: 261:86 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:261:73: 261:74 (#0)" (>
                   Var "f~6"
                  ) (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam "B")))
                ) ((@@ "pervasive/seq_lib.rs:261:75: 261:76 (#0)" (> Var "b~4") (Typ TypParam "B")) (@@ "pervasive/seq_lib.rs:261:78: 261:82 (#0)"
                  (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage
                     IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:261:78: 261:82 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:261:83: 261:84 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
                  ) (Typ TypParam "A")))
               ) (Typ TypParam "B")
              ) (@@ "pervasive/seq_lib.rs:261:88: 261:89 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
                 "B"))
              ) (@@ "pervasive/seq_lib.rs:261:91: 261:92 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:261:91: 261:92 (#0)"
                 (> Var "k~8") (Typ Int (IntRange Int))
                ) (@@ "pervasive/seq_lib.rs:261:95: 261:96 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
               ) (Typ Int (IntRange Int))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:535:31: 535:33 (#723)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#723)" (Pattern
             Var :name "s1~276" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#723)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:263:17: 264:87 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:263:17: 263:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:263:17: 263:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:263:31: 263:32 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:263:34: 263:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:263:34: 263:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Int (IntRange Nat))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:264:31: 264:32 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:264:31: 264:32 (#0)"
                    (> Var "k~8") (Typ Int (IntRange Int))
                   ) (@@ "pervasive/seq_lib.rs:264:35: 264:36 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:264:38: 264:79 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:264:38: 264:73 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:264:38: 264:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                        "pervasive/seq_lib.rs:264:52: 264:53 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                       ) (@@ "pervasive/seq_lib.rs:264:55: 264:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                         ) ((@@ "pervasive/seq_lib.rs:264:55: 264:59 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                        ) (Typ Int (IntRange Nat))))
                     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:536:31: 536:33 (#723)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#723)" (Pattern
             Var :name "s2~302" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#723)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:265:17: 265:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:265:17: 265:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:265:31: 265:32 (#0)" (> Var "k~8") (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:265:34: 265:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:265:34: 265:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:537:9: 545:11 (#723)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#723)" (> AssertBy :vars ()
             :require (
              @@
              "pervasive/seq_lib.rs:537:9: 545:11 (#723)"
              (> Const (Constant Bool true))
              (Typ Bool)
             ) :ensure (
              @@
              "pervasive/seq_lib.rs:537:30: 537:54 (#723)"
              (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#723)" (> Var "s1~276") (Typ Datatype "vstd!seq.Seq."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#723)" (> Var "s2~302") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              (Typ Bool)
             ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#723)" (> Block (
                (@ "pervasive/seq_lib.rs:538:13: 538:53 (#723)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#723)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#723)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#723)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#723)" (> Var "s1~276") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#723)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#723)" (> Var "s2~302") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat)))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:539:13: 543:15 (#723)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#723)" (> AssertBy :vars
                    ((-> idx~340 (Typ Int (IntRange Int)))) :require (
                     @@
                     "pervasive/seq_lib.rs:532:47: 540:74 (#723)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#723)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#723)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#722)"
                         (> Var "idx~340") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#722)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#722)"
                         (> Var "idx~340") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#723)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#723)" (> Var "s1~276") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool)))
                     (Typ Bool)
                    ) :ensure (
                     @@
                     "pervasive/seq_lib.rs:541:36: 541:84 (#723)"
                     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#723)" (> Call (CallTarget Fun (CallTargetKind Static)
                         (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#723)" (> Var "s1~276") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#723)" (> Var "idx~340") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#723)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#723)" (> Var "s2~302") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#723)" (> Var "idx~340") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")))
                     (Typ Bool)
                    ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#723)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#723)" (> Block
                        () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#723)" (> Block () None) (Typ Tuple ()))
                       ) (Typ Tuple ()))
                     ) (Typ Tuple ())
                    ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#723)" (> Quant (Forall :boxed_params true) ((-> idx~340 (Typ Int (IntRange
                          Int)))
                      ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#723)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#723)"
                         (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#723)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                            (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#723)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#722)"
                             (> Var "idx~340") (Typ Int (IntRange Int)))
                           ) (Typ Bool)
                          ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#722)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#722)"
                             (> Var "idx~340") (Typ Int (IntRange Int))
                            ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#723)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#723)" (> Var "s1~276") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                             ) (Typ Int (IntRange Nat)))
                           ) (Typ Bool))
                         ) (Typ Bool)
                        ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#723)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#723)"
                           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                            ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#723)" (> Var "s1~276") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                              "pervasive/seq_lib.rs:541:62: 541:66 (#723)" (> Var "idx~340") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A")
                          ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#723)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#723)" (> Var "s2~302") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                             (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#723)" (> Var "idx~340") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A"))
                         ) (Typ Bool))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:544:13: 544:61 (#723)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#723)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#723)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                        ((Typ TypParam "A")))
                      ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#723)" (> Var "s1~276") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                      (@@ "pervasive/seq_lib.rs:544:57: 544:59 (#723)" (> Var "s2~302") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ())
             ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#723)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#723)"
                (> Const (Constant Bool true)) (Typ Bool)
               ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#723)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#723)"
                  (> Var "s1~276") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#723)" (> Var "s2~302") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:535:31: 535:33 (#713)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#713)" (Pattern
             Var :name "s1~464" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#713)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:268:17: 268:71 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:268:17: 268:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:268:17: 268:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:268:31: 268:32 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:268:34: 268:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:268:34: 268:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Int (IntRange Nat))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:268:62: 268:63 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:268:65: 268:66 (#0)"
                  (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:268:65: 268:66 (#0)" (> Var "k~8") (Typ Int (IntRange
                      Int))
                   ) (@@ "pervasive/seq_lib.rs:268:69: 268:70 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:536:31: 536:33 (#713)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#713)" (Pattern
             Var :name "s2~484" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#713)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:269:17: 269:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:269:17: 269:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:269:31: 269:32 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:269:34: 269:35 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:537:9: 545:11 (#713)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#713)" (> AssertBy :vars ()
             :require (
              @@
              "pervasive/seq_lib.rs:537:9: 545:11 (#713)"
              (> Const (Constant Bool true))
              (Typ Bool)
             ) :ensure (
              @@
              "pervasive/seq_lib.rs:537:30: 537:54 (#713)"
              (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#713)" (> Var "s1~464") (Typ Datatype "vstd!seq.Seq."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#713)" (> Var "s2~484") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              (Typ Bool)
             ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#713)" (> Block (
                (@ "pervasive/seq_lib.rs:538:13: 538:53 (#713)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#713)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#713)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#713)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#713)" (> Var "s1~464") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#713)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#713)" (> Var "s2~484") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat)))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:539:13: 543:15 (#713)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#713)" (> AssertBy :vars
                    ((-> idx~522 (Typ Int (IntRange Int)))) :require (
                     @@
                     "pervasive/seq_lib.rs:532:47: 540:74 (#713)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#713)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#713)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#712)"
                         (> Var "idx~522") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#712)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#712)"
                         (> Var "idx~522") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#713)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#713)" (> Var "s1~464") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool)))
                     (Typ Bool)
                    ) :ensure (
                     @@
                     "pervasive/seq_lib.rs:541:36: 541:84 (#713)"
                     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#713)" (> Call (CallTarget Fun (CallTargetKind Static)
                         (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#713)" (> Var "s1~464") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#713)" (> Var "idx~522") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#713)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#713)" (> Var "s2~484") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#713)" (> Var "idx~522") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")))
                     (Typ Bool)
                    ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#713)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#713)" (> Block
                        () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#713)" (> Block () None) (Typ Tuple ()))
                       ) (Typ Tuple ()))
                     ) (Typ Tuple ())
                    ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#713)" (> Quant (Forall :boxed_params true) ((-> idx~522 (Typ Int (IntRange
                          Int)))
                      ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#713)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#713)"
                         (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#713)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                            (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#713)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#712)"
                             (> Var "idx~522") (Typ Int (IntRange Int)))
                           ) (Typ Bool)
                          ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#712)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#712)"
                             (> Var "idx~522") (Typ Int (IntRange Int))
                            ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#713)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#713)" (> Var "s1~464") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                             ) (Typ Int (IntRange Nat)))
                           ) (Typ Bool))
                         ) (Typ Bool)
                        ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#713)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#713)"
                           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                            ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#713)" (> Var "s1~464") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                              "pervasive/seq_lib.rs:541:62: 541:66 (#713)" (> Var "idx~522") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A")
                          ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#713)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#713)" (> Var "s2~484") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                             (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#713)" (> Var "idx~522") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A"))
                         ) (Typ Bool))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:544:13: 544:61 (#713)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#713)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#713)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                        ((Typ TypParam "A")))
                      ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#713)" (> Var "s1~464") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                      (@@ "pervasive/seq_lib.rs:544:57: 544:59 (#713)" (> Var "s2~484") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ())
             ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#713)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#713)"
                (> Const (Constant Bool true)) (Typ Bool)
               ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#713)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#713)"
                  (> Var "s1~464") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#713)" (> Var "s2~484") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:535:31: 535:33 (#703)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#703)" (Pattern
             Var :name "s1~648" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#703)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:272:17: 272:82 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:272:17: 272:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:272:17: 272:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:272:31: 272:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:272:34: 272:35 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:272:46: 272:47 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:272:49: 272:74 (#0)"
                  (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                   ((@@ "pervasive/seq_lib.rs:272:49: 272:68 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:272:49: 272:53 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                        "pervasive/seq_lib.rs:272:63: 272:64 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                       ) (@@ "pervasive/seq_lib.rs:272:66: 272:67 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
                     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:536:31: 536:33 (#703)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#703)" (Pattern
             Var :name "s2~668" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#703)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:273:17: 273:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:273:17: 273:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:273:31: 273:32 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:273:34: 273:35 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:537:9: 545:11 (#703)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#703)" (> AssertBy :vars ()
             :require (
              @@
              "pervasive/seq_lib.rs:537:9: 545:11 (#703)"
              (> Const (Constant Bool true))
              (Typ Bool)
             ) :ensure (
              @@
              "pervasive/seq_lib.rs:537:30: 537:54 (#703)"
              (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#703)" (> Var "s1~648") (Typ Datatype "vstd!seq.Seq."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#703)" (> Var "s2~668") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              (Typ Bool)
             ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#703)" (> Block (
                (@ "pervasive/seq_lib.rs:538:13: 538:53 (#703)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#703)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#703)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#703)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#703)" (> Var "s1~648") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#703)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#703)" (> Var "s2~668") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat)))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:539:13: 543:15 (#703)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#703)" (> AssertBy :vars
                    ((-> idx~706 (Typ Int (IntRange Int)))) :require (
                     @@
                     "pervasive/seq_lib.rs:532:47: 540:74 (#703)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#703)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#703)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#702)"
                         (> Var "idx~706") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#702)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#702)"
                         (> Var "idx~706") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#703)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#703)" (> Var "s1~648") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool)))
                     (Typ Bool)
                    ) :ensure (
                     @@
                     "pervasive/seq_lib.rs:541:36: 541:84 (#703)"
                     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#703)" (> Call (CallTarget Fun (CallTargetKind Static)
                         (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#703)" (> Var "s1~648") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#703)" (> Var "idx~706") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#703)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#703)" (> Var "s2~668") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#703)" (> Var "idx~706") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")))
                     (Typ Bool)
                    ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#703)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#703)" (> Block
                        () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#703)" (> Block () None) (Typ Tuple ()))
                       ) (Typ Tuple ()))
                     ) (Typ Tuple ())
                    ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#703)" (> Quant (Forall :boxed_params true) ((-> idx~706 (Typ Int (IntRange
                          Int)))
                      ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#703)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#703)"
                         (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#703)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                            (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#703)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#702)"
                             (> Var "idx~706") (Typ Int (IntRange Int)))
                           ) (Typ Bool)
                          ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#702)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#702)"
                             (> Var "idx~706") (Typ Int (IntRange Int))
                            ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#703)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#703)" (> Var "s1~648") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                             ) (Typ Int (IntRange Nat)))
                           ) (Typ Bool))
                         ) (Typ Bool)
                        ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#703)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#703)"
                           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                            ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#703)" (> Var "s1~648") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                              "pervasive/seq_lib.rs:541:62: 541:66 (#703)" (> Var "idx~706") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A")
                          ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#703)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#703)" (> Var "s2~668") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                             (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#703)" (> Var "idx~706") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A"))
                         ) (Typ Bool))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:544:13: 544:61 (#703)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#703)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#703)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                        ((Typ TypParam "A")))
                      ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#703)" (> Var "s1~648") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                      (@@ "pervasive/seq_lib.rs:544:57: 544:59 (#703)" (> Var "s2~668") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ())
             ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#703)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#703)"
                (> Const (Constant Bool true)) (Typ Bool)
               ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#703)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#703)"
                  (> Var "s1~648") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#703)" (> Var "s2~668") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:279:5: 279:74 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.lemma_fold_left_alt.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:279:41: 279:45 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:279:47: 279:51 (#0)" (Param :name "b~4" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq_lib.rs:279:53: 279:62 (#0)" (Param :name "f~6" :typ (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:282:5: 282:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:280:17: 280:21 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:280:17: 280:37 (#0)" (
       > Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left.") ((Typ TypParam "A") (Typ TypParam
          "B")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:280:17: 280:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
         "pervasive/seq_lib.rs:280:32: 280:33 (#0)" (> Var "b~4") (Typ TypParam "B")
        ) (@@ "pervasive/seq_lib.rs:280:35: 280:36 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
           "B"))))
      ) (Typ TypParam "B")
     ) (@@ "pervasive/seq_lib.rs:280:41: 280:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.")
        ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:280:41: 280:45 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
         "pervasive/seq_lib.rs:280:60: 280:61 (#0)" (> Var "b~4") (Typ TypParam "B")
        ) (@@ "pervasive/seq_lib.rs:280:63: 280:64 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
           "B"))))
      ) (Typ TypParam "B"))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:281:19: 281:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:281:19: 281:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:282:5: 293:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:283:9: 283:50 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:283:9: 283:50 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.fold_left.")
         2
        ) (Typ Tuple ()))))
     (@ "pervasive/seq_lib.rs:284:9: 284:54 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:284:9: 284:54 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.")
         2
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/seq_lib.rs:285:9: 292:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:285:12: 285:16 (#0)" (> Binary (BinaryOp Inequality
         (InequalityOp Le)
        ) (@@ "pervasive/seq_lib.rs:285:12: 285:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:285:12: 285:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:285:26: 285:27 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:285:28: 287:10 (#0)" (> Block () None) (Typ Tuple ())) (@@ "pervasive/seq_lib.rs:287:16: 292:10 (#0)"
       (> Block (
         (@ "pervasive/seq_lib.rs:288:13: 288:63 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:288:13: 288:63 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.aux_lemma_fold_left_alt.") ((Typ TypParam "A") (Typ TypParam "B"))
              () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:288:13: 288:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
               "pervasive/seq_lib.rs:288:42: 288:43 (#0)" (> Var "b~4") (Typ TypParam "B")
              ) (@@ "pervasive/seq_lib.rs:288:45: 288:46 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
                 "B"))
              ) (@@ "pervasive/seq_lib.rs:288:48: 288:52 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:288:48: 288:58 (#0)"
                 (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                  ((@@ "pervasive/seq_lib.rs:288:48: 288:52 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                 ) (Typ Int (IntRange Nat))
                ) (@@ "pervasive/seq_lib.rs:288:61: 288:62 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
               ) (Typ Int (IntRange Int))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:289:13: 290:78 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:289:13: 290:78 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.lemma_fold_left_alt.") ((Typ TypParam "A") (Typ TypParam "B")) ()
              (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:289:13: 289:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:289:13: 289:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:289:27: 289:31 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:289:27: 289:37 (#0)"
                    (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                     ((@@ "pervasive/seq_lib.rs:289:27: 289:31 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                    ) (Typ Int (IntRange Nat))
                   ) (@@ "pervasive/seq_lib.rs:289:40: 289:41 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:289:43: 289:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:289:43: 289:47 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:290:38: 290:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_left_alt.")
                 ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:290:38: 290:54 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:290:38: 290:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:290:69: 290:70 (#0)" (> Var "b~4") (Typ TypParam "B")) (@@ "pervasive/seq_lib.rs:290:72: 290:73 (#0)"
                  (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam "B"))))
               ) (Typ TypParam "B")
              ) (@@ "pervasive/seq_lib.rs:290:76: 290:77 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam
                 "B"))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:291:13: 291:71 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:291:13: 291:71 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.lemma_fold_left_alt.") ((Typ TypParam "A") (Typ TypParam "B")) ()
              (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:291:13: 291:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:291:13: 291:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:291:27: 291:28 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:291:30: 291:34 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:291:30: 291:40 (#0)"
                    (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                     ((@@ "pervasive/seq_lib.rs:291:30: 291:34 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                    ) (Typ Int (IntRange Nat))
                   ) (@@ "pervasive/seq_lib.rs:291:43: 291:44 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:291:66: 291:67 (#0)" (> Var "b~4") (Typ TypParam "B")) (@@ "pervasive/seq_lib.rs:291:69: 291:70 (#0)"
               (> Var "f~6") (Typ Lambda ((Typ TypParam "B") (Typ TypParam "A")) (Typ TypParam "B"))))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:301:5: 301:80 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.fold_right.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:301:36: 301:40 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:301:42: 301:51 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:301:64: 301:68 (#0)" (Param :name "b~6" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:301:79: 301:80 (#0)" (Param :name "%return" :typ (Typ TypParam "B") :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease ((@@ "pervasive/seq_lib.rs:302:19: 302:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
      (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:302:19: 302:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish true
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:303:5: 309:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:304:9: 308:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:304:12: 304:16 (#0)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:304:12: 304:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (
            Fun :path "vstd!seq.Seq.len."
           ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:304:12: 304:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:304:26: 304:27 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:304:28: 306:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:305:13: 305:14 (#0)" (> Var "b~6") (Typ
          TypParam "B"))
       ) (Typ TypParam "B")
      ) (@@ "pervasive/seq_lib.rs:306:16: 308:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:307:13: 307:62 (#0)" (> Call (CallTarget
           Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_right.") ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:307:13: 307:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:307:13: 307:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:307:41: 307:42 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
              "B"))
           ) (@@ "pervasive/seq_lib.rs:307:44: 307:61 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:307:44: 307:45 (#0)" (>
                Var "f~4"
               ) (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam "B")))
             ) ((@@ "pervasive/seq_lib.rs:307:46: 307:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:307:46: 307:50 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ TypParam "A")
              ) (@@ "pervasive/seq_lib.rs:307:59: 307:60 (#0)" (> Var "b~6") (Typ TypParam "B")))
            ) (Typ TypParam "B")))
         ) (Typ TypParam "B"))
       ) (Typ TypParam "B"))
     ) (Typ TypParam "B"))
   ) (Typ TypParam "B")
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:314:5: 314:84 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.fold_right_alt.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:314:40: 314:44 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:314:46: 314:55 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:314:68: 314:72 (#0)" (Param :name "b~6" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:314:83: 314:84 (#0)" (Param :name "%return" :typ (Typ TypParam "B") :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease ((@@ "pervasive/seq_lib.rs:315:19: 315:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
      (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:315:19: 315:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish true
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:316:5: 322:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:317:9: 321:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:317:12: 317:16 (#0)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:317:12: 317:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (
            Fun :path "vstd!seq.Seq.len."
           ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:317:12: 317:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:317:26: 317:27 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:317:28: 319:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:318:13: 318:14 (#0)" (> Var "b~6") (Typ
          TypParam "B"))
       ) (Typ TypParam "B")
      ) (@@ "pervasive/seq_lib.rs:319:16: 321:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:320:13: 320:81 (#0)" (> Call (CallTarget
           FnSpec (@@ "pervasive/seq_lib.rs:320:13: 320:14 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ
              TypParam "B")))
          ) ((@@ "pervasive/seq_lib.rs:320:15: 320:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_index.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:320:15: 320:19 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
               "pervasive/seq_lib.rs:320:20: 320:21 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
            ) (Typ TypParam "A")
           ) (@@ "pervasive/seq_lib.rs:320:24: 320:80 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_right_alt.")
              ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:320:24: 320:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:320:24: 320:28 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:320:38: 320:39 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:320:41: 320:51 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:320:41: 320:45 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:320:75: 320:76 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
                 "B"))
              ) (@@ "pervasive/seq_lib.rs:320:78: 320:79 (#0)" (> Var "b~6") (Typ TypParam "B")))
            ) (Typ TypParam "B")))
         ) (Typ TypParam "B"))
       ) (Typ TypParam "B"))
     ) (Typ TypParam "B"))
   ) (Typ TypParam "B")
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:325:11: 325:83 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.aux_lemma_fold_right_alt.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to "vstd!seq_lib."
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:325:42: 325:46 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:325:48: 325:57 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:325:70: 325:74 (#0)" (Param :name "b~6" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/seq_lib.rs:325:76: 325:82 (#0)" (Param :name "k~8" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:331:5: 331:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:326:18: 326:19 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/seq_lib.rs:326:18: 326:19 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/seq_lib.rs:326:23: 326:24 (#0)" (> Var "k~8") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:326:27: 326:37 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/seq_lib.rs:326:27: 326:31 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq_lib.rs:328:11: 328:15 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:328:11: 328:98 (#0)" (
       > Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_right.") ((Typ TypParam "A") (Typ TypParam
          "B")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:328:11: 328:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:328:11: 328:15 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
            "pervasive/seq_lib.rs:328:25: 328:26 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
           ) (@@ "pervasive/seq_lib.rs:328:28: 328:29 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/seq_lib.rs:328:42: 328:43 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
           "B"))
        ) (@@ "pervasive/seq_lib.rs:328:45: 328:97 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_right.")
           ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:328:45: 328:80 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:328:45: 328:49 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
               "pervasive/seq_lib.rs:328:59: 328:60 (#0)" (> Var "k~8") (Typ Int (IntRange Int))
              ) (@@ "pervasive/seq_lib.rs:328:62: 328:72 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:328:62: 328:66 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Int (IntRange Nat))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:328:92: 328:93 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
              "B"))
           ) (@@ "pervasive/seq_lib.rs:328:95: 328:96 (#0)" (> Var "b~6") (Typ TypParam "B")))
         ) (Typ TypParam "B")))
      ) (Typ TypParam "B")
     ) (@@ "pervasive/seq_lib.rs:329:11: 329:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_right.")
        ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:329:11: 329:15 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
         "pervasive/seq_lib.rs:329:27: 329:28 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
           "B"))
        ) (@@ "pervasive/seq_lib.rs:329:30: 329:31 (#0)" (> Var "b~6") (Typ TypParam "B")))
      ) (Typ TypParam "B"))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:330:19: 330:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:330:19: 330:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:331:5: 350:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:332:9: 332:51 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:332:9: 332:51 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.fold_right.")
         2
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/seq_lib.rs:333:9: 349:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:333:12: 333:13 (#0)" (> Binary (BinaryOp Eq Spec)
        (@@ "pervasive/seq_lib.rs:333:12: 333:13 (#0)" (> Var "k~8") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:333:17: 333:21 (#0)"
         (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:333:17: 333:27 (#0)" (> Call (CallTarget Fun (CallTargetKind
              Static
             ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:333:17: 333:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Int (IntRange Nat))
          ) (@@ "pervasive/seq_lib.rs:333:30: 333:31 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:333:32: 335:10 (#0)" (> Block () None) (Typ Tuple ())) (@@ "pervasive/seq_lib.rs:335:16: 349:10 (#0)"
       (> Block (
         (@ "pervasive/seq_lib.rs:336:13: 336:95 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:336:13: 336:95 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.aux_lemma_fold_right_alt.") ((Typ TypParam "A") (Typ TypParam "B"))
              () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:336:13: 336:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:336:13: 336:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:336:27: 336:28 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:336:30: 336:34 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:336:30: 336:40 (#0)"
                    (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                     ((@@ "pervasive/seq_lib.rs:336:30: 336:34 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                    ) (Typ Int (IntRange Nat))
                   ) (@@ "pervasive/seq_lib.rs:336:43: 336:44 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:336:71: 336:72 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
                 "B"))
              ) (@@ "pervasive/seq_lib.rs:336:74: 336:91 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/seq_lib.rs:336:74: 336:75 (#0)" (>
                   Var "f~4"
                  ) (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam "B")))
                ) ((@@ "pervasive/seq_lib.rs:336:76: 336:87 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:336:76: 336:80 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ TypParam "A")
                 ) (@@ "pervasive/seq_lib.rs:336:89: 336:90 (#0)" (> Var "b~6") (Typ TypParam "B")))
               ) (Typ TypParam "B")
              ) (@@ "pervasive/seq_lib.rs:336:93: 336:94 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:535:31: 535:33 (#693)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#693)" (Pattern
             Var :name "s1~236" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#693)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:338:17: 338:64 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:338:17: 338:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:338:17: 338:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:338:31: 338:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:338:34: 338:38 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:338:34: 338:44 (#0)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:338:34: 338:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:338:47: 338:48 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                     ) (Typ Int (IntRange Int))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:338:59: 338:60 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:338:62: 338:63 (#0)"
                  (> Var "k~8") (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:536:31: 536:33 (#693)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#693)" (Pattern
             Var :name "s2~256" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#693)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:339:17: 339:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:339:17: 339:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:339:31: 339:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:339:34: 339:35 (#0)" (> Var "k~8") (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:537:9: 545:11 (#693)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#693)" (> AssertBy :vars ()
             :require (
              @@
              "pervasive/seq_lib.rs:537:9: 545:11 (#693)"
              (> Const (Constant Bool true))
              (Typ Bool)
             ) :ensure (
              @@
              "pervasive/seq_lib.rs:537:30: 537:54 (#693)"
              (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#693)" (> Var "s1~236") (Typ Datatype "vstd!seq.Seq."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#693)" (> Var "s2~256") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              (Typ Bool)
             ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#693)" (> Block (
                (@ "pervasive/seq_lib.rs:538:13: 538:53 (#693)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#693)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#693)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#693)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#693)" (> Var "s1~236") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#693)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#693)" (> Var "s2~256") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat)))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:539:13: 543:15 (#693)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#693)" (> AssertBy :vars
                    ((-> idx~294 (Typ Int (IntRange Int)))) :require (
                     @@
                     "pervasive/seq_lib.rs:532:47: 540:74 (#693)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#693)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#693)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#692)"
                         (> Var "idx~294") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#692)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#692)"
                         (> Var "idx~294") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#693)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#693)" (> Var "s1~236") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool)))
                     (Typ Bool)
                    ) :ensure (
                     @@
                     "pervasive/seq_lib.rs:541:36: 541:84 (#693)"
                     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#693)" (> Call (CallTarget Fun (CallTargetKind Static)
                         (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#693)" (> Var "s1~236") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#693)" (> Var "idx~294") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#693)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#693)" (> Var "s2~256") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#693)" (> Var "idx~294") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")))
                     (Typ Bool)
                    ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#693)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#693)" (> Block
                        () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#693)" (> Block () None) (Typ Tuple ()))
                       ) (Typ Tuple ()))
                     ) (Typ Tuple ())
                    ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#693)" (> Quant (Forall :boxed_params true) ((-> idx~294 (Typ Int (IntRange
                          Int)))
                      ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#693)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#693)"
                         (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#693)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                            (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#693)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#692)"
                             (> Var "idx~294") (Typ Int (IntRange Int)))
                           ) (Typ Bool)
                          ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#692)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#692)"
                             (> Var "idx~294") (Typ Int (IntRange Int))
                            ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#693)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#693)" (> Var "s1~236") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                             ) (Typ Int (IntRange Nat)))
                           ) (Typ Bool))
                         ) (Typ Bool)
                        ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#693)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#693)"
                           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                            ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#693)" (> Var "s1~236") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                              "pervasive/seq_lib.rs:541:62: 541:66 (#693)" (> Var "idx~294") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A")
                          ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#693)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#693)" (> Var "s2~256") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                             (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#693)" (> Var "idx~294") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A"))
                         ) (Typ Bool))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:544:13: 544:61 (#693)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#693)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#693)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                        ((Typ TypParam "A")))
                      ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#693)" (> Var "s1~236") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                      (@@ "pervasive/seq_lib.rs:544:57: 544:59 (#693)" (> Var "s2~256") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ())
             ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#693)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#693)"
                (> Const (Constant Bool true)) (Typ Bool)
               ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#693)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#693)"
                  (> Var "s1~236") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#693)" (> Var "s2~256") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:535:31: 535:33 (#683)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#683)" (Pattern
             Var :name "s1~436" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#683)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:342:17: 342:108 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:342:17: 342:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:342:17: 342:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:342:31: 342:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:342:34: 342:38 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:342:34: 342:44 (#0)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:342:34: 342:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:342:47: 342:48 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                     ) (Typ Int (IntRange Int))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:342:59: 342:60 (#0)" (> Var "k~8") (Typ Int (IntRange Int))) (@@ "pervasive/seq_lib.rs:342:62: 342:100 (#0)"
                  (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                   ((@@ "pervasive/seq_lib.rs:342:62: 342:94 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:342:62: 342:66 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                        "pervasive/seq_lib.rs:342:76: 342:77 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))
                       ) (@@ "pervasive/seq_lib.rs:342:79: 342:83 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:342:79: 342:89 (#0)"
                          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                           ((@@ "pervasive/seq_lib.rs:342:79: 342:83 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                          ) (Typ Int (IntRange Nat))
                         ) (@@ "pervasive/seq_lib.rs:342:92: 342:93 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                        ) (Typ Int (IntRange Int))))
                     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:536:31: 536:33 (#683)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#683)" (Pattern
             Var :name "s2~462" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#683)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:343:17: 343:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:343:17: 343:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:343:31: 343:32 (#0)" (> Var "k~8") (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:343:34: 343:38 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:343:34: 343:44 (#0)"
                    (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                     ((@@ "pervasive/seq_lib.rs:343:34: 343:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                    ) (Typ Int (IntRange Nat))
                   ) (@@ "pervasive/seq_lib.rs:343:47: 343:48 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:537:9: 545:11 (#683)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#683)" (> AssertBy :vars ()
             :require (
              @@
              "pervasive/seq_lib.rs:537:9: 545:11 (#683)"
              (> Const (Constant Bool true))
              (Typ Bool)
             ) :ensure (
              @@
              "pervasive/seq_lib.rs:537:30: 537:54 (#683)"
              (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#683)" (> Var "s1~436") (Typ Datatype "vstd!seq.Seq."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#683)" (> Var "s2~462") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              (Typ Bool)
             ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#683)" (> Block (
                (@ "pervasive/seq_lib.rs:538:13: 538:53 (#683)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#683)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#683)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#683)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#683)" (> Var "s1~436") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#683)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#683)" (> Var "s2~462") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat)))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:539:13: 543:15 (#683)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#683)" (> AssertBy :vars
                    ((-> idx~500 (Typ Int (IntRange Int)))) :require (
                     @@
                     "pervasive/seq_lib.rs:532:47: 540:74 (#683)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#683)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#683)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#682)"
                         (> Var "idx~500") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#682)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#682)"
                         (> Var "idx~500") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#683)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#683)" (> Var "s1~436") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool)))
                     (Typ Bool)
                    ) :ensure (
                     @@
                     "pervasive/seq_lib.rs:541:36: 541:84 (#683)"
                     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#683)" (> Call (CallTarget Fun (CallTargetKind Static)
                         (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#683)" (> Var "s1~436") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#683)" (> Var "idx~500") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#683)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#683)" (> Var "s2~462") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#683)" (> Var "idx~500") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")))
                     (Typ Bool)
                    ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#683)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#683)" (> Block
                        () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#683)" (> Block () None) (Typ Tuple ()))
                       ) (Typ Tuple ()))
                     ) (Typ Tuple ())
                    ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#683)" (> Quant (Forall :boxed_params true) ((-> idx~500 (Typ Int (IntRange
                          Int)))
                      ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#683)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#683)"
                         (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#683)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                            (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#683)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#682)"
                             (> Var "idx~500") (Typ Int (IntRange Int)))
                           ) (Typ Bool)
                          ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#682)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#682)"
                             (> Var "idx~500") (Typ Int (IntRange Int))
                            ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#683)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#683)" (> Var "s1~436") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                             ) (Typ Int (IntRange Nat)))
                           ) (Typ Bool))
                         ) (Typ Bool)
                        ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#683)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#683)"
                           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                            ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#683)" (> Var "s1~436") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                              "pervasive/seq_lib.rs:541:62: 541:66 (#683)" (> Var "idx~500") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A")
                          ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#683)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#683)" (> Var "s2~462") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                             (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#683)" (> Var "idx~500") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A"))
                         ) (Typ Bool))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:544:13: 544:61 (#683)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#683)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#683)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                        ((Typ TypParam "A")))
                      ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#683)" (> Var "s1~436") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                      (@@ "pervasive/seq_lib.rs:544:57: 544:59 (#683)" (> Var "s2~462") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ())
             ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#683)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#683)"
                (> Const (Constant Bool true)) (Typ Bool)
               ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#683)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#683)"
                  (> Var "s1~436") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#683)" (> Var "s2~462") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:535:31: 535:33 (#673)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:535:31: 535:33 (#673)" (Pattern
             Var :name "s1~604" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:535:36: 535:79 (#673)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:346:17: 346:64 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:346:17: 346:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:346:17: 346:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                     "pervasive/seq_lib.rs:346:31: 346:32 (#0)" (> Var "k~8") (Typ Int (IntRange Int))
                    ) (@@ "pervasive/seq_lib.rs:346:34: 346:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:346:34: 346:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Int (IntRange Nat))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:536:31: 536:33 (#673)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:536:31: 536:33 (#673)" (Pattern
             Var :name "s2~630" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:536:36: 536:79 (#673)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.check_argument_is_seq."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:347:17: 347:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:347:17: 347:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:347:31: 347:32 (#0)" (> Var "k~8") (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:347:34: 347:38 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/seq_lib.rs:347:34: 347:44 (#0)"
                    (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                     ((@@ "pervasive/seq_lib.rs:347:34: 347:38 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                    ) (Typ Int (IntRange Nat))
                   ) (@@ "pervasive/seq_lib.rs:347:47: 347:48 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Int))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:537:9: 545:11 (#673)" (Stmt Expr (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#673)" (> AssertBy :vars ()
             :require (
              @@
              "pervasive/seq_lib.rs:537:9: 545:11 (#673)"
              (> Const (Constant Bool true))
              (Typ Bool)
             ) :ensure (
              @@
              "pervasive/seq_lib.rs:537:30: 537:54 (#673)"
              (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#673)" (> Var "s1~604") (Typ Datatype "vstd!seq.Seq."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#673)" (> Var "s2~630") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
              (Typ Bool)
             ) :proof (@@ "pervasive/seq_lib.rs:537:56: 545:10 (#673)" (> Block (
                (@ "pervasive/seq_lib.rs:538:13: 538:53 (#673)" (Stmt Expr (@@ "pervasive/seq_lib.rs:538:13: 538:53 (#673)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:538:32: 538:52 (#673)" (> Binary (BinaryOp Eq Exec) (@@ "pervasive/seq_lib.rs:538:32: 538:40 (#673)"
                       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                        ((@@ "pervasive/seq_lib.rs:538:32: 538:34 (#673)" (> Var "s1~604") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/seq_lib.rs:538:44: 538:52 (#673)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:538:44: 538:46 (#673)" (> Var "s2~630") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat)))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:539:13: 543:15 (#673)" (Stmt Expr (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#673)" (> AssertBy :vars
                    ((-> idx~668 (Typ Int (IntRange Int)))) :require (
                     @@
                     "pervasive/seq_lib.rs:532:47: 540:74 (#673)"
                     (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#673)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                        (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#673)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#672)"
                         (> Var "idx~668") (Typ Int (IntRange Int)))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#672)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#672)"
                         (> Var "idx~668") (Typ Int (IntRange Int))
                        ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#673)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#673)" (> Var "s1~604") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Int (IntRange Nat)))
                       ) (Typ Bool)))
                     (Typ Bool)
                    ) :ensure (
                     @@
                     "pervasive/seq_lib.rs:541:36: 541:84 (#673)"
                     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#673)" (> Call (CallTarget Fun (CallTargetKind Static)
                         (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#673)" (> Var "s1~604") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:62: 541:66 (#673)" (> Var "idx~668") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")
                      ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#673)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#673)" (> Var "s2~630") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                         (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#673)" (> Var "idx~668") (Typ Int (IntRange Int))))
                       ) (Typ TypParam "A")))
                     (Typ Bool)
                    ) :proof (@@ "pervasive/seq_lib.rs:539:65: 543:14 (#673)" (> Block () (@@ "pervasive/seq_lib.rs:542:17: 542:28 (#673)" (> Block
                        () (@@ "pervasive/seq_lib.rs:542:19: 542:26 (#673)" (> Block () None) (Typ Tuple ()))
                       ) (Typ Tuple ()))
                     ) (Typ Tuple ())
                    ) :assumption (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#673)" (> Quant (Forall :boxed_params true) ((-> idx~668 (Typ Int (IntRange
                          Int)))
                      ) (@@ "pervasive/seq_lib.rs:539:13: 543:15 (#673)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:532:47: 540:74 (#673)"
                         (> Binary (BinaryOp And) (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#673)" (> Binary (BinaryOp Inequality (InequalityOp Le))
                            (@@ "pervasive/seq_lib.rs:540:73: 540:74 (#673)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#672)"
                             (> Var "idx~668") (Typ Int (IntRange Int)))
                           ) (Typ Bool)
                          ) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#672)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/seq_lib.rs:532:47: 532:50 (#672)"
                             (> Var "idx~668") (Typ Int (IntRange Int))
                            ) (@@ "pervasive/seq_lib.rs:540:93: 540:101 (#673)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:540:93: 540:95 (#673)" (> Var "s1~604") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                             ) (Typ Int (IntRange Nat)))
                           ) (Typ Bool))
                         ) (Typ Bool)
                        ) (@@ "pervasive/seq_lib.rs:541:36: 541:84 (#673)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:541:53: 541:67 (#673)"
                           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                            ((@@ "pervasive/seq_lib.rs:541:53: 541:55 (#673)" (> Var "s1~604") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                              "pervasive/seq_lib.rs:541:62: 541:66 (#673)" (> Var "idx~668") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A")
                          ) (@@ "pervasive/seq_lib.rs:541:69: 541:83 (#673)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:541:69: 541:71 (#673)" (> Var "s2~630") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                             (@@ "pervasive/seq_lib.rs:541:78: 541:82 (#673)" (> Var "idx~668") (Typ Int (IntRange Int))))
                           ) (Typ TypParam "A"))
                         ) (Typ Bool))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
                (@ "pervasive/seq_lib.rs:544:13: 544:61 (#673)" (Stmt Expr (@@ "pervasive/seq_lib.rs:544:13: 544:61 (#673)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/seq_lib.rs:544:32: 544:60 (#673)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                        ((Typ TypParam "A")))
                      ) (@@ "pervasive/seq_lib.rs:544:53: 544:55 (#673)" (> Var "s1~604") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                      (@@ "pervasive/seq_lib.rs:544:57: 544:59 (#673)" (> Var "s2~630") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ())
             ) :assumption (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#673)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:537:9: 545:11 (#673)"
                (> Const (Constant Bool true)) (Typ Bool)
               ) (@@ "pervasive/seq_lib.rs:537:30: 537:54 (#673)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:537:47: 537:49 (#673)"
                  (> Var "s1~604") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                 ) (@@ "pervasive/seq_lib.rs:537:51: 537:53 (#673)" (> Var "s2~630") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:353:5: 353:75 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.impl&%0.lemma_fold_right_alt.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:353:42: 353:46 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:353:48: 353:57 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ
       TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/seq_lib.rs:353:70: 353:74 (#0)" (Param :name "b~6" :typ (Typ TypParam "B") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/seq_lib.rs:356:5: 356:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:354:17: 354:21 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:354:17: 354:38 (#0)" (
       > Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_right.") ((Typ TypParam "A") (Typ TypParam
          "B")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:354:17: 354:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
         "pervasive/seq_lib.rs:354:33: 354:34 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
           "B"))
        ) (@@ "pervasive/seq_lib.rs:354:36: 354:37 (#0)" (> Var "b~6") (Typ TypParam "B")))
      ) (Typ TypParam "B")
     ) (@@ "pervasive/seq_lib.rs:354:42: 354:67 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.fold_right_alt.")
        ((Typ TypParam "A") (Typ TypParam "B")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:354:42: 354:46 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
         "pervasive/seq_lib.rs:354:62: 354:63 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
           "B"))
        ) (@@ "pervasive/seq_lib.rs:354:65: 354:66 (#0)" (> Var "b~6") (Typ TypParam "B")))
      ) (Typ TypParam "B"))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:355:19: 355:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:355:19: 355:23 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:356:5: 365:6 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:357:9: 357:51 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:357:9: 357:51 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.fold_right.")
         2
        ) (Typ Tuple ()))))
     (@ "pervasive/seq_lib.rs:358:9: 358:55 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:358:9: 358:55 (#0)" (> Fuel (Fun :path "vstd!seq_lib.impl&%0.fold_right_alt.")
         2
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/seq_lib.rs:359:9: 364:10 (#0)" (> If (@@ "pervasive/seq_lib.rs:359:12: 359:16 (#0)" (> Binary (BinaryOp Inequality
         (InequalityOp Le)
        ) (@@ "pervasive/seq_lib.rs:359:12: 359:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:359:12: 359:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:359:26: 359:27 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:359:28: 361:10 (#0)" (> Block () None) (Typ Tuple ())) (@@ "pervasive/seq_lib.rs:361:16: 364:10 (#0)"
       (> Block (
         (@ "pervasive/seq_lib.rs:362:13: 362:75 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:362:13: 362:75 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.lemma_fold_right_alt.") ((Typ TypParam "A") (Typ TypParam "B"))
              () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:362:13: 362:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:362:13: 362:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                  "pervasive/seq_lib.rs:362:27: 362:28 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Int))
                 ) (@@ "pervasive/seq_lib.rs:362:30: 362:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:362:30: 362:34 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                  ) (Typ Int (IntRange Nat))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
              ) (@@ "pervasive/seq_lib.rs:362:70: 362:71 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
                 "B"))
              ) (@@ "pervasive/seq_lib.rs:362:73: 362:74 (#0)" (> Var "b~6") (Typ TypParam "B")))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:363:13: 363:51 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:363:13: 363:51 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.aux_lemma_fold_right_alt.") ((Typ TypParam "A") (Typ TypParam "B"))
              () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:363:13: 363:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
               "pervasive/seq_lib.rs:363:43: 363:44 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A") (Typ TypParam "B")) (Typ TypParam
                 "B"))
              ) (@@ "pervasive/seq_lib.rs:363:46: 363:47 (#0)" (> Var "b~6") (Typ TypParam "B")) (@@ "pervasive/seq_lib.rs:363:49: 363:50 (#0)"
               (> Const (Constant Int 1)) (Typ Int (IntRange Int))))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:370:6: 370:49 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.seq_to_set_rec.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   "vstd!seq_lib."
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:370:27: 370:38 (#0)" (Param :name "seq~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:370:43: 370:49 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease ((@@ "pervasive/seq_lib.rs:371:15: 371:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
      (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:371:15: 371:18 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:372:1: 378:2 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:373:5: 377:6 (#0)" (> If (@@ "pervasive/seq_lib.rs:373:8: 373:11 (#0)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:373:8: 373:17 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun
            :path "vstd!seq.Seq.len."
           ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:373:8: 373:11 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:373:21: 373:22 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:373:23: 375:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:374:9: 374:21 (#0)" (> Call (CallTarget
           Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ()
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
      ) (@@ "pervasive/seq_lib.rs:375:12: 377:6 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:376:9: 376:59 (#0)" (> Call (CallTarget
           Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:376:9: 376:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:376:24: 376:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:376:24: 376:27 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:376:48: 376:58 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:376:48: 376:51 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ TypParam "A")))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:381:7: 381:50 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.seq_to_set_rec_is_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to "vstd!seq_lib."
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:381:38: 381:49 (#0)" (Param :name "seq~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:384:1: 384:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:382:13: 382:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:382:13: 382:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/seq_lib.rs:382:28: 382:31 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:383:15: 383:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:383:15: 383:18 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:384:1: 391:2 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:385:5: 390:6 (#0)" (> If (@@ "pervasive/seq_lib.rs:385:8: 385:11 (#0)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/seq_lib.rs:385:8: 385:17 (#0)" (> Call (CallTarget Fun (CallTargetKind
            Static
           ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:385:8: 385:11 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:385:20: 385:21 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:385:21: 390:6 (#0)" (> Block (
         (@ "pervasive/seq_lib.rs:386:13: 386:20 (#0)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:386:13: 386:20 (#0)" (Pattern Var
             :name "sub_seq~47" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:386:23: 386:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.impl&%0.drop_last."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:386:23: 386:26 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
        ) (@@ "pervasive/seq_lib.rs:387:9: 387:15 (#0)" (> Block (
           (@ "pervasive/seq_lib.rs:387:9: 387:15 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:387:9: 387:15 (#0)" (> AssertBy :vars () :require
               (
                @@
                "pervasive/seq_lib.rs:387:9: 387:15 (#0)"
                (> Const (Constant Bool true))
                (Typ Bool)
               ) :ensure (
                @@
                "pervasive/seq_lib.rs:387:16: 387:48 (#0)"
                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
                   IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:387:16: 387:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:387:31: 387:38 (#0)" (> Var "sub_seq~47") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))))
                (Typ Bool)
               ) :proof (@@ "pervasive/seq_lib.rs:387:53: 389:10 (#0)" (> Block (
                  (@ "pervasive/seq_lib.rs:388:13: 388:46 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:388:13: 388:46 (#0)" (> Call (CallTarget Fun
                       (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec_is_finite.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:388:38: 388:45 (#0)" (> Var "sub_seq~47") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Tuple ()))))
                 ) None
                ) (Typ Tuple ())
               ) :assumption (@@ "pervasive/seq_lib.rs:387:9: 387:15 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:387:9: 387:15 (#0)"
                  (> Const (Constant Bool true)) (Typ Bool)
                 ) (@@ "pervasive/seq_lib.rs:387:16: 387:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:387:16: 387:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:387:31: 387:38 (#0)" (> Var "sub_seq~47") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                  ) (Typ Bool))
                ) (Typ Bool))
              ) (Typ Tuple ()))))
          ) None
         ) (Typ Tuple ()))
       ) (Typ Tuple ())
      ) None
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:394:7: 394:49 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.seq_to_set_rec_contains.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to "vstd!seq_lib."
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:394:37: 394:48 (#0)" (Param :name "seq~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:397:1: 397:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:395:13: 395:19 (#0)" (> Quant (Forall :boxed_params true) ((-> a~16 (Typ TypParam "A"))) (@@ "pervasive/seq_lib.rs:395:24: 395:25 (#0)"
      (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:395:35: 395:50 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger
           None)
         ) (@@ "pervasive/seq_lib.rs:395:35: 395:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/seq_lib.rs:395:35: 395:38 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
             "pervasive/seq_lib.rs:395:48: 395:49 (#0)" (> Var "a~16") (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/seq_lib.rs:395:56: 395:87 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:395:56: 395:75 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/seq_lib.rs:395:71: 395:74 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
          ) (@@ "pervasive/seq_lib.rs:395:85: 395:86 (#0)" (> Var "a~16") (Typ TypParam "A")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:396:15: 396:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:396:15: 396:18 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:397:1: 415:2 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:398:5: 414:6 (#0)" (> If (@@ "pervasive/seq_lib.rs:398:8: 398:11 (#0)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/seq_lib.rs:398:8: 398:17 (#0)" (> Call (CallTarget Fun (CallTargetKind
            Static
           ) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:398:8: 398:11 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:398:20: 398:21 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:398:22: 414:6 (#0)" (> Block (
         (@ "pervasive/seq_lib.rs:399:9: 399:15 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:399:9: 399:15 (#0)" (> Block (
              (@ "pervasive/seq_lib.rs:399:9: 399:15 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:399:9: 399:15 (#0)" (> AssertBy :vars () :require
                  (
                   @@
                   "pervasive/seq_lib.rs:399:9: 399:15 (#0)"
                   (> Const (Constant Bool true))
                   (Typ Bool)
                  ) :ensure (
                   @@
                   "pervasive/seq_lib.rs:399:16: 399:22 (#0)"
                   (> Quant (Forall :boxed_params true) ((-> a~76 (Typ TypParam "A"))) (@@ "pervasive/seq_lib.rs:399:27: 399:28 (#0)" (> Binary
                      (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:399:38: 399:65 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None))
                        (@@ "pervasive/seq_lib.rs:399:38: 399:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:399:38: 399:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                             ) ((@@ "pervasive/seq_lib.rs:399:38: 399:41 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                           ) (@@ "pervasive/seq_lib.rs:399:63: 399:64 (#0)" (> Var "a~76") (Typ TypParam "A")))
                         ) (Typ Bool))
                       ) (Typ Bool)
                      ) (@@ "pervasive/seq_lib.rs:399:71: 399:114 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:399:71: 399:102 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/seq_lib.rs:399:86: 399:101 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                              ) ((@@ "pervasive/seq_lib.rs:399:86: 399:89 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                             ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                          ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                         ) (@@ "pervasive/seq_lib.rs:399:112: 399:113 (#0)" (> Var "a~76") (Typ TypParam "A")))
                       ) (Typ Bool))
                     ) (Typ Bool)))
                   (Typ Bool)
                  ) :proof (@@ "pervasive/seq_lib.rs:399:119: 401:10 (#0)" (> Block (
                     (@ "pervasive/seq_lib.rs:400:13: 400:53 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:400:13: 400:53 (#0)" (> Call (CallTarget Fun
                          (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec_contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                         ) ((@@ "pervasive/seq_lib.rs:400:37: 400:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:400:37: 400:40 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                           ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                        ) (Typ Tuple ()))))
                    ) None
                   ) (Typ Tuple ())
                  ) :assumption (@@ "pervasive/seq_lib.rs:399:9: 399:15 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:399:9: 399:15 (#0)"
                     (> Const (Constant Bool true)) (Typ Bool)
                    ) (@@ "pervasive/seq_lib.rs:399:16: 399:22 (#0)" (> Quant (Forall :boxed_params true) ((-> a~76 (Typ TypParam "A"))) (@@ "pervasive/seq_lib.rs:399:27: 399:28 (#0)"
                       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:399:38: 399:65 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger
                            None)
                          ) (@@ "pervasive/seq_lib.rs:399:38: 399:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
                             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                            ) ((@@ "pervasive/seq_lib.rs:399:38: 399:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                               ) ((@@ "pervasive/seq_lib.rs:399:38: 399:41 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                              ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                             ) (@@ "pervasive/seq_lib.rs:399:63: 399:64 (#0)" (> Var "a~76") (Typ TypParam "A")))
                           ) (Typ Bool))
                         ) (Typ Bool)
                        ) (@@ "pervasive/seq_lib.rs:399:71: 399:114 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:399:71: 399:102 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                             ) ((@@ "pervasive/seq_lib.rs:399:86: 399:101 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                ) ((@@ "pervasive/seq_lib.rs:399:86: 399:89 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                               ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                           ) (@@ "pervasive/seq_lib.rs:399:112: 399:113 (#0)" (> Var "a~76") (Typ TypParam "A")))
                         ) (Typ Bool))
                       ) (Typ Bool))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Tuple ()))))
             ) None
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:403:9: 403:15 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:403:9: 403:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/seq_lib.rs:403:16: 403:19 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!seq.Seq."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/seq_lib.rs:403:16: 403:19 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                "pervasive/seq_lib.rs:403:24: 403:56 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:403:24: 403:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:403:24: 403:27 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                  ) (@@ "pervasive/seq_lib.rs:403:45: 403:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:403:45: 403:48 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ TypParam "A")))
                ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) (@@ "pervasive/seq_lib.rs:404:9: 404:15 (#0)" (> Block (
           (@ "pervasive/seq_lib.rs:404:9: 404:15 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:404:9: 404:15 (#0)" (> AssertBy :vars ((-> a~146
                 (Typ TypParam "A"))
               ) :require (
                @@
                "pervasive/seq_lib.rs:404:9: 404:15 (#0)"
                (> Const (Constant Bool true))
                (Typ Bool)
               ) :ensure (
                @@
                "pervasive/seq_lib.rs:404:27: 404:28 (#0)"
                (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:404:38: 404:53 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger
                     None)
                   ) (@@ "pervasive/seq_lib.rs:404:38: 404:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
                      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/seq_lib.rs:404:38: 404:41 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                       "pervasive/seq_lib.rs:404:51: 404:52 (#0)" (> Var "a~146") (Typ TypParam "A")))
                    ) (Typ Bool))
                  ) (Typ Bool)
                 ) (@@ "pervasive/seq_lib.rs:404:59: 404:90 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/seq_lib.rs:404:59: 404:78 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:404:74: 404:77 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                    ) (@@ "pervasive/seq_lib.rs:404:88: 404:89 (#0)" (> Var "a~146") (Typ TypParam "A")))
                  ) (Typ Bool)))
                (Typ Bool)
               ) :proof (@@ "pervasive/seq_lib.rs:404:94: 413:10 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:405:13: 412:14 (#0)" (> If (@@ "pervasive/seq_lib.rs:405:16: 405:44 (#0)"
                    (> Unary (UnaryOp Not) (@@ "pervasive/seq_lib.rs:405:17: 405:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
                         "vstd!seq_lib.impl&%0.contains."
                        ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:405:17: 405:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.drop_last.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:405:17: 405:20 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
                        ) (@@ "pervasive/seq_lib.rs:405:42: 405:43 (#0)" (> Var "a~146") (Typ TypParam "A")))
                      ) (Typ Bool))
                    ) (Typ Bool)
                   ) (@@ "pervasive/seq_lib.rs:405:45: 412:14 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:406:17: 411:18 (#0)" (> If (@@ "pervasive/seq_lib.rs:406:20: 406:21 (#0)"
                        (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:406:20: 406:21 (#0)" (> Var "a~146") (Typ TypParam "A")) (@@ "pervasive/seq_lib.rs:406:25: 406:35 (#0)"
                          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                           ((@@ "pervasive/seq_lib.rs:406:25: 406:28 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                          ) (Typ TypParam "A"))
                        ) (Typ Bool)
                       ) (@@ "pervasive/seq_lib.rs:406:36: 409:18 (#0)" (> Block (
                          (@ "pervasive/seq_lib.rs:407:21: 407:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:407:21: 407:27 (#0)" (> AssertAssume :is_assume
                              false :expr (@@ "pervasive/seq_lib.rs:407:28: 407:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
                                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                ) ((@@ "pervasive/seq_lib.rs:407:28: 407:31 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                                  "pervasive/seq_lib.rs:407:41: 407:42 (#0)" (> Var "a~146") (Typ TypParam "A")))
                               ) (Typ Bool))
                             ) (Typ Tuple ()))))
                          (@ "pervasive/seq_lib.rs:408:21: 408:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:408:21: 408:27 (#0)" (> AssertAssume :is_assume
                              false :expr (@@ "pervasive/seq_lib.rs:408:28: 408:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                ) ((@@ "pervasive/seq_lib.rs:408:28: 408:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                                    ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                   ) ((@@ "pervasive/seq_lib.rs:408:43: 408:46 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                                  ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                                 ) (@@ "pervasive/seq_lib.rs:408:57: 408:58 (#0)" (> Var "a~146") (Typ TypParam "A")))
                               ) (Typ Bool))
                             ) (Typ Tuple ()))))
                         ) None
                        ) (Typ Tuple ())
                       ) (@@ "pervasive/seq_lib.rs:409:24: 411:18 (#0)" (> Block (
                          (@ "pervasive/seq_lib.rs:410:21: 410:27 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:410:21: 410:27 (#0)" (> AssertAssume :is_assume
                              false :expr (@@ "pervasive/seq_lib.rs:410:28: 410:60 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/seq_lib.rs:410:29: 410:60 (#0)"
                                 (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
                                    IfMarked)
                                  ) ((@@ "pervasive/seq_lib.rs:410:29: 410:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                                      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                                     ) ((@@ "pervasive/seq_lib.rs:410:44: 410:47 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                                    ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                                   ) (@@ "pervasive/seq_lib.rs:410:58: 410:59 (#0)" (> Var "a~146") (Typ TypParam "A")))
                                 ) (Typ Bool))
                               ) (Typ Bool))
                             ) (Typ Tuple ()))))
                         ) None
                        ) (Typ Tuple ()))
                      ) (Typ Tuple ()))
                    ) (Typ Tuple ())
                   ) None
                  ) (Typ Tuple ()))
                ) (Typ Tuple ())
               ) :assumption (@@ "pervasive/seq_lib.rs:404:9: 404:15 (#0)" (> Quant (Forall :boxed_params true) ((-> a~146 (Typ TypParam "A")))
                 (@@ "pervasive/seq_lib.rs:404:9: 404:15 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:404:9: 404:15 (#0)" (> Const
                     (Constant Bool true)
                    ) (Typ Bool)
                   ) (@@ "pervasive/seq_lib.rs:404:27: 404:28 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:404:38: 404:53 (#0)"
                      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:404:38: 404:53 (#0)" (> Call (CallTarget
                          Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                         ) ((@@ "pervasive/seq_lib.rs:404:38: 404:41 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                           "pervasive/seq_lib.rs:404:51: 404:52 (#0)" (> Var "a~146") (Typ TypParam "A")))
                        ) (Typ Bool))
                      ) (Typ Bool)
                     ) (@@ "pervasive/seq_lib.rs:404:59: 404:90 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:404:59: 404:78 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                          ) ((@@ "pervasive/seq_lib.rs:404:74: 404:77 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                        ) (@@ "pervasive/seq_lib.rs:404:88: 404:89 (#0)" (> Var "a~146") (Typ TypParam "A")))
                      ) (Typ Bool))
                    ) (Typ Bool))
                  ) (Typ Bool))
                ) (Typ Bool))
              ) (Typ Tuple ()))))
          ) None
         ) (Typ Tuple ()))
       ) (Typ Tuple ())
      ) None
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:418:7: 418:46 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.seq_to_set_equal_rec.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   "vstd!seq_lib."
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:418:34: 418:45 (#0)" (Param :name "seq~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:420:1: 420:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:419:13: 419:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:419:13: 419:25 (#0)" (
       > Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:419:13: 419:16 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     ) (@@ "pervasive/seq_lib.rs:419:29: 419:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:419:44: 419:47 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:420:1: 426:2 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:421:5: 421:11 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:421:5: 421:11 (#0)" (> Block (
          (@ "pervasive/seq_lib.rs:421:5: 421:11 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:421:5: 421:11 (#0)" (> AssertBy :vars () :require
              (
               @@
               "pervasive/seq_lib.rs:421:5: 421:11 (#0)"
               (> Const (Constant Bool true))
               (Typ Bool)
              ) :ensure (
               @@
               "pervasive/seq_lib.rs:421:12: 421:18 (#0)"
               (> Quant (Forall :boxed_params true) ((-> n~37 (Typ TypParam "A"))) (@@ "pervasive/seq_lib.rs:421:23: 421:24 (#0)" (> Binary
                  (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:421:34: 421:49 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None))
                    (@@ "pervasive/seq_lib.rs:421:34: 421:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:421:34: 421:37 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                        "pervasive/seq_lib.rs:421:47: 421:48 (#0)" (> Var "n~37") (Typ TypParam "A")))
                     ) (Typ Bool))
                   ) (Typ Bool)
                  ) (@@ "pervasive/seq_lib.rs:421:55: 421:86 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:421:55: 421:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:421:70: 421:73 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                     ) (@@ "pervasive/seq_lib.rs:421:84: 421:85 (#0)" (> Var "n~37") (Typ TypParam "A")))
                   ) (Typ Bool))
                 ) (Typ Bool)))
               (Typ Bool)
              ) :proof (@@ "pervasive/seq_lib.rs:421:91: 423:6 (#0)" (> Block (
                 (@ "pervasive/seq_lib.rs:422:9: 422:37 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:422:9: 422:37 (#0)" (> Call (CallTarget Fun
                      (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec_contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/seq_lib.rs:422:33: 422:36 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                    ) (Typ Tuple ()))))
                ) None
               ) (Typ Tuple ())
              ) :assumption (@@ "pervasive/seq_lib.rs:421:5: 421:11 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:421:5: 421:11 (#0)"
                 (> Const (Constant Bool true)) (Typ Bool)
                ) (@@ "pervasive/seq_lib.rs:421:12: 421:18 (#0)" (> Quant (Forall :boxed_params true) ((-> n~37 (Typ TypParam "A"))) (@@ "pervasive/seq_lib.rs:421:23: 421:24 (#0)"
                   (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:421:34: 421:49 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger
                        None)
                      ) (@@ "pervasive/seq_lib.rs:421:34: 421:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:421:34: 421:37 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                          "pervasive/seq_lib.rs:421:47: 421:48 (#0)" (> Var "n~37") (Typ TypParam "A")))
                       ) (Typ Bool))
                     ) (Typ Bool)
                    ) (@@ "pervasive/seq_lib.rs:421:55: 421:86 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                       ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/seq_lib.rs:421:55: 421:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                         ) ((@@ "pervasive/seq_lib.rs:421:70: 421:73 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                       ) (@@ "pervasive/seq_lib.rs:421:84: 421:85 (#0)" (> Var "n~37") (Typ TypParam "A")))
                     ) (Typ Bool))
                   ) (Typ Bool))
                 ) (Typ Bool))
               ) (Typ Bool))
             ) (Typ Tuple ()))))
         ) None
        ) (Typ Tuple ()))))
     (@ "pervasive/seq_lib.rs:424:5: 424:11 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:424:5: 424:11 (#0)" (> AssertAssume :is_assume
         false :expr (@@ "pervasive/seq_lib.rs:424:12: 424:18 (#0)" (> Quant (Forall :boxed_params true) ((-> n~82 (Typ TypParam "A")))
           (@@ "pervasive/seq_lib.rs:424:23: 424:24 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:424:34: 424:49 (#0)" (
               > Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:424:34: 424:49 (#0)" (> Call (CallTarget
                  Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:424:34: 424:37 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))) (@@
                   "pervasive/seq_lib.rs:424:47: 424:48 (#0)" (> Var "n~82") (Typ TypParam "A")))
                ) (Typ Bool))
              ) (Typ Bool)
             ) (@@ "pervasive/seq_lib.rs:424:55: 424:79 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:424:55: 424:67 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.")
                   ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/seq_lib.rs:424:55: 424:58 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                 ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                ) (@@ "pervasive/seq_lib.rs:424:77: 424:78 (#0)" (> Var "n~82") (Typ TypParam "A")))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Tuple ()))))
     (@ "pervasive/seq_lib.rs:425:5: 425:11 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:425:5: 425:11 (#0)" (> AssertAssume :is_assume
         false :expr (@@ "pervasive/seq_lib.rs:425:12: 425:15 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set."
             ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:425:12: 425:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:425:12: 425:15 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
           ) (@@ "pervasive/seq_lib.rs:425:29: 425:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:425:44: 425:47 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
          ) (Typ Bool))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:430:1: 430:50 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.seq_to_set_is_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:430:38: 430:49 (#0)" (Param :name "seq~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:432:1: 432:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:431:13: 431:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:431:13: 431:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.")
         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/seq_lib.rs:431:13: 431:16 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:432:1: 437:2 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:433:5: 433:11 (#0)" (> Block (
       (@ "pervasive/seq_lib.rs:433:5: 433:11 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:433:5: 433:11 (#0)" (> AssertBy :vars () :require
           (
            @@
            "pervasive/seq_lib.rs:433:5: 433:11 (#0)"
            (> Const (Constant Bool true))
            (Typ Bool)
           ) :ensure (
            @@
            "pervasive/seq_lib.rs:433:12: 433:33 (#0)"
            (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
               IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:433:12: 433:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/seq_lib.rs:433:12: 433:15 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))))
            (Typ Bool)
           ) :proof (@@ "pervasive/seq_lib.rs:433:38: 436:6 (#0)" (> Block (
              (@ "pervasive/seq_lib.rs:434:9: 434:34 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:434:9: 434:34 (#0)" (> Call (CallTarget Fun
                   (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_equal_rec.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/seq_lib.rs:434:30: 434:33 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                 ) (Typ Tuple ()))))
              (@ "pervasive/seq_lib.rs:435:9: 435:38 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:435:9: 435:38 (#0)" (> Call (CallTarget Fun
                   (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec_is_finite.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/seq_lib.rs:435:34: 435:37 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                 ) (Typ Tuple ()))))
             ) None
            ) (Typ Tuple ())
           ) :assumption (@@ "pervasive/seq_lib.rs:433:5: 433:11 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/seq_lib.rs:433:5: 433:11 (#0)"
              (> Const (Constant Bool true)) (Typ Bool)
             ) (@@ "pervasive/seq_lib.rs:433:12: 433:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/seq_lib.rs:433:12: 433:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.")
                   ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/seq_lib.rs:433:12: 433:15 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                 ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Tuple ()))))
      ) None
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:441:1: 441:60 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.seq_to_set_is_finite_broadcast.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:441:48: 441:59 (#0)" (Param :name "seq~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:443:1: 443:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/seq_lib.rs:442:24: 442:45 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/seq_lib.rs:442:24: 442:45 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:442:24: 442:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:442:24: 442:27 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:448:1: 448:46 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.unique_seq_to_set.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:448:35: 448:45 (#0)" (Param :name "seq~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:452:1: 452:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/seq_lib.rs:449:14: 449:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.no_duplicates.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:449:14: 449:17 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/seq_lib.rs:450:13: 450:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:450:13: 450:22 (#0)" (
       > Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/seq_lib.rs:450:13: 450:16 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/seq_lib.rs:450:26: 450:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/seq_lib.rs:450:26: 450:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.to_set.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:450:26: 450:29 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/seq_lib.rs:451:15: 451:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/seq_lib.rs:451:15: 451:18 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:452:1: 463:2 (#0)" (> Block (
     (@ "pervasive/seq_lib.rs:453:5: 453:35 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:453:5: 453:35 (#0)" (> Call (CallTarget Fun
          (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_equal_rec.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/seq_lib.rs:453:31: 453:34 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/seq_lib.rs:454:5: 462:6 (#0)" (> If (@@ "pervasive/seq_lib.rs:454:8: 454:11 (#0)" (> Binary (BinaryOp Eq Spec)
        (@@ "pervasive/seq_lib.rs:454:8: 454:17 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/seq_lib.rs:454:8: 454:11 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/seq_lib.rs:454:21: 454:22 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/seq_lib.rs:454:23: 455:6 (#0)" (> Block () None) (Typ Tuple ())) (@@ "pervasive/seq_lib.rs:455:12: 462:6 (#0)"
       (> Block (
         (@ "pervasive/seq_lib.rs:456:13: 456:17 (#0)" (Stmt Decl :pattern (@@ "pervasive/seq_lib.rs:456:13: 456:17 (#0)" (Pattern Var
             :name "rest~81" :mutable false
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
           ) :mode Spec :init (@@ "pervasive/seq_lib.rs:456:20: 456:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!seq_lib.impl&%0.drop_last."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:456:20: 456:23 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))))
         (@ "pervasive/seq_lib.rs:457:9: 457:37 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:457:9: 457:37 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.unique_seq_to_set.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:457:32: 457:36 (#0)" (> Var "rest~81") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:458:9: 458:40 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:458:9: 458:40 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_equal_rec.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:458:35: 458:39 (#0)" (> Var "rest~81") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:459:9: 459:44 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:459:9: 459:44 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec_is_finite.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/seq_lib.rs:459:39: 459:43 (#0)" (> Var "rest~81") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:460:9: 460:15 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:460:9: 460:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/seq_lib.rs:460:16: 460:58 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/seq_lib.rs:460:17: 460:58 (#0)"
                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
                   IfMarked)
                 ) ((@@ "pervasive/seq_lib.rs:460:17: 460:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:460:32: 460:36 (#0)" (> Var "rest~81") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                  ) (@@ "pervasive/seq_lib.rs:460:47: 460:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:460:47: 460:50 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                   ) (Typ TypParam "A")))
                ) (Typ Bool))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
         (@ "pervasive/seq_lib.rs:461:9: 461:15 (#0)" (Stmt Expr (@@ "pervasive/seq_lib.rs:461:9: 461:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/seq_lib.rs:461:16: 461:30 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/seq_lib.rs:461:16: 461:61 (#0)"
                (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
                 ((@@ "pervasive/seq_lib.rs:461:16: 461:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/seq_lib.rs:461:16: 461:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:461:31: 461:35 (#0)" (> Var "rest~81") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                     ) (@@ "pervasive/seq_lib.rs:461:44: 461:54 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.last.")
                        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                       ) ((@@ "pervasive/seq_lib.rs:461:44: 461:47 (#0)" (> Var "seq~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                      ) (Typ TypParam "A")))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                ) (Typ Int (IntRange Nat))
               ) (@@ "pervasive/seq_lib.rs:461:65: 461:79 (#0)" (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate true) (@@ "pervasive/seq_lib.rs:461:65: 461:79 (#0)"
                  (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/seq_lib.rs:461:65: 461:91 (#0)" (> Call (CallTarget Fun (CallTargetKind
                       Static
                      ) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/seq_lib.rs:461:65: 461:85 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.seq_to_set_rec.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/seq_lib.rs:461:80: 461:84 (#0)" (> Var "rest~81") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
                       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                    ) (Typ Int (IntRange Nat))
                   ) (@@ "pervasive/seq_lib.rs:461:94: 461:95 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                  ) (Typ Int (IntRange Nat)))
                ) (Typ Int (IntRange Nat)))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/seq_lib.rs:468:1: 468:63 (#0)" (Function
  :name (Fun :path "vstd!seq_lib.check_argument_is_seq.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!seq_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/seq_lib.rs:468:43: 468:52 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/seq_lib.rs:468:57: 468:63 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/seq_lib.rs:468:64: 468:69 (#0)" (> Block () (@@ "pervasive/seq_lib.rs:468:66: 468:67 (#0)" (> Var "s~2")
     (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:43:5: 43:34 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/set.rs:43:28: 43:34 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:47:5: 47:54 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "F" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:47:39: 47:43 (#0)" (Param :name "f~2" :typ (Typ TypParam "F") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:47:48: 47:54 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:51:5: 51:38 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.full.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/set.rs:51:32: 51:38 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set.rs:51:39: 53:6 (#0)" (> Block () (@@ "pervasive/set.rs:52:9: 52:34 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!set.impl&%0.complement.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/set.rs:52:9: 52:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ()
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:57:5: 57:45 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.contains.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:57:26: 57:30 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:57:32: 57:36 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:57:41: 57:45 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:70:5: 70:57 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:70:32: 70:36 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:70:38: 70:48 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:70:53: 70:57 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set.rs:70:58: 72:6 (#0)" (> Block () (@@ "pervasive/set.rs:71:9: 71:13 (#0)" (> BinaryOpr (BinaryOpr ExtEq
       false (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
      ) (@@ "pervasive/set.rs:71:9: 71:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:71:18: 71:20 (#0)"
       (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:76:5: 76:57 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.subset_of.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:76:32: 76:36 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:76:38: 76:48 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:76:53: 76:57 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set.rs:76:58: 78:6 (#0)" (> Block () (@@ "pervasive/set.rs:77:9: 77:15 (#0)" (> Quant (Forall :boxed_params
       true
      ) ((-> a~12 (Typ TypParam "A"))) (@@ "pervasive/set.rs:77:22: 77:26 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/set.rs:77:22: 77:38 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/set.rs:77:22: 77:26 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:77:36: 77:37 (#0)"
            (> Var "a~12") (Typ TypParam "A")))
         ) (Typ Bool)
        ) (@@ "pervasive/set.rs:77:43: 77:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:77:43: 77:45 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:77:55: 77:56 (#0)"
            (> Var "a~12") (Typ TypParam "A")))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:83:5: 83:45 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.insert.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:83:24: 83:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:83:30: 83:34 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:83:39: 83:45 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:88:5: 88:45 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.remove.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:88:24: 88:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:88:30: 88:34 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:88:39: 88:45 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:92:5: 92:50 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.union.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:92:23: 92:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:92:29: 92:39 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:92:44: 92:50 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:97:5: 97:58 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.spec_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:97:31: 97:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:97:37: 97:47 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:97:52: 97:58 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set.rs:97:59: 99:6 (#0)" (> Block () (@@ "pervasive/set.rs:98:9: 98:23 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!set.impl&%0.union.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/set.rs:98:9: 98:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:98:20: 98:22 (#0)"
        (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:103:5: 103:54 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.intersect.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:103:27: 103:31 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:103:33: 103:43 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:103:48: 103:54 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:107:5: 107:55 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.difference.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:107:28: 107:32 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:107:34: 107:44 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:107:49: 107:55 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:111:5: 111:43 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.complement.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:111:28: 111:32 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:111:37: 111:43 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:115:5: 115:68 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.filter.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "F" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:115:47: 115:51 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:115:53: 115:57 (#0)" (Param :name "f~4" :typ (Typ TypParam "F") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:115:62: 115:68 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set.rs:115:69: 117:6 (#0)" (> Block () (@@ "pervasive/set.rs:116:9: 116:37 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/set.rs:116:9: 116:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:116:24: 116:36 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.") ((Typ TypParam "A") (Typ TypParam "F"))
          () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:116:34: 116:35 (#0)" (> Var "f~4") (Typ TypParam "F")))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:121:5: 121:37 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:121:24: 121:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:121:33: 121:37 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:125:5: 125:33 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:125:21: 125:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:125:30: 125:33 (#0)" (Param :name "%return" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:134:5: 134:39 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.choose.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:134:29: 134:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:134:38: 134:39 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set.rs:134:40: 136:6 (#0)" (> Block () (@@ "pervasive/set.rs:135:9: 135:15 (#0)" (> Choose :params (
       (-> a~10 (Typ TypParam "A"))
      ) :cond (@@ "pervasive/set.rs:135:22: 135:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/set.rs:135:22: 135:26 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:135:36: 135:37 (#0)"
          (> Var "a~10") (Typ TypParam "A")))
       ) (Typ Bool)
      ) :body (@@ "pervasive/set.rs:135:16: 135:20 (#0)" (> Var "a~10") (Typ TypParam "A"))
     ) (Typ TypParam "A"))
   ) (Typ TypParam "A")
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:141:5: 141:66 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.mk_map.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "F" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:141:42: 141:46 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:141:48: 141:52 (#0)" (Param :name "f~4" :typ (Typ TypParam "F") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:141:57: 141:66 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam "A")
      (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:146:5: 146:54 (#0)" (Function
  :name (Fun :path "vstd!set.impl&%0.disjoint.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:146:31: 146:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:146:37: 146:45 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:146:50: 146:54 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set.rs:146:55: 148:6 (#0)" (> Block () (@@ "pervasive/set.rs:147:9: 147:15 (#0)" (> Quant (Forall :boxed_params
       true
      ) ((-> a~12 (Typ TypParam "A"))) (@@ "pervasive/set.rs:147:23: 147:27 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/set.rs:147:23: 147:39 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/set.rs:147:23: 147:27 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:147:37: 147:38 (#0)"
            (> Var "a~12") (Typ TypParam "A")))
         ) (Typ Bool)
        ) (@@ "pervasive/set.rs:147:44: 147:59 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:147:45: 147:59 (#0)" (> Call (CallTarget
             Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/set.rs:147:45: 147:47 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:147:57: 147:58 (#0)"
              (> Var "a~12") (Typ TypParam "A")))
           ) (Typ Bool))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/set.rs:155:1: 155:38 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:155:33: 155:37 (#0)" (Param :name "a~2" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:158:1: 158:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:157:9: 157:34 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:157:10: 157:34 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:157:10: 157:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ()
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:157:32: 157:33 (#0)" (> Var "a~2") (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:163:1: 163:58 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:163:31: 163:40 (#0)" (Param :name "f~2" :typ (Typ Lambda ((Typ TypParam "A")) (Typ Bool)) :mode Spec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/set.rs:163:53: 163:57 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:166:1: 166:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:165:9: 165:12 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:165:9: 165:32 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:165:9: 165:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.")
           ((Typ TypParam "A") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))) ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:165:18: 165:19 (#0)" (> Var "f~2") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:165:30: 165:31 (#0)" (> Var "a~4") (Typ TypParam "A")))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:165:36: 165:40 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/set.rs:165:36: 165:37 (#0)" (> Var "f~2")
         (Typ Lambda ((Typ TypParam "A")) (Typ Bool)))
       ) ((@@ "pervasive/set.rs:165:38: 165:39 (#0)" (> Var "a~4") (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:171:1: 171:55 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_insert_same.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:171:39: 171:48 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:171:50: 171:54 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:174:1: 174:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:173:20: 173:43 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:173:20: 173:43 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:173:20: 173:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:173:20: 173:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:173:29: 173:30 (#0)"
            (> Var "a~4") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:173:41: 173:42 (#0)" (> Var "a~4") (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:179:1: 179:68 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_insert_different.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:179:44: 179:53 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:179:55: 179:60 (#0)" (Param :name "a1~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/set.rs:179:62: 179:67 (#0)" (Param :name "a2~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:184:1: 184:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:181:9: 181:11 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:181:9: 181:11 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/set.rs:181:9: 181:11 (#0)" (> Var "a1~4") (Typ TypParam "A")) (@@ "pervasive/set.rs:181:15: 181:17 (#0)"
        (> Var "a2~6") (Typ TypParam "A"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:183:9: 183:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:183:9: 183:34 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:183:9: 183:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:183:9: 183:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:183:18: 183:20 (#0)"
            (> Var "a2~6") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:183:31: 183:33 (#0)" (> Var "a1~4") (Typ TypParam "A")))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:183:38: 183:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:183:38: 183:39 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:183:49: 183:51 (#0)"
         (> Var "a1~4") (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:189:1: 189:55 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_remove_same.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:189:39: 189:48 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:189:50: 189:54 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:192:1: 192:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:191:9: 191:46 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:191:10: 191:46 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/set.rs:191:10: 191:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:191:22: 191:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/set.rs:191:22: 191:23 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:191:31: 191:32 (#0)"
              (> Var "a~4") (Typ TypParam "A")))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
          ) (@@ "pervasive/set.rs:191:43: 191:44 (#0)" (> Var "a~4") (Typ TypParam "A")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:197:1: 197:68 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_remove_different.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:197:44: 197:53 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:197:55: 197:60 (#0)" (Param :name "a1~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/set.rs:197:62: 197:67 (#0)" (Param :name "a2~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:202:1: 202:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:199:9: 199:11 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:199:9: 199:11 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/set.rs:199:9: 199:11 (#0)" (> Var "a1~4") (Typ TypParam "A")) (@@ "pervasive/set.rs:199:15: 199:17 (#0)"
        (> Var "a2~6") (Typ TypParam "A"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:201:9: 201:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:201:9: 201:34 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:201:9: 201:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:201:9: 201:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:201:18: 201:20 (#0)"
            (> Var "a2~6") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:201:31: 201:33 (#0)" (> Var "a1~4") (Typ TypParam "A")))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:201:38: 201:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:201:38: 201:39 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:201:49: 201:51 (#0)"
         (> Var "a1~4") (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:207:1: 207:62 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_union.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:207:33: 207:43 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:207:45: 207:55 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:207:57: 207:61 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:210:1: 210:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:209:9: 209:11 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:209:9: 209:33 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:209:9: 209:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:209:9: 209:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:209:18: 209:20 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:209:31: 209:32 (#0)" (> Var "a~6") (Typ TypParam "A")))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:209:37: 209:71 (#0)" (> Binary (BinaryOp Or) (@@ "pervasive/set.rs:209:38: 209:52 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:209:38: 209:40 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:209:50: 209:51 (#0)"
           (> Var "a~6") (Typ TypParam "A")))
        ) (Typ Bool)
       ) (@@ "pervasive/set.rs:209:56: 209:70 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:209:56: 209:58 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:209:68: 209:69 (#0)"
           (> Var "a~6") (Typ TypParam "A")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:215:1: 215:66 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_intersect.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:215:37: 215:47 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:215:49: 215:59 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:215:61: 215:65 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:218:1: 218:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:217:9: 217:11 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:217:9: 217:37 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:217:9: 217:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:217:9: 217:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:217:22: 217:24 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:217:35: 217:36 (#0)" (> Var "a~6") (Typ TypParam "A")))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:217:41: 217:75 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/set.rs:217:42: 217:56 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:217:42: 217:44 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:217:54: 217:55 (#0)"
           (> Var "a~6") (Typ TypParam "A")))
        ) (Typ Bool)
       ) (@@ "pervasive/set.rs:217:60: 217:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:217:60: 217:62 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:217:72: 217:73 (#0)"
           (> Var "a~6") (Typ TypParam "A")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:223:1: 223:67 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_difference.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:223:38: 223:48 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:223:50: 223:60 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:223:62: 223:66 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:226:1: 226:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:225:9: 225:11 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:225:9: 225:38 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:225:9: 225:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.difference.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:225:9: 225:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:225:23: 225:25 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:225:36: 225:37 (#0)" (> Var "a~6") (Typ TypParam "A")))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:225:42: 225:77 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/set.rs:225:43: 225:57 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:225:43: 225:45 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:225:55: 225:56 (#0)"
           (> Var "a~6") (Typ TypParam "A")))
        ) (Typ Bool)
       ) (@@ "pervasive/set.rs:225:61: 225:76 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:225:62: 225:76 (#0)" (> Call (CallTarget
            Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set.rs:225:62: 225:64 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:225:74: 225:75 (#0)"
             (> Var "a~6") (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:231:1: 231:54 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_complement.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:231:38: 231:47 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:231:49: 231:53 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:234:1: 234:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:233:9: 233:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:233:9: 233:35 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:233:9: 233:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.complement.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:233:9: 233:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
        ) (@@ "pervasive/set.rs:233:33: 233:34 (#0)" (> Var "a~4") (Typ TypParam "A")))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:233:39: 233:53 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:233:40: 233:53 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:233:40: 233:41 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:233:51: 233:52 (#0)"
           (> Var "a~4") (Typ TypParam "A")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:239:1: 239:60 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:239:37: 239:47 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:239:49: 239:59 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:242:1: 242:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:241:9: 241:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:241:20: 241:31 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/set.rs:241:20: 241:31 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
         (@@ "pervasive/set.rs:241:21: 241:23 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:241:28: 241:30 (#0)"
          (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:241:37: 241:84 (#0)" (> Quant (Forall :boxed_params true) ((-> a~32 (Typ TypParam "A"))) (@@ "pervasive/set.rs:241:51: 241:53 (#0)"
        (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:241:51: 241:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
             "vstd!set.impl&%0.contains."
            ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set.rs:241:51: 241:53 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:241:63: 241:64 (#0)"
             (> Var "a~32") (Typ TypParam "A")))
          ) (Typ Bool)
         ) (@@ "pervasive/set.rs:241:69: 241:83 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set.rs:241:69: 241:71 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:241:81: 241:82 (#0)"
             (> Var "a~32") (Typ TypParam "A")))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:247:1: 247:65 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_ext_equal_deep.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:247:42: 247:52 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:247:54: 247:64 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:250:1: 250:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:249:9: 249:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:249:20: 249:32 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/set.rs:249:20: 249:32 (#0)" (> BinaryOpr (BinaryOpr ExtEq true (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
         (@@ "pervasive/set.rs:249:21: 249:23 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:249:29: 249:31 (#0)"
          (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:249:38: 249:40 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
       (@@ "pervasive/set.rs:249:38: 249:40 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:249:45: 249:47 (#0)"
        (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:255:1: 255:69 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_mk_map_domain.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:255:40: 255:49 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:255:51: 255:60 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V")) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:258:1: 258:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:257:9: 257:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:257:20: 257:37 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/set.rs:257:20: 257:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.dom.")
          ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:257:20: 257:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.mk_map.")
             ((Typ TypParam "K") (Typ TypParam "V") (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))) ((tuple "F" "builtin!impl&%49."))
             (AutospecUsage IfMarked)
            ) ((@@ "pervasive/set.rs:257:20: 257:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))) (@@ "pervasive/set.rs:257:29: 257:30 (#0)"
              (> Var "f~4") (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))))
           ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))
     ) (@@ "pervasive/set.rs:257:41: 257:42 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:263:1: 263:76 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_mk_map_index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:263:39: 263:48 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "K"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:263:50: 263:59 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V")) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:263:69: 263:75 (#0)" (Param :name "key~6" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:268:1: 268:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:265:9: 265:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
      ((Typ TypParam "K")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:265:9: 265:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))) (@@ "pervasive/set.rs:265:20: 265:23 (#0)"
       (> Var "key~6") (Typ TypParam "K")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:267:9: 267:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:267:9: 267:10 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.spec_index.") ((Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:267:9: 267:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.mk_map.")
           ((Typ TypParam "K") (Typ TypParam "V") (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))) ((tuple "F" "builtin!impl&%49."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:267:9: 267:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "K")))) (@@ "pervasive/set.rs:267:18: 267:19 (#0)"
            (> Var "f~4") (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V"))))
         ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
        ) (@@ "pervasive/set.rs:267:21: 267:24 (#0)" (> Var "key~6") (Typ TypParam "K")))
      ) (Typ TypParam "V")
     ) (@@ "pervasive/set.rs:267:29: 267:35 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/set.rs:267:29: 267:30 (#0)" (> Var "f~4")
         (Typ Lambda ((Typ TypParam "K")) (Typ TypParam "V")))
       ) ((@@ "pervasive/set.rs:267:31: 267:34 (#0)" (> Var "key~6") (Typ TypParam "K")))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:275:1: 275:41 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_empty_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/set.rs:278:1: 278:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:277:20: 277:46 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:277:20: 277:46 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:277:20: 277:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ()
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:283:1: 283:57 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_insert_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:283:41: 283:50 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:283:52: 283:56 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:288:1: 288:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:285:9: 285:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:285:9: 285:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:287:20: 287:40 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:287:20: 287:40 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:287:20: 287:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:287:20: 287:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:287:29: 287:30 (#0)"
            (> Var "a~4") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:293:1: 293:57 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_remove_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:293:41: 293:50 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:293:52: 293:56 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:298:1: 298:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:295:9: 295:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:295:9: 295:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:297:20: 297:40 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:297:20: 297:40 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:297:20: 297:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:297:20: 297:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:297:29: 297:30 (#0)"
            (> Var "a~4") (Typ TypParam "A")))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:303:1: 303:63 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_union_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:303:40: 303:50 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:303:52: 303:62 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:309:1: 309:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:305:9: 305:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:305:9: 305:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
   (@@ "pervasive/set.rs:306:9: 306:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:306:9: 306:11 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:308:20: 308:41 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:308:20: 308:41 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:308:20: 308:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:308:20: 308:22 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:308:29: 308:31 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:314:1: 314:67 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_intersect_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:314:44: 314:54 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:314:56: 314:66 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:319:1: 319:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:316:9: 316:35 (#0)" (> Binary (BinaryOp Or) (@@ "pervasive/set.rs:316:9: 316:20 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:316:9: 316:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool)
     ) (@@ "pervasive/set.rs:316:24: 316:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:316:24: 316:26 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:318:20: 318:45 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:318:20: 318:45 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:318:20: 318:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:318:20: 318:22 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:318:33: 318:35 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:324:1: 324:68 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_difference_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:324:45: 324:55 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:324:57: 324:67 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:329:1: 329:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:326:9: 326:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:326:9: 326:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:328:20: 328:46 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:328:20: 328:46 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:328:20: 328:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.difference.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set.rs:328:20: 328:22 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:328:34: 328:36 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:334:1: 334:51 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_choose_finite.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:334:41: 334:50 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:339:1: 339:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:336:9: 336:20 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:336:10: 336:20 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:336:10: 336:11 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:338:20: 338:42 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:338:20: 338:42 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:338:20: 338:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:338:31: 338:41 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.choose.") ((Typ TypParam "A")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/set.rs:338:31: 338:32 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:349:1: 349:38 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_empty_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/set.rs:352:1: 352:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/set.rs:351:9: 351:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:351:20: 351:43 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/set.rs:351:20: 351:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:351:20: 351:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ()
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set.rs:351:47: 351:48 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:357:1: 357:54 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_insert_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:357:38: 357:47 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:357:49: 357:53 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:362:1: 362:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:359:9: 359:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:359:9: 359:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:361:9: 361:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:361:20: 361:37 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/set.rs:361:20: 361:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set.rs:361:20: 361:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.")
             ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/set.rs:361:20: 361:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:361:29: 361:30 (#0)"
              (> Var "a~4") (Typ TypParam "A")))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set.rs:361:41: 361:42 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/set.rs:361:41: 361:48 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
         ((@@ "pervasive/set.rs:361:41: 361:42 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/set.rs:361:51: 361:89 (#0)" (> If (@@ "pervasive/set.rs:361:55: 361:68 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set.rs:361:55: 361:56 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:361:66: 361:67 (#0)"
             (> Var "a~4") (Typ TypParam "A")))
          ) (Typ Bool)
         ) (@@ "pervasive/set.rs:361:69: 361:77 (#0)" (> Block () (@@ "pervasive/set.rs:361:71: 361:75 (#0)" (> Const (Constant Int 0))
            (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int))
         ) (@@ "pervasive/set.rs:361:83: 361:88 (#0)" (> Block () (@@ "pervasive/set.rs:361:85: 361:86 (#0)" (> Const (Constant Int 1))
            (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:367:1: 367:54 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_remove_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:367:38: 367:47 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set.rs:367:49: 367:53 (#0)" (Param :name "a~4" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set.rs:372:1: 372:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:369:9: 369:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:369:9: 369:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:371:9: 371:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set.rs:371:9: 371:16 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set.rs:371:9: 371:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set.rs:371:20: 371:21 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/set.rs:371:31: 371:48 (#0)"
        (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:371:31: 371:48 (#0)" (> Call (CallTarget Fun
            (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set.rs:371:31: 371:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
               ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/set.rs:371:31: 371:32 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:371:40: 371:41 (#0)"
                (> Var "a~4") (Typ TypParam "A")))
             ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/set.rs:371:51: 371:89 (#0)" (> If (@@ "pervasive/set.rs:371:55: 371:68 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set.rs:371:55: 371:56 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:371:66: 371:67 (#0)"
             (> Var "a~4") (Typ TypParam "A")))
          ) (Typ Bool)
         ) (@@ "pervasive/set.rs:371:69: 371:77 (#0)" (> Block () (@@ "pervasive/set.rs:371:71: 371:75 (#0)" (> Const (Constant Int 1))
            (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int))
         ) (@@ "pervasive/set.rs:371:83: 371:88 (#0)" (> Block () (@@ "pervasive/set.rs:371:85: 371:86 (#0)" (> Const (Constant Int 0))
            (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set.rs:377:1: 377:48 (#0)" (Function
  :name (Fun :path "vstd!set.axiom_set_choose_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set.rs:377:38: 377:47 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set.rs:383:1: 383:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set.rs:379:9: 379:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set.rs:379:9: 379:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
   (@@ "pervasive/set.rs:380:9: 380:10 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/set.rs:380:9: 380:10 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/set.rs:380:20: 380:27 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:380:20: 380:27 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/set.rs:380:20: 380:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/set.rs:380:31: 380:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set.rs:382:20: 382:42 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/set.rs:382:20: 382:42 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/set.rs:382:20: 382:21 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set.rs:382:31: 382:41 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.choose.") ((Typ TypParam "A")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/set.rs:382:31: 382:32 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ TypParam "A")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/set_lib.rs:13:5: 13:43 (#0)" (Function
  :name (Fun :path "vstd!set_lib.impl&%0.is_full.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:13:30: 13:34 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:13:39: 13:43 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:13:44: 15:6 (#0)" (> Block () (@@ "pervasive/set_lib.rs:14:9: 14:13 (#0)" (> Binary (BinaryOp
       Eq Spec
      ) (@@ "pervasive/set_lib.rs:14:9: 14:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:14:17: 14:33 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.full.") ((Typ TypParam "A")) () (AutospecUsage
          IfMarked)
        ) ()
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:17:5: 17:44 (#0)" (Function
  :name (Fun :path "vstd!set_lib.impl&%0.is_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:17:27: 17:31 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:17:40: 17:44 (#0)" (Param :name "b~21" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:19:13: 19:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:19:13: 19:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:21:13: 21:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:21:13: 21:14 (#0)" (> Var
       "b~21"
      ) (Typ Bool)
     ) (@@ "pervasive/set_lib.rs:21:20: 21:41 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/set_lib.rs:21:20: 21:33 (#0)" (> Call
         (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
         ((@@ "pervasive/set_lib.rs:21:20: 21:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
        ) (Typ Bool)
       ) (@@ "pervasive/set_lib.rs:21:37: 21:41 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:21:37: 21:47 (#0)" (> Call
           (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/set_lib.rs:21:37: 21:41 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/set_lib.rs:21:51: 21:52 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "pervasive/set_lib.rs:22:13: 22:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:22:13: 22:14 (#0)" (> Var
       "b~21"
      ) (Typ Bool)
     ) (@@ "pervasive/set_lib.rs:22:20: 22:24 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ TypParam
           "A")))
       ) (@@ "pervasive/set_lib.rs:22:20: 22:24 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:22:29: 22:41 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.") ((Typ TypParam "A")) () (AutospecUsage
           IfMarked)
         ) ()
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:23:5: 28:6 (#0)" (> Block (
     (@ "pervasive/set_lib.rs:24:9: 26:10 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:24:9: 26:10 (#0)" (> If (@@ "pervasive/set_lib.rs:24:12: 24:33 (#0)"
          (> Binary (BinaryOp And) (@@ "pervasive/set_lib.rs:24:12: 24:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!set.impl&%0.finite."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:24:12: 24:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ Bool)
           ) (@@ "pervasive/set_lib.rs:24:29: 24:33 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:24:29: 24:39 (#0)" (> Call
               (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
               ((@@ "pervasive/set_lib.rs:24:29: 24:33 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
              ) (Typ Int (IntRange Nat))
             ) (@@ "pervasive/set_lib.rs:24:43: 24:44 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
            ) (Typ Bool))
          ) (Typ Bool)
         ) (@@ "pervasive/set_lib.rs:24:45: 26:10 (#0)" (> Block (
            (@ "pervasive/set_lib.rs:25:13: 25:43 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:25:13: 25:43 (#0)" (> Call (CallTarget Fun (CallTargetKind
                  Static
                 ) (Fun :path "vstd!set_lib.lemma_len0_is_empty.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/set_lib.rs:25:38: 25:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ())
         ) None
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/set_lib.rs:27:9: 27:13 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ TypParam
          "A")))
      ) (@@ "pervasive/set_lib.rs:27:9: 27:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:27:18: 27:30 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.") ((Typ TypParam "A")) () (AutospecUsage
          IfMarked)
        ) ()
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:30:5: 30:63 (#0)" (Function
  :name (Fun :path "vstd!set_lib.impl&%0.map.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:30:29: 30:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set_lib.rs:30:35: 30:44 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B")) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:30:57: 30:63 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "B")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:30:64: 32:6 (#0)" (> Block () (@@ "pervasive/set_lib.rs:31:9: 31:68 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.") ((Typ TypParam "B") (Typ Lambda ((Typ TypParam "B")) (Typ Bool)))
       ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/set_lib.rs:31:18: 31:31 (#0)" (> Closure ((-> a~17 (Typ TypParam "B"))) (@@ "pervasive/set_lib.rs:31:25: 31:31 (#0)"
          (> Quant (Exists :boxed_params true) ((-> x~25 (Typ TypParam "A"))) (@@ "pervasive/set_lib.rs:31:38: 31:59 (#0)" (> Binary (
              BinaryOp And
             ) (@@ "pervasive/set_lib.rs:31:38: 31:54 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
                ((Typ TypParam "A")) () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/set_lib.rs:31:38: 31:42 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:31:52: 31:53 (#0)"
                 (> Var "x~25") (Typ TypParam "A")))
              ) (Typ Bool)
             ) (@@ "pervasive/set_lib.rs:31:58: 31:59 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:31:58: 31:59 (#0)" (> Var
                 "a~17"
                ) (Typ TypParam "B")
               ) (@@ "pervasive/set_lib.rs:31:63: 31:67 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/set_lib.rs:31:63: 31:64 (#0)" (> Var
                    "f~4"
                   ) (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B")))
                 ) ((@@ "pervasive/set_lib.rs:31:65: 31:66 (#0)" (> Var "x~25") (Typ TypParam "A")))
                ) (Typ TypParam "B"))
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ TypParam "B")) (Typ Bool))))
     ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "B"))))
   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "B")))
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:34:5: 34:71 (#0)" (Function
  :name (Fun :path "vstd!set_lib.impl&%0.fold.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "E" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:34:30: 34:34 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set_lib.rs:34:36: 34:43 (#0)" (Param :name "init~4" :typ (Typ TypParam "E") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/set_lib.rs:34:45: 34:54 (#0)" (Param :name "f~6" :typ (Typ Lambda ((Typ TypParam "E") (Typ TypParam "A")) (Typ
       TypParam "E")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:34:70: 34:71 (#0)" (Param :name "%return" :typ (Typ TypParam "E") :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease ((@@ "pervasive/set_lib.rs:36:13: 36:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
      (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:36:13: 36:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish true
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:37:5: 48:6 (#0)" (> Block () (@@ "pervasive/set_lib.rs:38:9: 47:10 (#0)" (> If (@@ "pervasive/set_lib.rs:38:12: 38:25 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.") ((Typ TypParam "A")) () (AutospecUsage
          IfMarked)
        ) ((@@ "pervasive/set_lib.rs:38:12: 38:16 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
       ) (Typ Bool)
      ) (@@ "pervasive/set_lib.rs:38:26: 45:10 (#0)" (> Block () (@@ "pervasive/set_lib.rs:39:13: 44:14 (#0)" (> If (@@ "pervasive/set_lib.rs:39:16: 39:20 (#0)"
           (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:39:16: 39:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun
                :path "vstd!set.impl&%0.len."
               ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/set_lib.rs:39:16: 39:20 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
             ) (Typ Int (IntRange Nat))
            ) (@@ "pervasive/set_lib.rs:39:30: 39:31 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
           ) (Typ Bool)
          ) (@@ "pervasive/set_lib.rs:39:32: 41:14 (#0)" (> Block () (@@ "pervasive/set_lib.rs:40:17: 40:21 (#0)" (> Var "init~4") (Typ
              TypParam "E"))
           ) (Typ TypParam "E")
          ) (@@ "pervasive/set_lib.rs:41:20: 44:14 (#0)" (> Block (
             (@ "pervasive/set_lib.rs:42:21: 42:22 (#0)" (Stmt Decl :pattern (@@ "pervasive/set_lib.rs:42:21: 42:22 (#0)" (Pattern Var :name
                 "a~52" :mutable false
                ) (Typ TypParam "A")
               ) :mode Spec :init (@@ "pervasive/set_lib.rs:42:25: 42:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.choose.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:42:25: 42:29 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                ) (Typ TypParam "A"))))
            ) (@@ "pervasive/set_lib.rs:43:17: 43:51 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.impl&%0.fold.")
               ((Typ TypParam "A") (Typ TypParam "E")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/set_lib.rs:43:17: 43:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:43:17: 43:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:43:29: 43:30 (#0)"
                   (> Var "a~52") (Typ TypParam "A")))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:43:37: 43:47 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/set_lib.rs:43:37: 43:38 (#0)" (> Var
                    "f~6"
                   ) (Typ Lambda ((Typ TypParam "E") (Typ TypParam "A")) (Typ TypParam "E")))
                 ) ((@@ "pervasive/set_lib.rs:43:39: 43:43 (#0)" (> Var "init~4") (Typ TypParam "E")) (@@ "pervasive/set_lib.rs:43:45: 43:46 (#0)"
                   (> Var "a~52") (Typ TypParam "A")))
                ) (Typ TypParam "E")
               ) (@@ "pervasive/set_lib.rs:43:49: 43:50 (#0)" (> Var "f~6") (Typ Lambda ((Typ TypParam "E") (Typ TypParam "A")) (Typ TypParam
                  "E"))))
             ) (Typ TypParam "E"))
           ) (Typ TypParam "E"))
         ) (Typ TypParam "E"))
       ) (Typ TypParam "E")
      ) (@@ "pervasive/set_lib.rs:45:16: 47:10 (#0)" (> Block () (@@ "pervasive/set_lib.rs:46:13: 46:24 (#0)" (> Call (CallTarget Fun
           (CallTargetKind Static) (Fun :path "vstd!pervasive.arbitrary.") ((Typ TypParam "E")) () (AutospecUsage IfMarked)
          ) ()
         ) (Typ TypParam "E"))
       ) (Typ TypParam "E"))
     ) (Typ TypParam "E"))
   ) (Typ TypParam "E")
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:51:1: 51:47 (#0)" (Function
  :name (Fun :path "vstd!set_lib.lemma_len0_is_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:51:37: 51:46 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:57:1: 57:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:53:9: 53:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:53:9: 53:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
   (@@ "pervasive/set_lib.rs:54:9: 54:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:54:9: 54:16 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/set_lib.rs:54:9: 54:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set_lib.rs:54:20: 54:21 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:56:9: 56:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:56:9: 56:10 (#0)" (> Var "s~2")
      (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     ) (@@ "pervasive/set_lib.rs:56:14: 56:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:57:1: 63:2 (#0)" (> Block (
     (@ "pervasive/set_lib.rs:58:5: 61:6 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:58:5: 61:6 (#0)" (> If (@@ "pervasive/set_lib.rs:58:8: 58:14 (#0)"
          (> Quant (Exists :boxed_params true) ((-> a~58 (Typ TypParam "A"))) (@@ "pervasive/set_lib.rs:58:21: 58:34 (#0)" (> Call (CallTarget
              Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:58:21: 58:22 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:58:32: 58:33 (#0)"
               (> Var "a~58") (Typ TypParam "A")))
            ) (Typ Bool))
          ) (Typ Bool)
         ) (@@ "pervasive/set_lib.rs:58:35: 61:6 (#0)" (> Block (
            (@ "pervasive/set_lib.rs:60:9: 60:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:60:9: 60:15 (#0)" (> AssertAssume :is_assume
                false :expr (@@ "pervasive/set_lib.rs:60:16: 60:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:60:16: 60:17 (#0)"
                   (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate true) (@@ "pervasive/set_lib.rs:60:16: 60:17 (#0)" (> Binary (BinaryOp
                       Arith (ArithOp Add) None
                      ) (@@ "pervasive/set_lib.rs:60:16: 60:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/set_lib.rs:60:16: 60:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/set_lib.rs:60:16: 60:17 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:60:25: 60:35 (#0)"
                             (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.choose.") ((Typ TypParam "A")) () (AutospecUsage
                                IfMarked)
                              ) ((@@ "pervasive/set_lib.rs:60:25: 60:26 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                             ) (Typ TypParam "A")))
                          ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                       ) (Typ Int (IntRange Nat))
                      ) (@@ "pervasive/set_lib.rs:60:45: 60:46 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                     ) (Typ Int (IntRange Nat)))
                   ) (Typ Int (IntRange Nat))
                  ) (@@ "pervasive/set_lib.rs:60:50: 60:51 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
                 ) (Typ Bool))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ())
         ) None
        ) (Typ Tuple ()))))
     (@ "pervasive/set_lib.rs:62:5: 62:11 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:62:5: 62:11 (#0)" (> AssertAssume :is_assume
         false :expr (@@ "pervasive/set_lib.rs:62:12: 62:13 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ
               TypParam "A")))
           ) (@@ "pervasive/set_lib.rs:62:12: 62:13 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:62:18: 62:30 (#0)"
            (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.") ((Typ TypParam "A")) () (AutospecUsage
               IfMarked)
             ) ()
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
          ) (Typ Bool))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:65:1: 65:56 (#0)" (Function
  :name (Fun :path "vstd!set_lib.lemma_len_union.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:65:33: 65:43 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set_lib.rs:65:45: 65:55 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:73:1: 73:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:67:9: 67:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:67:9: 67:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
   (@@ "pervasive/set_lib.rs:68:9: 68:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:68:9: 68:11 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:70:9: 70:11 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/set_lib.rs:70:9: 70:27 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/set_lib.rs:70:9: 70:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set_lib.rs:70:9: 70:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:70:18: 70:20 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set_lib.rs:70:31: 70:33 (#0)" (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate true) (@@ "pervasive/set_lib.rs:70:31: 70:33 (#0)"
        (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/set_lib.rs:70:31: 70:39 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set_lib.rs:70:31: 70:33 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/set_lib.rs:70:42: 70:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/set_lib.rs:70:42: 70:44 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/set_lib.rs:72:9: 72:17 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:72:9: 72:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:73:1: 85:2 (#0)" (> Block () (@@ "pervasive/set_lib.rs:74:5: 84:6 (#0)" (> If (@@ "pervasive/set_lib.rs:74:8: 74:21 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.impl&%0.is_empty.") ((Typ TypParam "A")) () (AutospecUsage
          IfMarked)
        ) ((@@ "pervasive/set_lib.rs:74:8: 74:10 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
       ) (Typ Bool)
      ) (@@ "pervasive/set_lib.rs:74:22: 76:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:75:9: 75:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:75:9: 75:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/set_lib.rs:75:16: 75:18 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ
                   TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:75:16: 75:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:75:16: 75:18 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:75:25: 75:27 (#0)"
                   (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:75:33: 75:35 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ())
      ) (@@ "pervasive/set_lib.rs:76:12: 84:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:77:13: 77:14 (#0)" (Stmt Decl :pattern (@@ "pervasive/set_lib.rs:77:13: 77:14 (#0)" (Pattern Var :name
             "a~92" :mutable false
            ) (Typ TypParam "A")
           ) :mode Spec :init (@@ "pervasive/set_lib.rs:77:17: 77:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.choose.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:77:17: 77:19 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ TypParam "A"))))
         (@ "pervasive/set_lib.rs:78:9: 82:10 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:78:9: 82:10 (#0)" (> If (@@ "pervasive/set_lib.rs:78:12: 78:26 (#0)"
              (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "A")) () (AutospecUsage
                 IfMarked)
               ) ((@@ "pervasive/set_lib.rs:78:12: 78:14 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:78:24: 78:25 (#0)"
                 (> Var "a~92") (Typ TypParam "A")))
              ) (Typ Bool)
             ) (@@ "pervasive/set_lib.rs:78:27: 80:10 (#0)" (> Block (
                (@ "pervasive/set_lib.rs:79:13: 79:19 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:79:13: 79:19 (#0)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/set_lib.rs:79:20: 79:22 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ
                          TypParam "A")))
                      ) (@@ "pervasive/set_lib.rs:79:20: 79:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/set_lib.rs:79:20: 79:22 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:79:29: 79:31 (#0)"
                          (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                      ) (@@ "pervasive/set_lib.rs:79:37: 79:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/set_lib.rs:79:37: 79:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/set_lib.rs:79:37: 79:39 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:79:47: 79:48 (#0)"
                             (> Var "a~92") (Typ TypParam "A")))
                          ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                         ) (@@ "pervasive/set_lib.rs:79:56: 79:58 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ())
             ) (@@ "pervasive/set_lib.rs:80:16: 82:10 (#0)" (> Block (
                (@ "pervasive/set_lib.rs:81:13: 81:19 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:81:13: 81:19 (#0)" (> AssertAssume :is_assume
                    false :expr (@@ "pervasive/set_lib.rs:81:20: 81:22 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ
                          TypParam "A")))
                      ) (@@ "pervasive/set_lib.rs:81:20: 81:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/set_lib.rs:81:20: 81:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
                            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/set_lib.rs:81:20: 81:22 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:81:29: 81:31 (#0)"
                             (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                          ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                         ) (@@ "pervasive/set_lib.rs:81:40: 81:41 (#0)" (> Var "a~92") (Typ TypParam "A")))
                       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                      ) (@@ "pervasive/set_lib.rs:81:47: 81:69 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.union.")
                         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                        ) ((@@ "pervasive/set_lib.rs:81:47: 81:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                            ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                           ) ((@@ "pervasive/set_lib.rs:81:47: 81:49 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:81:57: 81:58 (#0)"
                             (> Var "a~92") (Typ TypParam "A")))
                          ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                         ) (@@ "pervasive/set_lib.rs:81:66: 81:68 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
                     ) (Typ Bool))
                   ) (Typ Tuple ()))))
               ) None
              ) (Typ Tuple ()))
            ) (Typ Tuple ()))))
         (@ "pervasive/set_lib.rs:83:9: 83:47 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:83:9: 83:47 (#0)" (> Call (CallTarget Fun (CallTargetKind
               Static
              ) (Fun :path "vstd!set_lib.lemma_len_union.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:83:30: 83:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/set_lib.rs:83:30: 83:32 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:83:40: 83:41 (#0)"
                  (> Var "a~92") (Typ TypParam "A")))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
              ) (@@ "pervasive/set_lib.rs:83:44: 83:46 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:87:1: 87:60 (#0)" (Function
  :name (Fun :path "vstd!set_lib.lemma_len_intersect.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:87:37: 87:47 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set_lib.rs:87:49: 87:59 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:94:1: 94:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:89:9: 89:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:89:9: 89:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:91:9: 91:11 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/set_lib.rs:91:9: 91:31 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/set_lib.rs:91:9: 91:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set_lib.rs:91:9: 91:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:91:22: 91:24 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set_lib.rs:91:35: 91:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set_lib.rs:91:35: 91:37 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/set_lib.rs:93:9: 93:17 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:93:9: 93:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:94:1: 102:2 (#0)" (> Block () (@@ "pervasive/set_lib.rs:95:5: 101:6 (#0)" (> If (@@ "pervasive/set_lib.rs:95:8: 95:21 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.impl&%0.is_empty.") ((Typ TypParam "A")) () (AutospecUsage
          IfMarked)
        ) ((@@ "pervasive/set_lib.rs:95:8: 95:10 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
       ) (Typ Bool)
      ) (@@ "pervasive/set_lib.rs:95:22: 97:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:96:9: 96:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:96:9: 96:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/set_lib.rs:96:16: 96:18 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ
                   TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:96:16: 96:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:96:16: 96:18 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:96:29: 96:31 (#0)"
                   (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:96:37: 96:39 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ())
      ) (@@ "pervasive/set_lib.rs:97:12: 101:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:98:13: 98:14 (#0)" (Stmt Decl :pattern (@@ "pervasive/set_lib.rs:98:13: 98:14 (#0)" (Pattern Var :name
             "a~82" :mutable false
            ) (Typ TypParam "A")
           ) :mode Spec :init (@@ "pervasive/set_lib.rs:98:17: 98:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.choose.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:98:17: 98:19 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ TypParam "A"))))
         (@ "pervasive/set_lib.rs:99:9: 99:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:99:9: 99:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/set_lib.rs:99:16: 99:18 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set." ((Typ
                   TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:99:16: 99:42 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:99:16: 99:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/set_lib.rs:99:16: 99:18 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:99:29: 99:31 (#0)"
                      (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                  ) (@@ "pervasive/set_lib.rs:99:40: 99:41 (#0)" (> Var "a~82") (Typ TypParam "A")))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:99:47: 99:73 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:99:47: 99:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/set_lib.rs:99:47: 99:49 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:99:57: 99:58 (#0)"
                      (> Var "a~82") (Typ TypParam "A")))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                  ) (@@ "pervasive/set_lib.rs:99:70: 99:72 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
         (@ "pervasive/set_lib.rs:100:9: 100:51 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:100:9: 100:51 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!set_lib.lemma_len_intersect.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:100:34: 100:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/set_lib.rs:100:34: 100:36 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:100:44: 100:45 (#0)"
                  (> Var "a~82") (Typ TypParam "A")))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
              ) (@@ "pervasive/set_lib.rs:100:48: 100:50 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:104:1: 104:57 (#0)" (Function
  :name (Fun :path "vstd!set_lib.lemma_len_subset.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:104:34: 104:44 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set_lib.rs:104:46: 104:56 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:111:1: 111:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:106:9: 106:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:106:9: 106:11 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
   (@@ "pervasive/set_lib.rs:107:9: 107:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.subset_of.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:107:9: 107:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:107:22: 107:24 (#0)"
       (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:109:9: 109:11 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/set_lib.rs:109:9: 109:17 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/set_lib.rs:109:9: 109:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set_lib.rs:109:21: 109:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set_lib.rs:109:21: 109:23 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
   (@@ "pervasive/set_lib.rs:110:9: 110:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:110:9: 110:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:111:1: 114:2 (#0)" (> Block (
     (@ "pervasive/set_lib.rs:112:5: 112:37 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:112:5: 112:37 (#0)" (> Call (CallTarget Fun
          (CallTargetKind Static) (Fun :path "vstd!set_lib.lemma_len_intersect.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set_lib.rs:112:30: 112:32 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:112:34: 112:36 (#0)"
           (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
        ) (Typ Tuple ()))))
     (@ "pervasive/set_lib.rs:113:5: 113:11 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:113:5: 113:11 (#0)" (> AssertAssume :is_assume
         false :expr (@@ "pervasive/set_lib.rs:113:12: 113:14 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set."
             ((Typ TypParam "A")))
           ) (@@ "pervasive/set_lib.rs:113:12: 113:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.intersect.")
              ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:113:12: 113:14 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:113:25: 113:27 (#0)"
               (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
           ) (@@ "pervasive/set_lib.rs:113:33: 113:35 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
          ) (Typ Bool))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:116:1: 116:61 (#0)" (Function
  :name (Fun :path "vstd!set_lib.lemma_len_difference.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:116:38: 116:48 (#0)" (Param :name "s1~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set_lib.rs:116:50: 116:60 (#0)" (Param :name "s2~4" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:123:1: 123:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:118:9: 118:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:118:9: 118:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:120:9: 120:11 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/set_lib.rs:120:9: 120:32 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/set_lib.rs:120:9: 120:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.difference.")
           ((Typ TypParam "A")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set_lib.rs:120:9: 120:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:120:23: 120:25 (#0)"
            (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set_lib.rs:120:36: 120:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set_lib.rs:120:36: 120:38 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/set_lib.rs:122:9: 122:17 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:122:9: 122:11 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:123:1: 131:2 (#0)" (> Block () (@@ "pervasive/set_lib.rs:124:5: 130:6 (#0)" (> If (@@ "pervasive/set_lib.rs:124:8: 124:21 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.impl&%0.is_empty.") ((Typ TypParam "A")) () (AutospecUsage
          IfMarked)
        ) ((@@ "pervasive/set_lib.rs:124:8: 124:10 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
       ) (Typ Bool)
      ) (@@ "pervasive/set_lib.rs:124:22: 126:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:125:9: 125:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:125:9: 125:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/set_lib.rs:125:16: 125:18 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:125:16: 125:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.difference.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:125:16: 125:18 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:125:30: 125:32 (#0)"
                   (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:125:38: 125:40 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ())
      ) (@@ "pervasive/set_lib.rs:126:12: 130:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:127:13: 127:14 (#0)" (Stmt Decl :pattern (@@ "pervasive/set_lib.rs:127:13: 127:14 (#0)" (Pattern Var
             :name "a~82" :mutable false
            ) (Typ TypParam "A")
           ) :mode Spec :init (@@ "pervasive/set_lib.rs:127:17: 127:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
               "vstd!set.impl&%0.choose."
              ) ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:127:17: 127:19 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ TypParam "A"))))
         (@ "pervasive/set_lib.rs:128:9: 128:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:128:9: 128:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/set_lib.rs:128:16: 128:18 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set."
                 ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:128:16: 128:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:128:16: 128:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.difference.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/set_lib.rs:128:16: 128:18 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:128:30: 128:32 (#0)"
                      (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                  ) (@@ "pervasive/set_lib.rs:128:41: 128:42 (#0)" (> Var "a~82") (Typ TypParam "A")))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
               ) (@@ "pervasive/set_lib.rs:128:48: 128:75 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.difference.")
                  ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:128:48: 128:60 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                     ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/set_lib.rs:128:48: 128:50 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:128:58: 128:59 (#0)"
                      (> Var "a~82") (Typ TypParam "A")))
                   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
                  ) (@@ "pervasive/set_lib.rs:128:72: 128:74 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
                ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
         (@ "pervasive/set_lib.rs:129:9: 129:52 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:129:9: 129:52 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!set_lib.lemma_len_difference.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:129:35: 129:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.remove.")
                 ((Typ TypParam "A")) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/set_lib.rs:129:35: 129:37 (#0)" (> Var "s1~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:129:45: 129:46 (#0)"
                  (> Var "a~82") (Typ TypParam "A")))
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
              ) (@@ "pervasive/set_lib.rs:129:49: 129:51 (#0)" (> Var "s2~4") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:133:1: 133:66 (#0)" (Function
  :name (Fun :path "vstd!set_lib.lemma_len_filter.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:133:34: 133:43 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/set_lib.rs:133:45: 133:54 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "A")) (Typ Bool)) :mode Spec
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:141:1: 141:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:135:9: 135:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:135:9: 135:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:137:9: 137:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:137:9: 137:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.filter.")
         ((Typ TypParam "A") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))) ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/set_lib.rs:137:9: 137:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:137:18: 137:19 (#0)"
          (> Var "f~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
       ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Bool))
   (@@ "pervasive/set_lib.rs:138:9: 138:10 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/set_lib.rs:138:9: 138:26 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/set_lib.rs:138:9: 138:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.filter.")
           ((Typ TypParam "A") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))) ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set_lib.rs:138:9: 138:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:138:18: 138:19 (#0)"
            (> Var "f~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set_lib.rs:138:30: 138:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/set_lib.rs:138:30: 138:31 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/set_lib.rs:140:9: 140:16 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.")
      ((Typ TypParam "A")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:140:9: 140:10 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
    ) (Typ Int (IntRange Nat)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:141:1: 143:2 (#0)" (> Block (
     (@ "pervasive/set_lib.rs:142:5: 142:45 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:142:5: 142:45 (#0)" (> Call (CallTarget Fun
          (CallTargetKind Static) (Fun :path "vstd!set_lib.lemma_len_intersect.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/set_lib.rs:142:30: 142:31 (#0)" (> Var "s~2") (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))) (@@ "pervasive/set_lib.rs:142:33: 142:44 (#0)"
           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.") ((Typ TypParam "A") (Typ Lambda ((Typ TypParam
                 "A")
               ) (Typ Bool))
             ) ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
            ) ((@@ "pervasive/set_lib.rs:142:42: 142:43 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "A")) (Typ Bool))))
           ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))))
        ) (Typ Tuple ()))))
    ) None
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:145:1: 145:61 (#0)" (Function
  :name (Fun :path "vstd!set_lib.set_int_range.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/set_lib.rs:145:32: 145:39 (#0)" (Param :name "lo~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/set_lib.rs:145:41: 145:48 (#0)" (Param :name "hi~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set_lib.rs:145:53: 145:61 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange
        Int)))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:145:62: 147:2 (#0)" (> Block () (@@ "pervasive/set_lib.rs:146:5: 146:41 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.") ((Typ Int (IntRange Int)) (Typ Lambda ((Typ Int (IntRange Int)))
         (Typ Bool))
       ) ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/set_lib.rs:146:14: 146:35 (#0)" (> Closure ((-> i~17 (Typ Int (IntRange Int)))) (@@ "pervasive/set_lib.rs:146:23: 146:35 (#0)"
          (> Binary (BinaryOp And) (@@ "pervasive/set_lib.rs:146:23: 146:25 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@
              "pervasive/set_lib.rs:146:23: 146:25 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))
             ) (@@ "pervasive/set_lib.rs:146:29: 146:30 (#0)" (> Var "i~17") (Typ Int (IntRange Int)))
            ) (Typ Bool)
           ) (@@ "pervasive/set_lib.rs:146:34: 146:35 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/set_lib.rs:146:34: 146:35 (#0)"
              (> Var "i~17") (Typ Int (IntRange Int))
             ) (@@ "pervasive/set_lib.rs:146:38: 146:40 (#0)" (> Var "hi~4") (Typ Int (IntRange Int)))
            ) (Typ Bool))
          ) (Typ Bool))
        ) (Typ Lambda ((Typ Int (IntRange Int))) (Typ Bool))))
     ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int)))))
   ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int))))
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:149:1: 149:47 (#0)" (Function
  :name (Fun :path "vstd!set_lib.lemma_int_range.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/set_lib.rs:149:30: 149:37 (#0)" (Param :name "lo~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/set_lib.rs:149:39: 149:46 (#0)" (Param :name "hi~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/set_lib.rs:157:1: 157:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/set_lib.rs:151:9: 151:11 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/set_lib.rs:151:9: 151:11 (#0)"
      (> Var "lo~2") (Typ Int (IntRange Int))
     ) (@@ "pervasive/set_lib.rs:151:15: 151:17 (#0)" (> Var "hi~4") (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/set_lib.rs:153:9: 153:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.finite.")
      ((Typ Int (IntRange Int))) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/set_lib.rs:153:9: 153:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.set_int_range.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/set_lib.rs:153:23: 153:25 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))) (@@ "pervasive/set_lib.rs:153:27: 153:29 (#0)"
          (> Var "hi~4") (Typ Int (IntRange Int))))
       ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int))))))
    ) (Typ Bool))
   (@@ "pervasive/set_lib.rs:154:9: 154:22 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:154:9: 154:36 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.len.") ((Typ Int (IntRange Int))) () (AutospecUsage IfMarked))
       ((@@ "pervasive/set_lib.rs:154:9: 154:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.set_int_range.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/set_lib.rs:154:23: 154:25 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))) (@@ "pervasive/set_lib.rs:154:27: 154:29 (#0)"
            (> Var "hi~4") (Typ Int (IntRange Int))))
         ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int))))))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/set_lib.rs:154:40: 154:42 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/set_lib.rs:154:40: 154:42 (#0)"
        (> Var "hi~4") (Typ Int (IntRange Int))
       ) (@@ "pervasive/set_lib.rs:154:45: 154:47 (#0)" (> Var "lo~2") (Typ Int (IntRange Int)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease ((@@ "pervasive/set_lib.rs:156:9: 156:11 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/set_lib.rs:156:9: 156:11 (#0)"
      (> Var "hi~4") (Typ Int (IntRange Int))
     ) (@@ "pervasive/set_lib.rs:156:14: 156:16 (#0)" (> Var "lo~2") (Typ Int (IntRange Int)))
    ) (Typ Int (IntRange Int)))
  ) :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false :publish None
  :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger false :custom_req_err
   None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:157:1: 164:2 (#0)" (> Block () (@@ "pervasive/set_lib.rs:158:5: 163:6 (#0)" (> If (@@ "pervasive/set_lib.rs:158:8: 158:10 (#0)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/set_lib.rs:158:8: 158:10 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))) (@@ "pervasive/set_lib.rs:158:14: 158:16 (#0)"
         (> Var "hi~4") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/set_lib.rs:158:17: 160:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:159:9: 159:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:159:9: 159:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/set_lib.rs:159:16: 159:29 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set."
                 ((Typ Int (IntRange Int))))
               ) (@@ "pervasive/set_lib.rs:159:16: 159:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.set_int_range.")
                  () () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:159:30: 159:32 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))) (@@ "pervasive/set_lib.rs:159:34: 159:36 (#0)"
                   (> Var "hi~4") (Typ Int (IntRange Int))))
                ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int))))
               ) (@@ "pervasive/set_lib.rs:159:42: 159:54 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.empty.")
                  ((Typ Int (IntRange Int))) () (AutospecUsage IfMarked)
                 ) ()
                ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int)))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ())
      ) (@@ "pervasive/set_lib.rs:160:12: 163:6 (#0)" (> Block (
         (@ "pervasive/set_lib.rs:161:9: 161:36 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:161:9: 161:36 (#0)" (> Call (CallTarget Fun
              (CallTargetKind Static) (Fun :path "vstd!set_lib.lemma_int_range.") () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/set_lib.rs:161:25: 161:27 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))) (@@ "pervasive/set_lib.rs:161:29: 161:31 (#0)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/set_lib.rs:161:29: 161:31 (#0)" (> Var "hi~4") (Typ Int (IntRange
                   Int))
                ) (@@ "pervasive/set_lib.rs:161:34: 161:35 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
               ) (Typ Int (IntRange Int))))
            ) (Typ Tuple ()))))
         (@ "pervasive/set_lib.rs:162:9: 162:15 (#0)" (Stmt Expr (@@ "pervasive/set_lib.rs:162:9: 162:15 (#0)" (> AssertAssume :is_assume
             false :expr (@@ "pervasive/set_lib.rs:162:16: 162:29 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!set.Set."
                 ((Typ Int (IntRange Int))))
               ) (@@ "pervasive/set_lib.rs:162:16: 162:56 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.insert.")
                  ((Typ Int (IntRange Int))) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:162:16: 162:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.set_int_range.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/set_lib.rs:162:30: 162:32 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))) (@@ "pervasive/set_lib.rs:162:34: 162:36 (#0)"
                      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/set_lib.rs:162:34: 162:36 (#0)" (> Var "hi~4") (Typ Int (IntRange
                          Int))
                       ) (@@ "pervasive/set_lib.rs:162:39: 162:40 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                      ) (Typ Int (IntRange Int))))
                   ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int))))
                  ) (@@ "pervasive/set_lib.rs:162:49: 162:51 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/set_lib.rs:162:49: 162:51 (#0)"
                     (> Var "hi~4") (Typ Int (IntRange Int))
                    ) (@@ "pervasive/set_lib.rs:162:54: 162:55 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
                   ) (Typ Int (IntRange Int))))
                ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int))))
               ) (@@ "pervasive/set_lib.rs:162:61: 162:82 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set_lib.set_int_range.")
                  () () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/set_lib.rs:162:75: 162:77 (#0)" (> Var "lo~2") (Typ Int (IntRange Int))) (@@ "pervasive/set_lib.rs:162:79: 162:81 (#0)"
                   (> Var "hi~4") (Typ Int (IntRange Int))))
                ) (Typ Datatype "vstd!set.Set." ((Typ Int (IntRange Int)))))
              ) (Typ Bool))
            ) (Typ Tuple ()))))
        ) None
       ) (Typ Tuple ()))
     ) (Typ Tuple ()))
   ) (Typ Tuple ())
  ) :extra_dependencies ()))

(@ "pervasive/set_lib.rs:168:1: 168:63 (#0)" (Function
  :name (Fun :path "vstd!set_lib.check_argument_is_set.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!set_lib." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/set_lib.rs:168:43: 168:52 (#0)" (Param :name "s~2" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/set_lib.rs:168:57: 168:63 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!set.Set." ((Typ TypParam
       "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/set_lib.rs:168:64: 168:69 (#0)" (> Block () (@@ "pervasive/set_lib.rs:168:66: 168:67 (#0)" (> Var "s~2")
     (Typ Datatype "vstd!set.Set." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/slice.rs:12:9: 12:34 (#0)" (Function
  :name (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path "vstd!slice.SliceAdditionalSpecFns.")
  :visibility (Visibility :restricted_to None) :owning_module "vstd!slice." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/slice.rs:12:17: 12:22 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "Self%"))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/slice.rs:12:27: 12:33 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/slice.rs:13:9: 13:43 (#0)" (Function
  :name (Fun :path "vstd!slice.SliceAdditionalSpecFns.spec_index.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path
   "vstd!slice.SliceAdditionalSpecFns."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!slice." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/slice.rs:13:23: 13:28 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "Self%"))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/slice.rs:13:30: 13:36 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/slice.rs:13:41: 13:42 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/slice.rs:17:10: 17:34 (#0)" (Function
  :name (Fun :path "vstd!slice.impl&%0.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.")
   :impl_path "vstd!slice.impl&%0." :trait_path "vstd!slice.SliceAdditionalSpecFns." :trait_typ_args ((Typ TypParam "T")) :self_typ
   (Typ Datatype "slice%." ((Typ TypParam "T")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!slice." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/slice.rs:17:18: 17:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
       ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/slice.rs:17:28: 17:34 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/slice.rs:20:15: 20:48 (#0)" (Function
  :name (Fun :path "vstd!slice.impl&%0.spec_index.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!slice.SliceAdditionalSpecFns.spec_index.")
   :impl_path "vstd!slice.impl&%0." :trait_path "vstd!slice.SliceAdditionalSpecFns." :trait_typ_args ((Typ TypParam "T")) :self_typ
   (Typ Datatype "slice%." ((Typ TypParam "T")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!slice." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/slice.rs:20:29: 20:34 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
       ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/slice.rs:20:36: 20:42 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/slice.rs:20:47: 20:48 (#0)" (Param :name "%return" :typ (Typ TypParam "T") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/slice.rs:20:49: 22:6 (#0)" (> Block () (@@ "pervasive/slice.rs:21:9: 21:29 (#0)" (> Call (CallTarget Fun
       (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ TypParam "T")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/slice.rs:21:9: 21:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
            ((Typ TypParam "T")) ())
          ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T"))
          ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
         ) ((@@ "pervasive/slice.rs:21:9: 21:13 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ TypParam
               "T"))))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
       ) (@@ "pervasive/slice.rs:21:27: 21:28 (#0)" (> Var "i~4") (Typ Int (IntRange Int))))
     ) (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/slice.rs:26:1: 26:66 (#0)" (Function
  :name (Fun :path "vstd!slice.slice_index_get.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!slice." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/slice.rs:26:32: 26:43 (#0)" (Param :name "slice~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
       ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/slice.rs:26:45: 26:53 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/slice.rs:26:64: 26:66 (#0)" (Param :name "out~53" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))
    :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/slice.rs:27:14: 27:15 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt))) ((@@ "pervasive/slice.rs:27:14: 27:15 (#0)"
       (> Const (Constant Int 0)) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/slice.rs:27:19: 27:20 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/slice.rs:27:23: 27:41 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "T")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/slice.rs:27:23: 27:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
              ((Typ TypParam "T")) ())
            ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T"))
            ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
           ) ((@@ "pervasive/slice.rs:27:23: 27:28 (#0)" (> Var "slice~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ
                 TypParam "T"))))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/slice.rs:28:13: 28:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/slice.rs:28:14: 28:17 (#0)" (> Var "out~53")
      (Typ Decorate (TypDecoration Ref) (Typ TypParam "T"))
     ) (@@ "pervasive/slice.rs:28:21: 28:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/slice.rs:28:21: 28:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
             ((Typ TypParam "T")) ())
           ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T"))
           ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/slice.rs:28:21: 28:26 (#0)" (> Var "slice~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ
                TypParam "T"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/slice.rs:28:34: 28:35 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ TypParam "T"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/slice.rs:35:1: 35:63 (#0)" (Function
  :name (Fun :path "vstd!slice.slice_to_vec.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!slice." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/slice.rs:35:35: 35:46 (#0)" (Param :name "slice~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
       ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/slice.rs:35:57: 35:63 (#0)" (Param :name "out~10" :typ (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T")
      (Typ Datatype "alloc!alloc.Global." ()))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/slice.rs:36:13: 36:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/slice.rs:36:13: 36:17 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ TypParam "T") (Typ Datatype "alloc!alloc.Global."
            ())
          ) ((tuple "A" "alloc!alloc.impl&%1.")))
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ Datatype
            "alloc!alloc.Global." ()))
         ) (Typ TypParam "T")
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/slice.rs:36:13: 36:16 (#0)" (> Var "out~10") (Typ Datatype "alloc!vec.Vec." ((Typ TypParam "T") (Typ Datatype
            "alloc!alloc.Global." ())))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/slice.rs:36:21: 36:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
          ((Typ TypParam "T")) ())
        ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T"))
        ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/slice.rs:36:21: 36:26 (#0)" (> Var "slice~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ
             TypParam "T"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/slice.rs:42:1: 42:87 (#0)" (Function
  :name (Fun :path "vstd!slice.slice_subrange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!slice." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/slice.rs:42:35: 42:49 (#0)" (Param :name "slice~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
       ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/slice.rs:42:51: 42:59 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/slice.rs:42:61: 42:69 (#0)" (Param :name "j~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/slice.rs:42:80: 42:87 (#0)" (Param :name "out~62" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%."
      ((Typ TypParam "T")))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/slice.rs:43:14: 43:15 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Le) (InequalityOp Le)))
     ((@@ "pervasive/slice.rs:43:14: 43:15 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/slice.rs:43:19: 43:20 (#0)"
       (> Var "i~4") (Typ Int (IntRange USize))
      ) (@@ "pervasive/slice.rs:43:24: 43:25 (#0)" (> Var "j~6") (Typ Int (IntRange USize))) (@@ "pervasive/slice.rs:43:29: 43:41 (#0)"
       (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ TypParam "T")) () (AutospecUsage IfMarked))
        ((@@ "pervasive/slice.rs:43:29: 43:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
              ((Typ TypParam "T")) ())
            ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T"))
            ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
           ) ((@@ "pervasive/slice.rs:43:29: 43:34 (#0)" (> Var "slice~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ
                 TypParam "T"))))))
          ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/slice.rs:44:13: 44:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/slice.rs:44:13: 44:17 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.") ((Typ TypParam "T")) ())) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.")
        ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T")) ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/slice.rs:44:13: 44:16 (#0)" (> Var "out~62") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ
             TypParam "T"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
     ) (@@ "pervasive/slice.rs:44:21: 44:56 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/slice.rs:44:21: 44:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.")
             ((Typ TypParam "T")) ())
           ) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.") ((Typ Datatype "slice%." ((Typ TypParam "T"))) (Typ TypParam "T"))
           ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/slice.rs:44:21: 44:26 (#0)" (> Var "slice~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ
                TypParam "T"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T")))
        ) (@@ "pervasive/slice.rs:44:37: 44:38 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/slice.rs:44:47: 44:48 (#0)"
         (> Var "j~6") (Typ Int (IntRange USize))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "T"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:113:5: 113:46 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%0.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:113:22: 113:26 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/cell.rs:113:31: 113:46 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam
       "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:119:5: 119:36 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!cell." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:119:20: 119:25 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
       ((Typ TypParam "V")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/cell.rs:119:30: 119:36 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!cell.CellId." ()) :mode Spec
    :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:125:5: 125:60 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/cell.rs:125:28: 125:60 (#0)" (Param :name "pt~8" :typ (Typ Tuple ((Typ Datatype "vstd!cell.PCell."
       ((Typ TypParam "V"))
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/cell.rs:126:17: 126:19 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:126:17: 126:23 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:126:17: 126:22 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind (
            ModeCoercion Other)
          ) (@@ "pervasive/cell.rs:126:17: 126:21 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/cell.rs:126:17: 126:19 (#0)"
             (> Var "pt~8") (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ
                 Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V")))
     ) (@@ "pervasive/cell.rs:88:9: 91:10 (#666)" (> Ctor "vstd!cell.PointsToData." "PointsToData" ((-> pcell (@@ "pervasive/cell.rs:127:25: 127:34 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/cell.rs:127:25: 127:29 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/cell.rs:127:25: 127:27 (#0)"
               (> Var "pt~8") (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ
                   Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))))
             ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V")))))
          ) (Typ Datatype "vstd!cell.CellId." ()))
        ) (-> value (@@ "pervasive/cell.rs:127:38: 127:50 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
           ((Typ TypParam "V")))))
       ) None
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:135:5: 135:70 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.put.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:135:16: 135:21 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Param :name "perm~9" :typ (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/cell.rs:135:65: 135:69 (#0)" (Param :name "v~6" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/cell.rs:143:5: 143:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/cell.rs:137:13: 137:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:137:13: 137:23 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:137:13: 137:22 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V")))
     ) (@@ "pervasive/cell.rs:88:9: 91:10 (#665)" (> Ctor "vstd!cell.PointsToData." "PointsToData" ((-> pcell (@@ "pervasive/cell.rs:138:27: 138:36 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/cell.rs:138:27: 138:31 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
               ((Typ TypParam "V"))))))
          ) (Typ Datatype "vstd!cell.CellId." ()))
        ) (-> value (@@ "pervasive/cell.rs:138:40: 138:52 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
           ((Typ TypParam "V")))))
       ) None
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:140:13: 140:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:140:13: 140:18 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:140:13: 140:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!cell.PointsTo."
           ((Typ TypParam "V"))))))
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V")))
     ) (@@ "pervasive/cell.rs:88:9: 91:10 (#664)" (> Ctor "vstd!cell.PointsToData." "PointsToData" ((-> pcell (@@ "pervasive/cell.rs:141:27: 141:36 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/cell.rs:141:27: 141:31 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
               ((Typ TypParam "V"))))))
          ) (Typ Datatype "vstd!cell.CellId." ()))
        ) (-> value (@@ "pervasive/cell.rs:141:40: 141:55 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/cell.rs:141:53: 141:54 (#0)"
              (> Var "v~6") (Typ TypParam "V")))
           ) None
          ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
       ) None
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:152:5: 152:74 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.take.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:152:17: 152:22 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Param :name "perm~7" :typ (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/cell.rs:152:73: 152:74 (#0)" (Param :name "v~59" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/cell.rs:154:13: 154:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:154:13: 154:22 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:154:13: 154:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
           ((Typ TypParam "V"))))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:154:27: 154:43 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:154:27: 154:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:154:27: 154:36 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:155:13: 155:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:155:13: 155:29 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/cell.rs:155:13: 155:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/cell.rs:155:13: 155:22 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
         ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:157:13: 157:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:157:13: 157:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant "PointsToData" :field "pcell" :get_variant false))
       (@@ "pervasive/cell.rs:157:13: 157:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:157:13: 157:17 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!cell.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:157:29: 157:45 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:157:29: 157:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:157:29: 157:38 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:158:13: 158:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:158:13: 158:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/cell.rs:158:13: 158:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:158:13: 158:17 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!cell.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/cell.rs:158:29: 158:41 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
       ((Typ TypParam "V"))))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:159:13: 159:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:159:13: 159:14 (#0)" (> Var "v~59")
      (Typ TypParam "V")
     ) (@@ "pervasive/cell.rs:159:19: 159:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/cell.rs:159:19: 159:35 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/cell.rs:159:19: 159:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/cell.rs:159:19: 159:28 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
           ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:171:5: 171:90 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.replace.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:171:20: 171:25 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Param :name "perm~9" :typ (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/cell.rs:171:69: 171:76 (#0)" (Param :name "in_v~6" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/cell.rs:171:89: 171:90 (#0)" (Param :name "out_v~61" :typ (Typ TypParam "V") :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/cell.rs:173:13: 173:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:173:13: 173:22 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:173:13: 173:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
           ((Typ TypParam "V"))))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:173:27: 173:43 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:173:27: 173:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:173:27: 173:36 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:174:13: 174:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:174:13: 174:29 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/cell.rs:174:13: 174:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/cell.rs:174:13: 174:22 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
         ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:176:13: 176:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:176:13: 176:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant "PointsToData" :field "pcell" :get_variant false))
       (@@ "pervasive/cell.rs:176:13: 176:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:176:13: 176:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!cell.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:176:29: 176:45 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:176:29: 176:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:176:29: 176:38 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:177:13: 177:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:177:13: 177:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/cell.rs:177:13: 177:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:177:13: 177:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!cell.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/cell.rs:177:29: 177:47 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/cell.rs:177:42: 177:46 (#0)"
          (> Var "in_v~6") (Typ TypParam "V")))
       ) None
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:178:13: 178:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:178:13: 178:18 (#0)" (> Var "out_v~61")
      (Typ TypParam "V")
     ) (@@ "pervasive/cell.rs:178:23: 178:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/cell.rs:178:23: 178:39 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/cell.rs:178:23: 178:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/cell.rs:178:23: 178:32 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
           ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:194:5: 194:86 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.borrow.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:194:23: 194:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate (TypDecoration
        Ref
       ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/cell.rs:194:81: 194:86 (#0)" (Param :name "v~53" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
    :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/cell.rs:196:13: 196:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:196:13: 196:22 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:196:13: 196:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
           ((Typ TypParam "V"))))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:196:27: 196:38 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:196:27: 196:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:196:27: 196:31 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:197:13: 197:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:197:13: 197:24 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/cell.rs:197:13: 197:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/cell.rs:197:13: 197:17 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PointsTo."
              ((Typ TypParam "V"))))))
         ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:199:13: 199:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:199:14: 199:15 (#0)" (> Var "v~53")
      (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
     ) (@@ "pervasive/cell.rs:199:20: 199:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/cell.rs:199:20: 199:31 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/cell.rs:199:20: 199:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/cell.rs:199:20: 199:24 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PointsTo."
                ((Typ TypParam "V"))))))
           ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:211:5: 211:74 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:211:23: 211:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V")))
     :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/cell.rs:211:73: 211:74 (#0)" (Param :name "v~53" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/cell.rs:213:13: 213:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:213:13: 213:22 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:213:13: 213:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V")))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:213:27: 213:38 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:213:27: 213:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:213:27: 213:31 (#0)" (> Var "perm~7") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:214:13: 214:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:214:13: 214:24 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/cell.rs:214:13: 214:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/cell.rs:214:13: 214:17 (#0)" (> Var "perm~7") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:216:13: 216:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:216:13: 216:14 (#0)" (> Var "v~53")
      (Typ TypParam "V")
     ) (@@ "pervasive/cell.rs:216:19: 216:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/cell.rs:216:19: 216:30 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/cell.rs:216:19: 216:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/cell.rs:216:19: 216:23 (#0)" (> Var "perm~7") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
           ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:218:5: 221:6 (#0)" (> Block (
     (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp~80"
         :mutable false
        ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
       ) :mode Proof :init None))
     (@ "pervasive/cell.rs:219:9: 219:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:219:9: 219:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:219:9: 219:12 (#0)" (> Block () (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign
             :init_not_mut true :lhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> VarLoc "verus_tmp~80") (Typ Datatype "vstd!cell.PointsTo."
               ((Typ TypParam "V")))
             ) :rhs (@@ "pervasive/cell.rs:219:32: 219:36 (#0)" (> Var "perm~7") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/cell.rs:219:21: 219:29 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:219:21: 219:29 (#0)" (Pattern Var :name
         "perm~91" :mutable true
        ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
       ) :mode Proof :init None))
     (@ "pervasive/cell.rs:219:9: 219:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:219:9: 219:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:219:9: 219:12 (#0)" (> Block (
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp_perm~97"
                :mutable true
               ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
              ) :mode Proof :init (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp~80") (Typ Datatype "vstd!cell.PointsTo." (
                 (Typ TypParam "V"))))))
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Expr (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign :init_not_mut false
                :lhs (@@ "pervasive/cell.rs:219:25: 219:29 (#0)" (> VarLoc "perm~91") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
                :rhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp_perm~97") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam
                    "V"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/cell.rs:220:9: 220:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.take.")
       ((Typ TypParam "V")) () (AutospecUsage Final)
      ) ((@@ "pervasive/cell.rs:220:9: 220:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V")))) (@@
        "pervasive/cell.rs:220:27: 220:36 (#0)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/cell.rs:220:27: 220:36 (#0)"
          (> Loc (@@ "pervasive/cell.rs:220:32: 220:36 (#0)" (> VarLoc "perm~91") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
          (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
        ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
     ) (Typ TypParam "V"))
   ) (Typ TypParam "V")
  ) :extra_dependencies ()))

(@ "pervasive/cell.rs:224:5: 224:62 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%1.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:224:16: 224:20 (#0)" (Param :name "v~2" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/cell.rs:224:30: 224:62 (#0)" (Param :name "pt~10" :typ (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam
         "V"))
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/cell.rs:225:17: 225:86 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:225:18: 225:24 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:225:18: 225:23 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind (
            ModeCoercion Other)
          ) (@@ "pervasive/cell.rs:225:18: 225:22 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/cell.rs:225:18: 225:20 (#0)"
             (> Var "pt~10") (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ
                 Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V")))
     ) (@@ "pervasive/cell.rs:225:29: 225:85 (#0)" (> Ctor "vstd!cell.PointsToData." "PointsToData" ((-> pcell (@@ "pervasive/cell.rs:225:50: 225:59 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/cell.rs:225:50: 225:54 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/cell.rs:225:50: 225:52 (#0)"
               (> Var "pt~10") (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ
                   Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))))
             ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V")))))
          ) (Typ Datatype "vstd!cell.CellId." ()))
        ) (-> value (@@ "pervasive/cell.rs:225:68: 225:83 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/cell.rs:225:81: 225:82 (#0)"
              (> Var "v~2") (Typ TypParam "V")))
           ) None
          ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
       ) None
      ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:226:5: 230:6 (#0)" (> Block (
     (@ "pervasive/cell.rs:227:13: 227:32 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:227:13: 227:32 (#0)" (Pattern Tuple ((@@
           "pervasive/cell.rs:227:14: 227:15 (#0)" (Pattern Var :name "p~58" :mutable false) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam
              "V")))
          ) (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp_t~59" :mutable false) (Typ Decorate (TypDecoration
             Tracked
            ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
            ((Typ TypParam "V"))))))
       ) :mode Exec :init (@@ "pervasive/cell.rs:227:35: 227:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.empty.")
          ((Typ TypParam "V")) () (AutospecUsage Final)
         ) ()
        ) (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
            ((Typ TypParam "V")))))))))
     (@ "pervasive/cell.rs:227:25: 227:30 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:227:25: 227:30 (#0)" (Pattern Var :name
         "t~63" :mutable true
        ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
       ) :mode Proof :init None))
     (@ "pervasive/cell.rs:227:9: 227:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:227:9: 227:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:227:9: 227:12 (#0)" (> Block (
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Expr (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign :init_not_mut false
                :lhs (@@ "pervasive/cell.rs:227:29: 227:30 (#0)" (> VarLoc "t~63") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
                :rhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode Proof
                   :kind (ModeCoercion Other)
                  ) (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp_t~59") (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
                     ((Typ TypParam "V")))))
                 ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/cell.rs:228:9: 228:34 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:228:9: 228:34 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!cell.impl&%1.put.") ((Typ TypParam "V")) () (AutospecUsage Final)
         ) ((@@ "pervasive/cell.rs:228:9: 228:10 (#0)" (> Var "p~58") (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V")))) (@@ "pervasive/cell.rs:228:23: 228:29 (#0)"
           (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/cell.rs:228:23: 228:29 (#0)" (> Loc (@@ "pervasive/cell.rs:228:28: 228:29 (#0)"
               (> VarLoc "t~63") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
             ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
           ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
          ) (@@ "pervasive/cell.rs:228:32: 228:33 (#0)" (> Var "v~2") (Typ TypParam "V")))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/cell.rs:229:9: 229:24 (#0)" (> Tuple ((@@ "pervasive/cell.rs:229:10: 229:11 (#0)" (> Var "p~58") (Typ Datatype
         "vstd!cell.PCell." ((Typ TypParam "V")))
       ) (@@ "pervasive/cell.rs:229:21: 229:22 (#0)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/cell.rs:229:21: 229:22 (#0)"
          (> Var "t~63") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V"))))
        ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))))
     ) (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
         ((Typ TypParam "V")))))))
   ) (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
       ((Typ TypParam "V"))))))
  ) :extra_dependencies ()))

(@ "pervasive/cell.rs:236:5: 236:75 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%2.write.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:236:18: 236:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Param :name "perm~9" :typ (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "V")))
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/cell.rs:236:67: 236:74 (#0)" (Param :name "in_v~6" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/cell.rs:244:5: 244:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/cell.rs:238:13: 238:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:238:13: 238:22 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/cell.rs:238:13: 238:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.PCell."
           ((Typ TypParam "V"))))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:238:27: 238:43 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:238:27: 238:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:238:27: 238:36 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:239:13: 239:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:239:13: 239:29 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/cell.rs:239:13: 239:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/cell.rs:239:13: 239:22 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
         ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:241:13: 241:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:241:13: 241:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant "PointsToData" :field "pcell" :get_variant false))
       (@@ "pervasive/cell.rs:241:13: 241:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:241:13: 241:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!cell.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ())
     ) (@@ "pervasive/cell.rs:241:29: 241:45 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
         "PointsToData" :field "pcell" :get_variant false)
       ) (@@ "pervasive/cell.rs:241:29: 241:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:241:29: 241:38 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!cell.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "vstd!cell.CellId." ()))
    ) (Typ Bool))
   (@@ "pervasive/cell.rs:242:13: 242:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:242:13: 242:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/cell.rs:242:13: 242:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/cell.rs:242:13: 242:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!cell.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/cell.rs:242:29: 242:39 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/cell.rs:242:34: 242:38 (#0)"
          (> Var "in_v~6") (Typ TypParam "V")))
       ) None
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/cell.rs:251:10: 251:66 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%3.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!cell.impl&%3." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ Datatype "vstd!set.Set."
       ((Typ TypParam "T"))
      ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
    ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))
   ) :self_typ (Typ Datatype "vstd!cell.InvCellPred." ())
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!cell." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:251:17: 251:38 (#0)" (Param :name "k~2" :typ (Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))
       (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:251:40: 251:57 (#0)" (Param :name "perm~4" :typ (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/cell.rs:251:62: 251:66 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:251:67: 257:6 (#0)" (> Block (
     (@ "pervasive/cell.rs:252:13: 252:37 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:252:13: 252:37 (#0)" (Pattern Tuple ((@@
           "pervasive/cell.rs:252:14: 252:29 (#0)" (Pattern Var :name "possible_values~9" :mutable false) (Typ Datatype "vstd!set.Set."
            ((Typ TypParam "T")))
          ) (@@ "pervasive/cell.rs:252:31: 252:36 (#0)" (Pattern Var :name "pcell~10" :mutable false) (Typ Datatype "vstd!cell.PCell."
            ((Typ TypParam "T")))))
        ) (Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
       ) :mode Spec :init (@@ "pervasive/cell.rs:252:40: 252:41 (#0)" (> Var "k~2") (Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam
             "T"))
          ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))))))
    ) (@@ "pervasive/cell.rs:252:43: 256:10 (#0)" (> Block () (@@ "pervasive/cell.rs:253:15: 255:20 (#0)" (> Binary (BinaryOp And)
        (@@ "pervasive/cell.rs:253:15: 254:30 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/cell.rs:253:15: 253:36 (#0)" (> Call (CallTarget
             Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.") ((Typ TypParam "T")) ())) (Fun :path
              "vstd!std_specs.option.OptionAdditionalFns.is_Some."
             ) ((Typ Datatype "core!option.Option." ((Typ TypParam "T"))) (Typ TypParam "T")) ((tuple "Self%" "vstd!std_specs.option.impl&%0."))
             (AutospecUsage IfMarked)
            ) ((@@ "pervasive/cell.rs:253:15: 253:26 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
                 "PointsToData" :field "value" :get_variant false)
               ) (@@ "pervasive/cell.rs:253:15: 253:20 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
                  ((Typ TypParam "T")) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/cell.rs:253:15: 253:19 (#0)" (> Var "perm~4") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))))
                ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "T"))))
              ) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))))
           ) (Typ Bool)
          ) (@@ "pervasive/cell.rs:254:15: 254:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.")
             ((Typ TypParam "T")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/cell.rs:254:15: 254:30 (#0)" (> Var "possible_values~9") (Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))))
             (@@ "pervasive/cell.rs:254:40: 254:64 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
                  ((Typ TypParam "T")) ())
                ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "T")))
                 (Typ TypParam "T")
                ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/cell.rs:254:40: 254:51 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
                    "PointsToData" :field "value" :get_variant false)
                  ) (@@ "pervasive/cell.rs:254:40: 254:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
                     ((Typ TypParam "T")) () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/cell.rs:254:40: 254:44 (#0)" (> Var "perm~4") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))))
                   ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "T"))))
                 ) (Typ Datatype "core!option.Option." ((Typ TypParam "T")))))
              ) (Typ TypParam "T")))
           ) (Typ Bool))
         ) (Typ Bool)
        ) (@@ "pervasive/cell.rs:255:15: 255:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:255:15: 255:25 (#0)" (> Call
            (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.id.") ((Typ TypParam "T")) () (AutospecUsage IfMarked))
            ((@@ "pervasive/cell.rs:255:15: 255:20 (#0)" (> Var "pcell~10") (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
           ) (Typ Datatype "vstd!cell.CellId." ())
          ) (@@ "pervasive/cell.rs:255:30: 255:41 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.PointsToData." :variant
              "PointsToData" :field "pcell" :get_variant false)
            ) (@@ "pervasive/cell.rs:255:30: 255:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%0.view.")
               ((Typ TypParam "T")) () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/cell.rs:255:30: 255:34 (#0)" (> Var "perm~4") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))))
             ) (Typ Datatype "vstd!cell.PointsToData." ((Typ TypParam "T"))))
           ) (Typ Datatype "vstd!cell.CellId." ()))
         ) (Typ Bool))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/cell.rs:268:5: 268:41 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%4.wf.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!cell." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:268:27: 268:32 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
       ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/cell.rs:268:37: 268:41 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:268:42: 270:6 (#0)" (> Block () (@@ "pervasive/cell.rs:269:13: 269:17 (#0)" (> Binary (BinaryOp
       Eq Spec
      ) (@@ "pervasive/cell.rs:269:13: 269:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%1.constant.")
         ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
          (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())
         ) ((tuple "Pred" "vstd!cell.impl&%3.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/cell.rs:269:13: 269:27 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
            (ModeCoercion Other)
           ) (@@ "pervasive/cell.rs:269:13: 269:26 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
               :field "perm_inv" :get_variant false)
             ) (@@ "pervasive/cell.rs:269:13: 269:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
                ((Typ TypParam "T")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set."
                  ((Typ TypParam "T"))
                 ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
               ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))))
          ) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype
               "vstd!cell.PCell." ((Typ TypParam "T"))))
            ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))))
       ) (Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
      ) (@@ "pervasive/cell.rs:269:43: 269:78 (#0)" (> Tuple ((@@ "pervasive/cell.rs:269:44: 269:65 (#0)" (> Unary (UnaryOp CoerceMode
            :op_mode Spec :from_mode Spec :to_mode Spec :kind (ModeCoercion Other)
           ) (@@ "pervasive/cell.rs:269:44: 269:64 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
               :field "possible_values" :get_variant false)
             ) (@@ "pervasive/cell.rs:269:44: 269:48 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
                ((Typ TypParam "T")))))
            ) (Typ Decorate (TypDecoration Ghost) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))))
          ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))
         ) (@@ "pervasive/cell.rs:269:67: 269:77 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
             :field "pcell" :get_variant false)
           ) (@@ "pervasive/cell.rs:269:67: 269:71 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
              ((Typ TypParam "T")))))
          ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
       ) (Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/cell.rs:272:5: 272:50 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%4.inv.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Spec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:272:28: 272:33 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
       ((Typ TypParam "T")))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:272:35: 272:41 (#0)" (Param :name "val~4" :typ (Typ TypParam "T") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/cell.rs:272:46: 272:50 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:272:51: 274:6 (#0)" (> Block () (@@ "pervasive/cell.rs:273:13: 273:48 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.contains.") ((Typ TypParam "T")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/cell.rs:273:13: 273:34 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
          (ModeCoercion Other)
         ) (@@ "pervasive/cell.rs:273:13: 273:33 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
             :field "possible_values" :get_variant false)
           ) (@@ "pervasive/cell.rs:273:13: 273:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
              ((Typ TypParam "T")))))
          ) (Typ Decorate (TypDecoration Ghost) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))))
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))
       ) (@@ "pervasive/cell.rs:273:44: 273:47 (#0)" (> Var "val~4") (Typ TypParam "T")))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/cell.rs:276:5: 276:74 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%4.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:276:16: 276:22 (#0)" (Param :name "val~2" :typ (Typ TypParam "T") :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Param :name "f~7" :typ (Typ Decorate (TypDecoration Ghost) (Typ Lambda ((Typ TypParam
         "T")
       ) (Typ Bool))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_f~4")))
  ) :ret (@ "pervasive/cell.rs:276:70: 276:74 (#0)" (Param :name "cell~37" :typ (Typ Datatype "vstd!cell.InvCell." ((Typ TypParam
       "T"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/cell.rs:277:18: 277:24 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/cell.rs:277:18: 277:19 (#0)" (> Var "f~7")
       (Typ Lambda ((Typ TypParam "T")) (Typ Bool)))
     ) ((@@ "pervasive/cell.rs:277:20: 277:23 (#0)" (> Var "val~2") (Typ TypParam "T")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:278:17: 278:36 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/cell.rs:278:17: 278:26 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%4.wf.") ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/cell.rs:278:17: 278:21 (#0)" (> Var "cell~37") (Typ Datatype "vstd!cell.InvCell." ((Typ TypParam "T")))))
      ) (Typ Bool)
     ) (@@ "pervasive/cell.rs:278:30: 278:36 (#0)" (> Quant (Forall :boxed_params true) ((-> v~51 (Typ TypParam "T"))) (@@ "pervasive/cell.rs:278:41: 278:42 (#0)"
        (> Binary (BinaryOp Eq Spec) (@@ "pervasive/cell.rs:278:41: 278:45 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/cell.rs:278:41: 278:42 (#0)"
             (> Var "f~7") (Typ Lambda ((Typ TypParam "T")) (Typ Bool)))
           ) ((@@ "pervasive/cell.rs:278:43: 278:44 (#0)" (> Var "v~51") (Typ TypParam "T")))
          ) (Typ Bool)
         ) (@@ "pervasive/cell.rs:278:51: 278:62 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%4.inv.")
            ((Typ TypParam "T")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/cell.rs:278:51: 278:55 (#0)" (> Var "cell~37") (Typ Datatype "vstd!cell.InvCell." ((Typ TypParam "T"))))
            (@@ "pervasive/cell.rs:278:60: 278:61 (#0)" (> Var "v~51") (Typ TypParam "T")))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:279:5: 289:6 (#0)" (> Block (
     (@ "pervasive/cell.rs:280:13: 280:35 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:280:13: 280:35 (#0)" (Pattern Tuple ((@@
           "pervasive/cell.rs:280:14: 280:19 (#0)" (Pattern Var :name "pcell~81" :mutable false) (Typ Datatype "vstd!cell.PCell." ((Typ
              TypParam "T")))
          ) (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp_perm~82" :mutable false) (Typ Decorate (TypDecoration
             Tracked
            ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))))))
        ) (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
            ((Typ TypParam "T"))))))
       ) :mode Exec :init (@@ "pervasive/cell.rs:280:38: 280:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.new.")
          ((Typ TypParam "T")) () (AutospecUsage Final)
         ) ((@@ "pervasive/cell.rs:280:49: 280:52 (#0)" (> Var "val~2") (Typ TypParam "T")))
        ) (Typ Tuple ((Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!cell.PointsTo."
            ((Typ TypParam "T")))))))))
     (@ "pervasive/cell.rs:280:29: 280:33 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:280:29: 280:33 (#0)" (Pattern Var :name
         "perm~86" :mutable true
        ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))
       ) :mode Proof :init None))
     (@ "pervasive/cell.rs:280:9: 280:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:280:9: 280:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:280:9: 280:12 (#0)" (> Block (
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Expr (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign :init_not_mut false
                :lhs (@@ "pervasive/cell.rs:280:29: 280:33 (#0)" (> VarLoc "perm~86") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))))
                :rhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode Proof
                   :kind (ModeCoercion Other)
                  ) (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp_perm~82") (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                     "vstd!cell.PointsTo." ((Typ TypParam "T")))))
                 ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp~100"
         :mutable true
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))
       ) :mode Spec :init None))
     (@ "pervasive/cell.rs:281:9: 281:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:281:9: 281:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:281:9: 281:12 (#0)" (> Block () (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign
             :init_not_mut false :lhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> VarLoc "verus_tmp~100") (Typ Datatype "vstd!set.Set."
               ((Typ TypParam "T")))
             ) :rhs (@@ "pervasive/cell.rs:281:37: 281:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!set.impl&%0.new.")
                ((Typ TypParam "T") (Typ Lambda ((Typ TypParam "T")) (Typ Bool))) ((tuple "F" "builtin!impl&%49.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/cell.rs:281:46: 281:47 (#0)" (> Var "f~7") (Typ Lambda ((Typ TypParam "T")) (Typ Bool))))
              ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/cell.rs:281:19: 281:34 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:281:19: 281:34 (#0)" (Pattern Var :name
         "possible_values~116" :mutable true
        ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))
       ) :mode Spec :init None))
     (@ "pervasive/cell.rs:281:9: 281:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:281:9: 281:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:281:9: 281:12 (#0)" (> Block (
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp_possible_values~122"
                :mutable false
               ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))
              ) :mode Spec :init (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp~100") (Typ Datatype "vstd!set.Set." ((Typ TypParam
                  "T"))))))
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Expr (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign :init_not_mut false
                :lhs (@@ "pervasive/cell.rs:281:19: 281:34 (#0)" (> VarLoc "possible_values~116") (Typ Datatype "vstd!set.Set." ((Typ TypParam
                    "T")))
                ) :rhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp_possible_values~122") (Typ Datatype "vstd!set.Set." ((Typ
                    TypParam "T"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp~133"
         :mutable false
        ) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype
             "vstd!cell.PCell." ((Typ TypParam "T"))))
          ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))
       ) :mode Proof :init None))
     (@ "pervasive/cell.rs:282:9: 282:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:282:9: 282:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:282:9: 282:12 (#0)" (> Block () (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign
             :init_not_mut true :lhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> VarLoc "verus_tmp~133") (Typ Datatype "vstd!invariant.LocalInvariant."
               ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
                (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))
             ) :rhs (@@ "pervasive/cell.rs:282:32: 283:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%1.new.")
                ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
                 (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())
                ) ((tuple "Pred" "vstd!cell.impl&%3.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/cell.rs:283:13: 283:37 (#0)" (> Tuple ((@@ "pervasive/cell.rs:283:14: 283:29 (#0)" (> Var "possible_values~116")
                    (Typ Datatype "vstd!set.Set." ((Typ TypParam "T")))
                   ) (@@ "pervasive/cell.rs:283:31: 283:36 (#0)" (> Var "pcell~81") (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
                 ) (Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
                ) (@@ "pervasive/cell.rs:283:39: 283:43 (#0)" (> Var "perm~86") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))))
                (@@ "pervasive/cell.rs:283:45: 283:46 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype
                   "vstd!cell.PCell." ((Typ TypParam "T"))))
                ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ()))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/cell.rs:282:21: 282:29 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:282:21: 282:29 (#0)" (Pattern Var :name
         "perm_inv~160" :mutable false
        ) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype
             "vstd!cell.PCell." ((Typ TypParam "T"))))
          ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))
       ) :mode Proof :init None))
     (@ "pervasive/cell.rs:282:9: 282:12 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:282:9: 282:12 (#0)" (> Ghost :alloc_wrapper false
         :tracked false :expr (@@ "pervasive/cell.rs:282:9: 282:12 (#0)" (> Block (
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Pattern Var :name "verus_tmp_perm_inv~166"
                :mutable false
               ) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype
                    "vstd!cell.PCell." ((Typ TypParam "T"))))
                 ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))
              ) :mode Proof :init (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp~133") (Typ Datatype "vstd!invariant.LocalInvariant."
                ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
                 (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ()))))))
            (@ "pervasive/cell.rs:12:1: 318:2 (#146)" (Stmt Expr (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Assign :init_not_mut true
                :lhs (@@ "pervasive/cell.rs:282:21: 282:29 (#0)" (> VarLoc "perm_inv~160") (Typ Datatype "vstd!invariant.LocalInvariant." (
                   (Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
                   (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))
                ) :rhs (@@ "pervasive/cell.rs:12:1: 318:2 (#146)" (> Var "verus_tmp_perm_inv~166") (Typ Datatype "vstd!invariant.LocalInvariant."
                  ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
                   (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ()))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/cell.rs:284:9: 288:10 (#0)" (> Ctor "vstd!cell.InvCell." "InvCell" ((-> possible_values (@@ "pervasive/cell.rs:285:36: 285:51 (#0)"
         (> Ghost :alloc_wrapper true :tracked false :expr (@@ "pervasive/cell.rs:285:36: 285:51 (#0)" (> Var "possible_values~116")
           (Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))))
         ) (Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))))
       ) (-> pcell (@@ "pervasive/cell.rs:286:13: 286:18 (#0)" (> Var "pcell~81") (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))))
       (-> perm_inv (@@ "pervasive/cell.rs:287:31: 287:39 (#0)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/cell.rs:287:31: 287:39 (#0)"
           (> Var "perm_inv~160") (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam
                  "T"))
               ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
             ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ()))))
         ) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." ((Typ TypParam "T"))) (Typ Datatype
              "vstd!cell.PCell." ((Typ TypParam "T"))))
           ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))))
      ) None
     ) (Typ Datatype "vstd!cell.InvCell." ((Typ TypParam "T"))))
   ) (Typ Datatype "vstd!cell.InvCell." ((Typ TypParam "T")))
  ) :extra_dependencies ()))

(@ "pervasive/cell.rs:293:5: 293:49 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%5.replace.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:293:20: 293:25 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
       ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/cell.rs:293:27: 293:33 (#0)" (Param :name "val~4" :typ (Typ TypParam "T") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/cell.rs:293:48: 293:49 (#0)" (Param :name "old_val~30" :typ (Typ TypParam "T") :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/cell.rs:294:18: 294:44 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/cell.rs:294:18: 294:27 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%4.wf.") ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/cell.rs:294:18: 294:22 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
           ((Typ TypParam "T"))))))
      ) (Typ Bool)
     ) (@@ "pervasive/cell.rs:294:31: 294:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%4.inv.")
        ((Typ TypParam "T")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/cell.rs:294:31: 294:35 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
           ((Typ TypParam "T"))))
        ) (@@ "pervasive/cell.rs:294:40: 294:43 (#0)" (> Var "val~4") (Typ TypParam "T")))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:295:17: 295:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%4.inv.")
      ((Typ TypParam "T")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:295:17: 295:21 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
         ((Typ TypParam "T"))))
      ) (@@ "pervasive/cell.rs:295:26: 295:33 (#0)" (> Var "old_val~30") (Typ TypParam "T")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:296:5: 302:6 (#0)" (> Block (
     (@ "pervasive/cell.rs:297:13: 297:14 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:297:13: 297:14 (#0)" (Pattern Var :name
         "r~43" :mutable false
        ) (Typ TypParam "T")
       ) :mode Exec :init None))
     (@ "pervasive/invariant.rs:449:50: 455:10 (#167)" (Stmt Expr (@@ "pervasive/invariant.rs:449:50: 455:10 (#167)" (> OpenInvariant
         (@@ "pervasive/cell.rs:298:38: 298:60 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode Proof :kind
            (ModeCoercion Other)
           ) (@@ "pervasive/cell.rs:298:38: 298:51 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
               :field "perm_inv" :get_variant false)
             ) (@@ "pervasive/cell.rs:298:38: 298:42 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
                ((Typ TypParam "T")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set."
                  ((Typ TypParam "T"))
                 ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
               ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))))
          ) (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." (
                 (Typ TypParam "T"))
               ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
             ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ()))))
         ) (-> perm~58 (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))) (@@ "pervasive/cell.rs:298:72: 300:10 (#0)" (> Block
           (
            (@ "pervasive/cell.rs:299:13: 299:60 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:299:13: 299:60 (#0)" (> Assign :init_not_mut true
                :lhs (@@ "pervasive/cell.rs:299:13: 299:14 (#0)" (> VarLoc "r~43") (Typ TypParam "T")) :rhs (@@ "pervasive/cell.rs:299:17: 299:60 (#0)"
                 (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.replace.") ((Typ TypParam "T")) () (AutospecUsage
                    Final)
                  ) ((@@ "pervasive/cell.rs:299:17: 299:27 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
                       :field "pcell" :get_variant false)
                     ) (@@ "pervasive/cell.rs:299:17: 299:21 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
                        ((Typ TypParam "T")))))
                    ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))
                   ) (@@ "pervasive/cell.rs:299:44: 299:53 (#0)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/cell.rs:299:44: 299:53 (#0)"
                      (> Loc (@@ "pervasive/cell.rs:299:49: 299:53 (#0)" (> VarLoc "perm~58") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))))
                      (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))))
                    ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))
                   ) (@@ "pervasive/cell.rs:299:56: 299:59 (#0)" (> Var "val~4") (Typ TypParam "T")))
                 ) (Typ TypParam "T"))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ())
         ) (InvAtomicity NonAtomic)
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/cell.rs:301:9: 301:10 (#0)" (> Var "r~43") (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/cell.rs:306:5: 306:33 (#0)" (Function
  :name (Fun :path "vstd!cell.impl&%6.get.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!cell." :mode Exec :fuel 1 :typ_bounds (
   (tuple "T" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/cell.rs:306:16: 306:21 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
       ((Typ TypParam "T")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/cell.rs:306:32: 306:33 (#0)" (Param :name "val~21" :typ (Typ TypParam "T") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/cell.rs:307:18: 307:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%4.wf.")
      ((Typ TypParam "T")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:307:18: 307:22 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
         ((Typ TypParam "T"))))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/cell.rs:308:17: 308:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%4.inv.")
      ((Typ TypParam "T")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/cell.rs:308:17: 308:21 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
         ((Typ TypParam "T"))))
      ) (@@ "pervasive/cell.rs:308:26: 308:29 (#0)" (> Var "val~21") (Typ TypParam "T")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/cell.rs:309:5: 315:6 (#0)" (> Block (
     (@ "pervasive/cell.rs:310:13: 310:14 (#0)" (Stmt Decl :pattern (@@ "pervasive/cell.rs:310:13: 310:14 (#0)" (Pattern Var :name
         "r~34" :mutable false
        ) (Typ TypParam "T")
       ) :mode Exec :init None))
     (@ "pervasive/invariant.rs:449:50: 455:10 (#173)" (Stmt Expr (@@ "pervasive/invariant.rs:449:50: 455:10 (#173)" (> OpenInvariant
         (@@ "pervasive/cell.rs:311:38: 311:60 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode Proof :kind
            (ModeCoercion Other)
           ) (@@ "pervasive/cell.rs:311:38: 311:51 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
               :field "perm_inv" :get_variant false)
             ) (@@ "pervasive/cell.rs:311:38: 311:42 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
                ((Typ TypParam "T")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set."
                  ((Typ TypParam "T"))
                 ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
               ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ())))))
          ) (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ Tuple ((Typ Datatype "vstd!set.Set." (
                 (Typ TypParam "T"))
               ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T"))))
             ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))) (Typ Datatype "vstd!cell.InvCellPred." ()))))
         ) (-> perm~49 (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))) (@@ "pervasive/cell.rs:311:72: 313:10 (#0)" (> Block
           (
            (@ "pervasive/cell.rs:312:13: 312:51 (#0)" (Stmt Expr (@@ "pervasive/cell.rs:312:13: 312:51 (#0)" (> Assign :init_not_mut true
                :lhs (@@ "pervasive/cell.rs:312:13: 312:14 (#0)" (> VarLoc "r~34") (Typ TypParam "T")) :rhs (@@ "pervasive/cell.rs:312:18: 312:51 (#0)"
                 (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!cell.impl&%1.borrow.") ((Typ TypParam "T")) () (AutospecUsage
                    Final)
                  ) ((@@ "pervasive/cell.rs:312:18: 312:28 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!cell.InvCell." :variant "InvCell"
                       :field "pcell" :get_variant false)
                     ) (@@ "pervasive/cell.rs:312:18: 312:22 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!cell.InvCell."
                        ((Typ TypParam "T")))))
                    ) (Typ Datatype "vstd!cell.PCell." ((Typ TypParam "T")))
                   ) (@@ "pervasive/cell.rs:312:44: 312:49 (#0)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/cell.rs:312:45: 312:49 (#0)"
                      (> Var "perm~49") (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T"))))
                    ) (Typ Datatype "vstd!cell.PointsTo." ((Typ TypParam "T")))))
                 ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "T")))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ())
         ) (InvAtomicity NonAtomic)
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/cell.rs:314:9: 314:10 (#0)" (> Var "r~34") (Typ TypParam "T"))
   ) (Typ TypParam "T")
  ) :extra_dependencies ()))

(@ "pervasive/invariant.rs:55:10: 55:37 (#0)" (Function
  :name (Fun :path "vstd!invariant.InvariantPredicate.inv.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path "vstd!invariant.InvariantPredicate.")
  :visibility (Visibility :restricted_to None) :owning_module "vstd!invariant." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/invariant.rs:55:17: 55:21 (#0)" (Param :name "k~2" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/invariant.rs:55:23: 55:27 (#0)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/invariant.rs:55:32: 55:36 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:182:13: 182:45 (#178)" (Function
  :name (Fun :path "vstd!invariant.impl&%0.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:182:34: 182:39 (#178)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!invariant.AtomicInvariant." ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:182:44: 182:45 (#178)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:186:13: 186:48 (#178)" (Function
  :name (Fun :path "vstd!invariant.AtomicInvariant.namespace.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!invariant." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:186:35: 186:40 (#178)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!invariant.AtomicInvariant." ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:186:45: 186:48 (#178)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:195:13: 195:54 (#178)" (Function
  :name (Fun :path "vstd!invariant.AtomicInvariant.inv.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:195:34: 195:39 (#178)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!invariant.AtomicInvariant." ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/invariant.rs:195:41: 195:45 (#178)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/invariant.rs:195:50: 195:54 (#178)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/invariant.rs:195:55: 197:14 (#178)" (> Block () (@@ "pervasive/invariant.rs:196:17: 196:46 (#178)" (>
      Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!invariant.InvariantPredicate.inv.") ((Typ TypParam "Pred")
        (Typ TypParam "K") (Typ TypParam "V")
       ) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/invariant.rs:196:27: 196:42 (#178)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
          ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/invariant.rs:196:27: 196:31 (#178)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!invariant.AtomicInvariant."
             ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred"))))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/invariant.rs:196:44: 196:45 (#178)" (> Var "v~4") (Typ TypParam "V")))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/invariant.rs:205:13: 205:96 (#178)" (Function
  :name (Fun :path "vstd!invariant.impl&%0.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:205:30: 205:34 (#178)" (Param :name "k~2" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/invariant.rs:205:36: 205:48 (#178)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Proof :is_mut false :unwrapped_info
     None))
   (@ "pervasive/invariant.rs:205:50: 205:57 (#178)" (Param :name "ns~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:205:95: 205:96 (#178)" (Param :name "i~30" :typ (Typ Datatype "vstd!invariant.AtomicInvariant."
     ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred"))
    ) :mode Proof :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/invariant.rs:207:21: 207:36 (#178)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!invariant.InvariantPredicate.inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/invariant.rs:207:31: 207:32 (#178)" (> Var "k~2") (Typ TypParam "K")) (@@ "pervasive/invariant.rs:207:34: 207:35 (#178)"
       (> Var "v~4") (Typ TypParam "V")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/invariant.rs:209:21: 209:22 (#178)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/invariant.rs:209:21: 209:33 (#178)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ TypParam "K") (Typ TypParam
          "V"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/invariant.rs:209:21: 209:22 (#178)" (> Var "i~30") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ TypParam
            "K"
           ) (Typ TypParam "V") (Typ TypParam "Pred")))))
      ) (Typ TypParam "K")
     ) (@@ "pervasive/invariant.rs:209:37: 209:38 (#178)" (> Var "k~2") (Typ TypParam "K"))
    ) (Typ Bool))
   (@@ "pervasive/invariant.rs:210:21: 210:22 (#178)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/invariant.rs:210:21: 210:34 (#178)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.AtomicInvariant.namespace.") ((Typ TypParam "K")
         (Typ TypParam "V") (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/invariant.rs:210:21: 210:22 (#178)" (> Var "i~30") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ TypParam
            "K"
           ) (Typ TypParam "V") (Typ TypParam "Pred")))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/invariant.rs:210:38: 210:40 (#178)" (> Var "ns~6") (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:220:13: 220:78 (#178)" (Function
  :name (Fun :path "vstd!invariant.impl&%0.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:220:56: 220:60 (#178)" (Param :name "self~2" :typ (Typ Datatype "vstd!invariant.AtomicInvariant."
      ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred"))
     ) :mode Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:220:77: 220:78 (#178)" (Param :name "v~10" :typ (Typ TypParam "V") :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/invariant.rs:221:25: 221:36 (#178)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.AtomicInvariant.inv.")
      ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/invariant.rs:221:25: 221:29 (#178)" (> Var "self~2") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ TypParam
          "K"
         ) (Typ TypParam "V") (Typ TypParam "Pred")))
      ) (@@ "pervasive/invariant.rs:221:34: 221:35 (#178)" (> Var "v~10") (Typ TypParam "V")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:182:13: 182:45 (#195)" (Function
  :name (Fun :path "vstd!invariant.impl&%1.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:182:34: 182:39 (#195)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!invariant.LocalInvariant." ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:182:44: 182:45 (#195)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:186:13: 186:48 (#195)" (Function
  :name (Fun :path "vstd!invariant.LocalInvariant.namespace.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!invariant." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:186:35: 186:40 (#195)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!invariant.LocalInvariant." ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:186:45: 186:48 (#195)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:195:13: 195:54 (#195)" (Function
  :name (Fun :path "vstd!invariant.LocalInvariant.inv.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:195:34: 195:39 (#195)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!invariant.LocalInvariant." ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/invariant.rs:195:41: 195:45 (#195)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/invariant.rs:195:50: 195:54 (#195)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/invariant.rs:195:55: 197:14 (#195)" (> Block () (@@ "pervasive/invariant.rs:196:17: 196:46 (#195)" (>
      Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!invariant.InvariantPredicate.inv.") ((Typ TypParam "Pred")
        (Typ TypParam "K") (Typ TypParam "V")
       ) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/invariant.rs:196:27: 196:42 (#195)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%1.constant.")
          ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/invariant.rs:196:27: 196:31 (#195)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!invariant.LocalInvariant."
             ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred"))))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/invariant.rs:196:44: 196:45 (#195)" (> Var "v~4") (Typ TypParam "V")))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/invariant.rs:205:13: 205:96 (#195)" (Function
  :name (Fun :path "vstd!invariant.impl&%1.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:205:30: 205:34 (#195)" (Param :name "k~2" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/invariant.rs:205:36: 205:48 (#195)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Proof :is_mut false :unwrapped_info
     None))
   (@ "pervasive/invariant.rs:205:50: 205:57 (#195)" (Param :name "ns~6" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:205:95: 205:96 (#195)" (Param :name "i~30" :typ (Typ Datatype "vstd!invariant.LocalInvariant."
     ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred"))
    ) :mode Proof :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/invariant.rs:207:21: 207:36 (#195)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!invariant.InvariantPredicate.inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ TypParam "V")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/invariant.rs:207:31: 207:32 (#195)" (> Var "k~2") (Typ TypParam "K")) (@@ "pervasive/invariant.rs:207:34: 207:35 (#195)"
       (> Var "v~4") (Typ TypParam "V")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/invariant.rs:209:21: 209:22 (#195)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/invariant.rs:209:21: 209:33 (#195)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%1.constant.") ((Typ TypParam "K") (Typ TypParam
          "V"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/invariant.rs:209:21: 209:22 (#195)" (> Var "i~30") (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ TypParam
            "K"
           ) (Typ TypParam "V") (Typ TypParam "Pred")))))
      ) (Typ TypParam "K")
     ) (@@ "pervasive/invariant.rs:209:37: 209:38 (#195)" (> Var "k~2") (Typ TypParam "K"))
    ) (Typ Bool))
   (@@ "pervasive/invariant.rs:210:21: 210:22 (#195)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/invariant.rs:210:21: 210:34 (#195)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.LocalInvariant.namespace.") ((Typ TypParam "K") (
          Typ TypParam "V"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/invariant.rs:210:21: 210:22 (#195)" (> Var "i~30") (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ TypParam
            "K"
           ) (Typ TypParam "V") (Typ TypParam "Pred")))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/invariant.rs:210:38: 210:40 (#195)" (> Var "ns~6") (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/invariant.rs:220:13: 220:78 (#195)" (Function
  :name (Fun :path "vstd!invariant.impl&%1.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!invariant." :mode Proof :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!invariant.InvariantPredicate.")))
  ) :params (
   (@ "pervasive/invariant.rs:220:56: 220:60 (#195)" (Param :name "self~2" :typ (Typ Datatype "vstd!invariant.LocalInvariant."
      ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred"))
     ) :mode Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/invariant.rs:220:77: 220:78 (#195)" (Param :name "v~10" :typ (Typ TypParam "V") :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/invariant.rs:221:25: 221:36 (#195)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.LocalInvariant.inv.")
      ((Typ TypParam "K") (Typ TypParam "V") (Typ TypParam "Pred")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/invariant.rs:221:25: 221:29 (#195)" (> Var "self~2") (Typ Datatype "vstd!invariant.LocalInvariant." ((Typ TypParam
          "K"
         ) (Typ TypParam "V") (Typ TypParam "Pred")))
      ) (@@ "pervasive/invariant.rs:221:34: 221:35 (#195)" (> Var "v~10") (Typ TypParam "V")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#222)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#222)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#222)" (Param :name "i~2" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#222)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicBool."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionBool." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#222)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:138:23: 138:29 (#222)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#222)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#222)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicBool." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionBool." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionBool." ())))
         ) (Typ Datatype "vstd!atomic.PermissionBool." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataBool." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#222)" (> Ctor "vstd!atomic.PermissionDataBool." "PermissionDataBool" ((-> patomic
         (@@ "pervasive/atomic.rs:138:62: 138:72 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#222)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#222)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicBool." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionBool." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicBool." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#222)" (> Var "i~2") (Typ Bool)))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#222)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#225)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionBool." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:475:80: 475:84 (#0)" (Param :name "ret~44" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#222)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:149:23: 149:27 (#222)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#222)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionBool."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#222)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#222)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionBool."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#222)" (> Var "ret~44") (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#222)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#225)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#222)" (Param :name "v~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#222)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#222)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:161:23: 161:27 (#222)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#222)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#222)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#222)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
           :variant "PermissionDataBool" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#222)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#222)" (> Var "v~6") (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#222)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:162:58: 162:62 (#222)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
           :variant "PermissionDataBool" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#222)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#222)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#225)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#222)" (Param :name "current~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#222)" (Param :name "new~8" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#222)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Bool)
      (Typ Bool))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#222)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:173:23: 173:27 (#222)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#222)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#222)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%0.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#222)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
           :variant "PermissionDataBool" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#222)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#222)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#222)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Bool) (Typ Bool)))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#222)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#222)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#222)" (Pattern Var :name "r~71" :mutable false)
               (Typ Bool))))
           ) (Typ Datatype "core!result.Result." ((Typ Bool) (Typ Bool)))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#222)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#222)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#222)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#222)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#222)" (> Var "current~6") (Typ Bool)) (@@ "pervasive/atomic.rs:178:39: 178:61 (#222)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionBool." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#222)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#222)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
                 ) (Typ Bool)
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#222)" (> Var "new~8") (Typ Bool))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#222)"
               (> Var "r~71") (Typ Bool)
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                  :variant "PermissionDataBool" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionBool." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
               ) (Typ Bool))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#222)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#222)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#222)" (Pattern Var :name "r~116" :mutable false)
               (Typ Bool))))
           ) (Typ Datatype "core!result.Result." ((Typ Bool) (Typ Bool)))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#222)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#222)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#222)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#222)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#222)"
                   (> Var "current~6") (Typ Bool)
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                      :variant "PermissionDataBool" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionBool." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
                   ) (Typ Bool))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#222)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#222)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
                 ) (Typ Bool)
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                    :variant "PermissionDataBool" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionBool." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
                 ) (Typ Bool))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#222)"
               (> Var "r~116") (Typ Bool)
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                  :variant "PermissionDataBool" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionBool." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
               ) (Typ Bool))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#222)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#225)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#222)" (Param :name "current~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#222)" (Param :name "new~8" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#222)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Bool)
      (Typ Bool))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#222)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:199:23: 199:27 (#222)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#222)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#222)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%0.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#222)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
           :variant "PermissionDataBool" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#222)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#222)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#222)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Bool) (Typ Bool)))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#222)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#222)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#222)" (Pattern Var :name "r~71" :mutable false)
               (Typ Bool))))
           ) (Typ Datatype "core!result.Result." ((Typ Bool) (Typ Bool)))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#222)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#222)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#222)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#222)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#222)" (> Var "current~6") (Typ Bool)) (@@ "pervasive/atomic.rs:204:39: 204:61 (#222)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionBool." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#222)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#222)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
                 ) (Typ Bool)
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#222)" (> Var "new~8") (Typ Bool))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#222)"
               (> Var "r~71") (Typ Bool)
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                  :variant "PermissionDataBool" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionBool." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
               ) (Typ Bool))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#222)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#222)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#222)" (Pattern Var :name "r~116" :mutable false)
               (Typ Bool))))
           ) (Typ Datatype "core!result.Result." ((Typ Bool) (Typ Bool)))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#222)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#222)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#222)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#222)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                  :variant "PermissionDataBool" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionBool." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#222)"
               (> Var "r~116") (Typ Bool)
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                  :variant "PermissionDataBool" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#222)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionBool." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
               ) (Typ Bool))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#222)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#225)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#222)" (Param :name "v~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:475:80: 475:84 (#0)" (Param :name "ret~49" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#222)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:224:23: 224:27 (#222)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#222)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#222)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#222)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#222)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#222)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#222)" (> Var "v~6") (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#222)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#222)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#222)" (> Var "ret~49") (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#222)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:228:26: 228:30 (#222)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
           :variant "PermissionDataBool" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#222)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#222)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#222)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicBool." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#225)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionBool." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:475:80: 475:84 (#0)" (Param :name "ret~44" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#222)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:238:23: 238:27 (#222)"
         (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicBool." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#222)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#222)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionBool." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#222)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#222)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#222)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#222)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionBool." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#222)" (> Var "ret~44") (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:414:9: 414:12 (#228)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:414:26: 414:31 (#228)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:409:9: 471:10 (#231)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:414:72: 414:73 (#228)" (Param :name "n~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:475:80: 475:84 (#0)" (Param :name "ret~49" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:416:17: 416:59 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:416:23: 416:32 (#228)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:416:23: 416:27 (#228)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:416:34: 416:58 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:416:34: 416:50 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:416:34: 416:43 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:418:20: 420:24 (#228)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:418:20: 419:24 (#228)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:418:20: 418:54 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:418:26: 418:48 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:418:26: 418:42 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:418:26: 418:35 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:418:50: 418:53 (#228)" (> Var "ret~49") (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:419:20: 419:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:419:20: 419:39 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "patomic"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:419:20: 419:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:419:20: 419:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int))
         ) (@@ "pervasive/atomic.rs:419:43: 419:67 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
             :variant "PermissionDataBool" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic.rs:419:43: 419:59 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:419:43: 419:52 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:420:20: 420:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:420:20: 420:37 (#228)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:420:20: 420:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:420:20: 420:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:420:41: 420:70 (#228)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:420:42: 420:64 (#228)" (
           > UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:420:42: 420:58 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:420:42: 420:51 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:420:68: 420:69 (#228)" (> Var "n~6") (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:429:9: 429:12 (#228)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:429:25: 429:30 (#228)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:409:9: 471:10 (#231)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:429:71: 429:72 (#228)" (Param :name "n~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:475:80: 475:84 (#0)" (Param :name "ret~49" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:431:17: 431:59 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:431:23: 431:32 (#228)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:431:23: 431:27 (#228)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:431:34: 431:58 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:431:34: 431:50 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:431:34: 431:43 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:433:19: 435:24 (#228)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:433:19: 434:24 (#228)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:433:19: 433:53 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:433:25: 433:47 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:433:25: 433:41 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:433:25: 433:34 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:433:49: 433:52 (#228)" (> Var "ret~49") (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:434:20: 434:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:434:20: 434:39 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "patomic"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:434:20: 434:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:434:20: 434:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int))
         ) (@@ "pervasive/atomic.rs:434:43: 434:67 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
             :variant "PermissionDataBool" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic.rs:434:43: 434:59 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:434:43: 434:52 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:435:20: 435:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:435:20: 435:37 (#228)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:435:20: 435:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:435:20: 435:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:435:41: 435:70 (#228)" (> Binary (BinaryOp Or) (@@ "pervasive/atomic.rs:435:42: 435:64 (#228)" (>
           UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:435:42: 435:58 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:435:42: 435:51 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:435:68: 435:69 (#228)" (> Var "n~6") (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:444:9: 444:12 (#228)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:444:26: 444:31 (#228)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:409:9: 471:10 (#231)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:444:72: 444:73 (#228)" (Param :name "n~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:475:80: 475:84 (#0)" (Param :name "ret~49" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:446:17: 446:59 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:446:23: 446:32 (#228)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:446:23: 446:27 (#228)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:446:34: 446:58 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:446:34: 446:50 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:446:34: 446:43 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:448:17: 450:24 (#228)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:448:17: 449:24 (#228)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:448:17: 448:51 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:448:23: 448:45 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:448:23: 448:39 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:448:23: 448:32 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:448:47: 448:50 (#228)" (> Var "ret~49") (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:449:20: 449:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:449:20: 449:39 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "patomic"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:449:20: 449:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:449:20: 449:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int))
         ) (@@ "pervasive/atomic.rs:449:43: 449:67 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
             :variant "PermissionDataBool" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic.rs:449:43: 449:59 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:449:43: 449:52 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:450:20: 450:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:450:20: 450:37 (#228)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:450:20: 450:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:450:20: 450:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:450:41: 450:107 (#228)" (> Binary (BinaryOp Or) (@@ "pervasive/atomic.rs:450:42: 450:72 (#228)" (
           > Binary (BinaryOp And) (@@ "pervasive/atomic.rs:450:43: 450:65 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
               :variant "PermissionDataBool" :field "value" :get_variant false)
             ) (@@ "pervasive/atomic.rs:450:43: 450:59 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                () () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic.rs:450:43: 450:52 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                   "vstd!atomic.PermissionBool." ()))))
              ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
            ) (Typ Bool)
           ) (@@ "pervasive/atomic.rs:450:69: 450:71 (#228)" (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:450:70: 450:71 (#228)" (> Var
               "n~6"
              ) (Typ Bool))
            ) (Typ Bool))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:450:76: 450:106 (#228)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:450:77: 450:100 (#228)"
            (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:450:78: 450:100 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
                 :variant "PermissionDataBool" :field "value" :get_variant false)
               ) (@@ "pervasive/atomic.rs:450:78: 450:94 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                  () () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/atomic.rs:450:78: 450:87 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                     "vstd!atomic.PermissionBool." ()))))
                ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
              ) (Typ Bool))
            ) (Typ Bool)
           ) (@@ "pervasive/atomic.rs:450:104: 450:105 (#228)" (> Var "n~6") (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:459:9: 459:12 (#228)" (Function
  :name (Fun :path "vstd!atomic.impl&%0.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:459:27: 459:32 (#228)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:409:9: 471:10 (#231)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:459:73: 459:74 (#228)" (Param :name "n~6" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:475:80: 475:84 (#0)" (Param :name "ret~49" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:461:17: 461:59 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:461:23: 461:32 (#228)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:461:23: 461:27 (#228)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicBool." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:461:34: 461:58 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
         :variant "PermissionDataBool" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:461:34: 461:50 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:461:34: 461:43 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionBool." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:463:17: 465:24 (#228)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:463:17: 464:24 (#228)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:463:17: 463:51 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:463:23: 463:45 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:463:23: 463:39 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:463:23: 463:32 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic.rs:463:47: 463:50 (#228)" (> Var "ret~49") (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:464:20: 464:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:464:20: 464:39 (#228)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "patomic"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:464:20: 464:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:464:20: 464:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int))
         ) (@@ "pervasive/atomic.rs:464:43: 464:67 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
             :variant "PermissionDataBool" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic.rs:464:43: 464:59 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:464:43: 464:52 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionBool." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Int (IntRange Int)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:465:20: 465:24 (#228)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:465:20: 465:37 (#228)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:465:20: 465:31 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:465:20: 465:24 (#228)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionBool."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:465:41: 465:71 (#228)" (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:465:42: 465:71 (#228)" (> Binary
           (BinaryOp And) (@@ "pervasive/atomic.rs:465:43: 465:65 (#228)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
               :variant "PermissionDataBool" :field "value" :get_variant false)
             ) (@@ "pervasive/atomic.rs:465:43: 465:59 (#228)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
                () () (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic.rs:465:43: 465:52 (#228)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                   "vstd!atomic.PermissionBool." ()))))
              ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
            ) (Typ Bool)
           ) (@@ "pervasive/atomic.rs:465:69: 465:70 (#228)" (> Var "n~6") (Typ Bool))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#216)" (Function
  :name (Fun :path "vstd!atomic.impl&%1.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#216)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionBool." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:475:48: 475:66 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataBool."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#216)" (Function
  :name (Fun :path "vstd!atomic.impl&%1.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#216)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionBool."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#216)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicBool." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#216)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#216)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#216)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#216)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
          :variant "PermissionDataBool" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#216)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#216)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionBool."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#216)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#216)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicBool." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#216)" (Function
  :name (Fun :path "vstd!atomic.impl&%1.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#216)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionBool."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#216)" (Param :name "v~4" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#216)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#216)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#216)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#216)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool."
          :variant "PermissionDataBool" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#216)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#216)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionBool."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#216)" (> Var "v~4") (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#244)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#244)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#244)" (Param :name "i~2" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#244)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU8."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU8." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#244)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:138:23: 138:29 (#244)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#244)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#244)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU8."
                 ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU8." ())))
         ) (Typ Datatype "vstd!atomic.PermissionU8." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataU8." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#244)" (> Ctor "vstd!atomic.PermissionDataU8." "PermissionDataU8" ((-> patomic (@@
          "pervasive/atomic.rs:138:62: 138:72 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#244)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#244)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU8."
                   ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicU8." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#244)" (> Var "i~2") (Typ Int (IntRange U 8))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#244)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#247)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU8." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#244)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:149:23: 149:27 (#244)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#244)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#244)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#244)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#244)" (> Var "ret~44") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#244)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#247)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#244)" (Param :name "v~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#244)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#244)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:161:23: 161:27 (#244)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#244)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#244)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#244)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
           :variant "PermissionDataU8" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#244)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#244)" (> Var "v~6") (Typ Int (IntRange U 8)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#244)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:162:58: 162:62 (#244)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
           :variant "PermissionDataU8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#244)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#244)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#247)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#244)" (Param :name "current~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#244)" (Param :name "new~8" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#244)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 8)
      ) (Typ Int (IntRange U 8)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#244)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:173:23: 173:27 (#244)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#244)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#244)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%2.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#244)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
           :variant "PermissionDataU8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#244)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#244)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#244)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 8)) (Typ Int (IntRange U 8))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#244)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#244)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#244)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 8)) (Typ Int (IntRange U 8))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#244)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#244)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#244)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#244)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#244)" (> Var "current~6") (Typ Int (IntRange U 8)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                    :variant "PermissionDataU8" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU8." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
                 ) (Typ Int (IntRange U 8)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#244)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
                    false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#244)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
                 ) (Typ Int (IntRange U 8))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#244)" (> Var "new~8") (Typ Int (IntRange U 8)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#244)"
               (> Var "r~71") (Typ Int (IntRange U 8))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                  :variant "PermissionDataU8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
               ) (Typ Int (IntRange U 8)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#244)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#244)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#244)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 8)) (Typ Int (IntRange U 8))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#244)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#244)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#244)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#244)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#244)"
                   (> Var "current~6") (Typ Int (IntRange U 8))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                      :variant "PermissionDataU8" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionU8." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
                   ) (Typ Int (IntRange U 8)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#244)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
                    false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#244)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
                 ) (Typ Int (IntRange U 8))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                    :variant "PermissionDataU8" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU8." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
                 ) (Typ Int (IntRange U 8)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#244)"
               (> Var "r~116") (Typ Int (IntRange U 8))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                  :variant "PermissionDataU8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
               ) (Typ Int (IntRange U 8)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#244)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#247)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#244)" (Param :name "current~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#244)" (Param :name "new~8" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#244)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 8)
      ) (Typ Int (IntRange U 8)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#244)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:199:23: 199:27 (#244)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#244)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#244)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%2.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#244)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
           :variant "PermissionDataU8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#244)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#244)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#244)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 8)) (Typ Int (IntRange U 8))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#244)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#244)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#244)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 8)) (Typ Int (IntRange U 8))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#244)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#244)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#244)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#244)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#244)" (> Var "current~6") (Typ Int (IntRange U 8)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                    :variant "PermissionDataU8" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU8." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
                 ) (Typ Int (IntRange U 8)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#244)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
                    false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#244)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
                 ) (Typ Int (IntRange U 8))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#244)" (> Var "new~8") (Typ Int (IntRange U 8)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#244)"
               (> Var "r~71") (Typ Int (IntRange U 8))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                  :variant "PermissionDataU8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
               ) (Typ Int (IntRange U 8)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#244)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#244)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#244)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 8)) (Typ Int (IntRange U 8))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#244)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#244)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#244)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
                  false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#244)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
               ) (Typ Int (IntRange U 8))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                  :variant "PermissionDataU8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
               ) (Typ Int (IntRange U 8)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#244)"
               (> Var "r~116") (Typ Int (IntRange U 8))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
                  :variant "PermissionDataU8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#244)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
               ) (Typ Int (IntRange U 8)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#244)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#247)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#244)" (Param :name "v~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#244)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:224:23: 224:27 (#244)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#244)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#244)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#244)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#244)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
             false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#244)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#244)" (> Var "v~6") (Typ Int (IntRange U 8)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#244)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
             false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#244)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#244)" (> Var "ret~49") (Typ Int (IntRange U 8)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#244)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:228:26: 228:30 (#244)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
           :variant "PermissionDataU8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#244)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#244)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#244)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicU8." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#247)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionU8." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#244)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:238:23: 238:27 (#244)"
         (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicU8." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#244)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#244)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU8." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#244)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#244)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#244)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#244)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU8." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#244)" (> Var "ret~44") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:260:28: 260:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_u8.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
            :variant "PermissionDataU8" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU8." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
         ) (Typ Int (IntRange U 8))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#250)" (> Var "n~6") (Typ Int (IntRange U 8))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:274:28: 274:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_u8.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
            :variant "PermissionDataU8" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU8." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
         ) (Typ Int (IntRange U 8))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#250)" (> Var "n~6") (Typ Int (IntRange U 8))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:291:23: 291:27 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#250)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#250)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#250)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#250)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#250)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#250)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#250)" (> Const (Constant Int 255)) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#250)" (> Var "ret~101") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#250)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#250)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#250)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#250)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#250)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#250)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#250)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#250)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU8." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#250)" (> Var "n~6") (Typ Int (IntRange U 8))))
     ) (Typ Int (IntRange U 8)))
   ) (Typ Int (IntRange U 8))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:307:23: 307:27 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#250)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#250)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#250)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#250)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#250)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#250)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#250)" (> Const (Constant Int 255)) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#250)" (> Var "ret~101") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#250)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#250)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#250)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#250)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#250)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#250)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#250)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#250)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU8." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#250)" (> Var "n~6") (Typ Int (IntRange U 8))))
     ) (Typ Int (IntRange U 8)))
   ) (Typ Int (IntRange U 8))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:323:28: 323:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#250)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#250)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:337:28: 337:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#250)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#250)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:351:28: 351:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#250)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#250)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:365:28: 365:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#250)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#250)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#250)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
        ) (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:379:28: 379:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#250)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#250)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
             :variant "PermissionDataU8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#250)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#250)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8)))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#250)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#250)" (> Var "n~6")
          (Typ Int (IntRange U 8)))
        ) (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#250)" (Function
  :name (Fun :path "vstd!atomic.impl&%2.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#250)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#253)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#250)" (Param :name "n~6" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:477:84: 477:86 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#250)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:393:28: 393:32 (#250)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU8." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#250)" (> Var "ret~49") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
         :variant "PermissionDataU8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#250)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#250)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#250)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#250)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#250)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#250)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
             :variant "PermissionDataU8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#250)" (> Var "n~6") (Typ Int (IntRange U 8)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#250)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#250)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#250)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#250)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8)))
        ) (Typ Int (IntRange U 8))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#250)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#250)" (> Var "n~6")
          (Typ Int (IntRange U 8)))
        ) (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:21:9: 21:58 (#233)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_u8.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:21:36: 21:42 (#233)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:21:44: 21:50 (#233)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:21:55: 21:58 (#233)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:21:59: 27:10 (#233)" (> Block () (@@ "pervasive/atomic.rs:22:13: 26:14 (#233)" (> If (@@ "pervasive/atomic.rs:22:16: 22:17 (#233)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:22:16: 22:17 (#233)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:22:16: 22:17 (#233)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:22:20: 22:21 (#233)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:22:25: 22:41 (#233)" (> Const (Constant Int 255)) (Typ Int (IntRange U 8)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:22:50: 24:14 (#233)" (> Block () (@@ "pervasive/atomic.rs:23:17: 23:18 (#233)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:23:17: 23:18 (#233)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:17: 23:18 (#233)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:21: 23:22 (#233)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:23:25: 23:84 (#233)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:26: 23:51 (#233)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:23:27: 23:43 (#233)" (> Const (Constant Int 255)) (Typ
                Int (IntRange U 8))
              ) (@@ "pervasive/atomic.rs:23:55: 23:71 (#233)" (> Const (Constant Int 0)) (Typ Int (IntRange U 8)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:82: 23:83 (#233)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:24:20: 26:14 (#233)" (> Block () (@@ "pervasive/atomic.rs:25:17: 25:18 (#233)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:25:17: 25:18 (#233)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:25:21: 25:22 (#233)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:29:9: 29:58 (#233)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_u8.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:29:36: 29:42 (#233)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:29:44: 29:50 (#233)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:29:55: 29:58 (#233)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:29:59: 35:10 (#233)" (> Block () (@@ "pervasive/atomic.rs:30:13: 34:14 (#233)" (> If (@@ "pervasive/atomic.rs:30:16: 30:17 (#233)"
       (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/atomic.rs:30:16: 30:17 (#233)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:30:16: 30:17 (#233)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:30:20: 30:21 (#233)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:30:25: 30:41 (#233)" (> Const (Constant Int 0)) (Typ Int (IntRange U 8)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:30:50: 32:14 (#233)" (> Block () (@@ "pervasive/atomic.rs:31:17: 31:18 (#233)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:31:17: 31:18 (#233)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:17: 31:18 (#233)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:21: 31:22 (#233)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:31:25: 31:84 (#233)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:31:26: 31:51 (#233)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:27: 31:43 (#233)" (> Const (Constant Int 255)) (Typ
                Int (IntRange U 8))
              ) (@@ "pervasive/atomic.rs:31:55: 31:71 (#233)" (> Const (Constant Int 0)) (Typ Int (IntRange U 8)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:82: 31:83 (#233)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:32:20: 34:14 (#233)" (> Block () (@@ "pervasive/atomic.rs:33:17: 33:18 (#233)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:33:17: 33:18 (#233)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:33:21: 33:22 (#233)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#238)" (Function
  :name (Fun :path "vstd!atomic.impl&%3.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#238)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionU8." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:477:56: 477:72 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataU8."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#238)" (Function
  :name (Fun :path "vstd!atomic.impl&%3.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#238)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU8."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#238)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicU8." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#238)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#238)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#238)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#238)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
          :variant "PermissionDataU8" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#238)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#238)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU8."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#238)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#238)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicU8." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#238)" (Function
  :name (Fun :path "vstd!atomic.impl&%3.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#238)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU8."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#238)" (Param :name "v~4" :typ (Typ Int (IntRange U 8)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#238)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#238)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#238)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#238)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8."
          :variant "PermissionDataU8" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#238)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#238)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU8."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
       ) (Typ Int (IntRange U 8))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#238)" (> Var "v~4") (Typ Int (IntRange U 8)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#266)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#266)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#266)" (Param :name "i~2" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#266)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU16."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU16." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#266)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:138:23: 138:29 (#266)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#266)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#266)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionU16." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU16." ())))
         ) (Typ Datatype "vstd!atomic.PermissionU16." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataU16." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#266)" (> Ctor "vstd!atomic.PermissionDataU16." "PermissionDataU16" ((-> patomic (
          @@ "pervasive/atomic.rs:138:62: 138:72 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#266)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#266)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionU16." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicU16." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#266)" (> Var "i~2") (Typ Int (IntRange U 16))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#266)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#269)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU16." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#266)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:149:23: 149:27 (#266)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#266)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#266)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#266)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#266)" (> Var "ret~44") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#266)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#269)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#266)" (Param :name "v~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#266)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#266)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:161:23: 161:27 (#266)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#266)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#266)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#266)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
           :variant "PermissionDataU16" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#266)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#266)" (> Var "v~6") (Typ Int (IntRange U 16)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#266)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:162:58: 162:62 (#266)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
           :variant "PermissionDataU16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#266)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#266)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#269)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#266)" (Param :name "current~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#266)" (Param :name "new~8" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#266)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 16)
      ) (Typ Int (IntRange U 16)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#266)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:173:23: 173:27 (#266)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#266)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#266)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%4.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#266)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
           :variant "PermissionDataU16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#266)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#266)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#266)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 16)) (Typ Int (IntRange U 16))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#266)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#266)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#266)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 16)) (Typ Int (IntRange U 16))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#266)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#266)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#266)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#266)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#266)" (> Var "current~6") (Typ Int (IntRange U 16)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                    :variant "PermissionDataU16" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU16." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
                 ) (Typ Int (IntRange U 16)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#266)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#266)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
                 ) (Typ Int (IntRange U 16))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#266)" (> Var "new~8") (Typ Int (IntRange U 16)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#266)"
               (> Var "r~71") (Typ Int (IntRange U 16))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                  :variant "PermissionDataU16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
               ) (Typ Int (IntRange U 16)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#266)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#266)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#266)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 16)) (Typ Int (IntRange U 16))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#266)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#266)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#266)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#266)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#266)"
                   (> Var "current~6") (Typ Int (IntRange U 16))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                      :variant "PermissionDataU16" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionU16." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
                   ) (Typ Int (IntRange U 16)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#266)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#266)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
                 ) (Typ Int (IntRange U 16))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                    :variant "PermissionDataU16" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU16." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
                 ) (Typ Int (IntRange U 16)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#266)"
               (> Var "r~116") (Typ Int (IntRange U 16))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                  :variant "PermissionDataU16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
               ) (Typ Int (IntRange U 16)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#266)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#269)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#266)" (Param :name "current~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#266)" (Param :name "new~8" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#266)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 16)
      ) (Typ Int (IntRange U 16)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#266)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:199:23: 199:27 (#266)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#266)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#266)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%4.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#266)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
           :variant "PermissionDataU16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#266)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#266)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#266)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 16)) (Typ Int (IntRange U 16))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#266)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#266)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#266)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 16)) (Typ Int (IntRange U 16))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#266)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#266)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#266)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#266)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#266)" (> Var "current~6") (Typ Int (IntRange U 16)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                    :variant "PermissionDataU16" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU16." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
                 ) (Typ Int (IntRange U 16)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#266)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#266)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
                 ) (Typ Int (IntRange U 16))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#266)" (> Var "new~8") (Typ Int (IntRange U 16)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#266)"
               (> Var "r~71") (Typ Int (IntRange U 16))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                  :variant "PermissionDataU16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
               ) (Typ Int (IntRange U 16)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#266)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#266)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#266)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 16)) (Typ Int (IntRange U 16))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#266)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#266)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#266)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#266)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
               ) (Typ Int (IntRange U 16))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                  :variant "PermissionDataU16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
               ) (Typ Int (IntRange U 16)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#266)"
               (> Var "r~116") (Typ Int (IntRange U 16))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
                  :variant "PermissionDataU16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#266)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
               ) (Typ Int (IntRange U 16)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#266)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#269)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#266)" (Param :name "v~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#266)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:224:23: 224:27 (#266)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#266)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#266)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#266)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#266)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#266)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#266)" (> Var "v~6") (Typ Int (IntRange U 16)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#266)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#266)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#266)" (> Var "ret~49") (Typ Int (IntRange U 16)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#266)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:228:26: 228:30 (#266)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
           :variant "PermissionDataU16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#266)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#266)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#266)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicU16." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#269)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionU16." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#266)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:238:23: 238:27 (#266)"
         (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicU16." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#266)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#266)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU16." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#266)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#266)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#266)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#266)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU16." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#266)" (> Var "ret~44") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:260:28: 260:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_u16.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
            :variant "PermissionDataU16" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU16." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
         ) (Typ Int (IntRange U 16))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#272)" (> Var "n~6") (Typ Int (IntRange U 16))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:274:28: 274:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_u16.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
            :variant "PermissionDataU16" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU16." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
         ) (Typ Int (IntRange U 16))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#272)" (> Var "n~6") (Typ Int (IntRange U 16))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:291:23: 291:27 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#272)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#272)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#272)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#272)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#272)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#272)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#272)" (> Const (Constant Int 65535)) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#272)" (> Var "ret~101") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#272)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#272)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#272)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#272)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#272)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#272)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#272)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#272)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU16." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#272)" (> Var "n~6") (Typ Int (IntRange U 16))))
     ) (Typ Int (IntRange U 16)))
   ) (Typ Int (IntRange U 16))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:307:23: 307:27 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#272)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#272)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#272)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#272)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#272)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#272)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#272)" (> Const (Constant Int 65535)) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#272)" (> Var "ret~101") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#272)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#272)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#272)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#272)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#272)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#272)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#272)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#272)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU16." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#272)" (> Var "n~6") (Typ Int (IntRange U 16))))
     ) (Typ Int (IntRange U 16)))
   ) (Typ Int (IntRange U 16))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:323:28: 323:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#272)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#272)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:337:28: 337:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#272)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#272)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:351:28: 351:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#272)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#272)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:365:28: 365:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#272)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#272)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#272)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
        ) (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:379:28: 379:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#272)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#272)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
             :variant "PermissionDataU16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#272)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#272)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16)))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#272)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#272)" (> Var "n~6")
          (Typ Int (IntRange U 16)))
        ) (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#272)" (Function
  :name (Fun :path "vstd!atomic.impl&%4.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#272)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#275)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#272)" (Param :name "n~6" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:478:88: 478:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#272)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:393:28: 393:32 (#272)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU16." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#272)" (> Var "ret~49") (Typ Int (IntRange U 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
         :variant "PermissionDataU16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#272)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#272)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#272)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
      ) (Typ Int (IntRange U 16))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#272)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#272)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#272)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
             :variant "PermissionDataU16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#272)" (> Var "n~6") (Typ Int (IntRange U 16)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#272)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#272)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#272)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#272)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16)))
        ) (Typ Int (IntRange U 16))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#272)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#272)" (> Var "n~6")
          (Typ Int (IntRange U 16)))
        ) (Typ Int (IntRange U 16)))
      ) (Typ Int (IntRange U 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:21:9: 21:58 (#255)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_u16.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:21:36: 21:42 (#255)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:21:44: 21:50 (#255)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:21:55: 21:58 (#255)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:21:59: 27:10 (#255)" (> Block () (@@ "pervasive/atomic.rs:22:13: 26:14 (#255)" (> If (@@ "pervasive/atomic.rs:22:16: 22:17 (#255)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:22:16: 22:17 (#255)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:22:16: 22:17 (#255)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:22:20: 22:21 (#255)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:22:25: 22:41 (#255)" (> Const (Constant Int 65535)) (Typ Int (IntRange U 16)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:22:50: 24:14 (#255)" (> Block () (@@ "pervasive/atomic.rs:23:17: 23:18 (#255)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:23:17: 23:18 (#255)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:17: 23:18 (#255)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:21: 23:22 (#255)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:23:25: 23:84 (#255)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:26: 23:51 (#255)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:23:27: 23:43 (#255)" (> Const (Constant Int 65535))
               (Typ Int (IntRange U 16))
              ) (@@ "pervasive/atomic.rs:23:55: 23:71 (#255)" (> Const (Constant Int 0)) (Typ Int (IntRange U 16)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:82: 23:83 (#255)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:24:20: 26:14 (#255)" (> Block () (@@ "pervasive/atomic.rs:25:17: 25:18 (#255)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:25:17: 25:18 (#255)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:25:21: 25:22 (#255)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:29:9: 29:58 (#255)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_u16.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:29:36: 29:42 (#255)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:29:44: 29:50 (#255)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:29:55: 29:58 (#255)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:29:59: 35:10 (#255)" (> Block () (@@ "pervasive/atomic.rs:30:13: 34:14 (#255)" (> If (@@ "pervasive/atomic.rs:30:16: 30:17 (#255)"
       (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/atomic.rs:30:16: 30:17 (#255)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:30:16: 30:17 (#255)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:30:20: 30:21 (#255)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:30:25: 30:41 (#255)" (> Const (Constant Int 0)) (Typ Int (IntRange U 16)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:30:50: 32:14 (#255)" (> Block () (@@ "pervasive/atomic.rs:31:17: 31:18 (#255)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:31:17: 31:18 (#255)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:17: 31:18 (#255)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:21: 31:22 (#255)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:31:25: 31:84 (#255)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:31:26: 31:51 (#255)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:27: 31:43 (#255)" (> Const (Constant Int 65535))
               (Typ Int (IntRange U 16))
              ) (@@ "pervasive/atomic.rs:31:55: 31:71 (#255)" (> Const (Constant Int 0)) (Typ Int (IntRange U 16)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:82: 31:83 (#255)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:32:20: 34:14 (#255)" (> Block () (@@ "pervasive/atomic.rs:33:17: 33:18 (#255)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:33:17: 33:18 (#255)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:33:21: 33:22 (#255)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#260)" (Function
  :name (Fun :path "vstd!atomic.impl&%5.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#260)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionU16." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:478:58: 478:75 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataU16."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#260)" (Function
  :name (Fun :path "vstd!atomic.impl&%5.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#260)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU16."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#260)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicU16." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#260)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#260)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#260)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#260)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
          :variant "PermissionDataU16" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#260)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#260)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU16."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#260)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#260)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicU16." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#260)" (Function
  :name (Fun :path "vstd!atomic.impl&%5.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#260)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU16."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#260)" (Param :name "v~4" :typ (Typ Int (IntRange U 16)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#260)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#260)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#260)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#260)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16."
          :variant "PermissionDataU16" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#260)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#260)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU16."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
       ) (Typ Int (IntRange U 16))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#260)" (> Var "v~4") (Typ Int (IntRange U 16)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#288)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#288)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#288)" (Param :name "i~2" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#288)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU32."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU32." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#288)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:138:23: 138:29 (#288)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#288)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#288)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionU32." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU32." ())))
         ) (Typ Datatype "vstd!atomic.PermissionU32." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataU32." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#288)" (> Ctor "vstd!atomic.PermissionDataU32." "PermissionDataU32" ((-> patomic (
          @@ "pervasive/atomic.rs:138:62: 138:72 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#288)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#288)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionU32." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicU32." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#288)" (> Var "i~2") (Typ Int (IntRange U 32))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#288)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#291)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU32." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#288)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:149:23: 149:27 (#288)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#288)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#288)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#288)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#288)" (> Var "ret~44") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#288)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#291)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#288)" (Param :name "v~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#288)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#288)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:161:23: 161:27 (#288)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#288)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#288)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#288)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
           :variant "PermissionDataU32" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#288)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#288)" (> Var "v~6") (Typ Int (IntRange U 32)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#288)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:162:58: 162:62 (#288)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
           :variant "PermissionDataU32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#288)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#288)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#291)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#288)" (Param :name "current~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#288)" (Param :name "new~8" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#288)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 32)
      ) (Typ Int (IntRange U 32)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#288)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:173:23: 173:27 (#288)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#288)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#288)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%6.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#288)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
           :variant "PermissionDataU32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#288)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#288)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#288)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 32)) (Typ Int (IntRange U 32))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#288)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#288)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#288)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 32)) (Typ Int (IntRange U 32))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#288)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#288)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#288)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#288)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#288)" (> Var "current~6") (Typ Int (IntRange U 32)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                    :variant "PermissionDataU32" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU32." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
                 ) (Typ Int (IntRange U 32)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#288)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#288)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
                 ) (Typ Int (IntRange U 32))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#288)" (> Var "new~8") (Typ Int (IntRange U 32)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#288)"
               (> Var "r~71") (Typ Int (IntRange U 32))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                  :variant "PermissionDataU32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
               ) (Typ Int (IntRange U 32)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#288)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#288)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#288)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 32)) (Typ Int (IntRange U 32))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#288)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#288)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#288)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#288)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#288)"
                   (> Var "current~6") (Typ Int (IntRange U 32))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                      :variant "PermissionDataU32" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionU32." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
                   ) (Typ Int (IntRange U 32)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#288)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#288)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
                 ) (Typ Int (IntRange U 32))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                    :variant "PermissionDataU32" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU32." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
                 ) (Typ Int (IntRange U 32)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#288)"
               (> Var "r~116") (Typ Int (IntRange U 32))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                  :variant "PermissionDataU32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
               ) (Typ Int (IntRange U 32)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#288)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#291)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#288)" (Param :name "current~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#288)" (Param :name "new~8" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#288)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 32)
      ) (Typ Int (IntRange U 32)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#288)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:199:23: 199:27 (#288)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#288)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#288)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%6.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#288)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
           :variant "PermissionDataU32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#288)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#288)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#288)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 32)) (Typ Int (IntRange U 32))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#288)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#288)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#288)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 32)) (Typ Int (IntRange U 32))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#288)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#288)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#288)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#288)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#288)" (> Var "current~6") (Typ Int (IntRange U 32)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                    :variant "PermissionDataU32" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU32." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
                 ) (Typ Int (IntRange U 32)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#288)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#288)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
                 ) (Typ Int (IntRange U 32))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#288)" (> Var "new~8") (Typ Int (IntRange U 32)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#288)"
               (> Var "r~71") (Typ Int (IntRange U 32))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                  :variant "PermissionDataU32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
               ) (Typ Int (IntRange U 32)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#288)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#288)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#288)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 32)) (Typ Int (IntRange U 32))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#288)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#288)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#288)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#288)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
               ) (Typ Int (IntRange U 32))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                  :variant "PermissionDataU32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
               ) (Typ Int (IntRange U 32)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#288)"
               (> Var "r~116") (Typ Int (IntRange U 32))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
                  :variant "PermissionDataU32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#288)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
               ) (Typ Int (IntRange U 32)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#288)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#291)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#288)" (Param :name "v~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#288)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:224:23: 224:27 (#288)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#288)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#288)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#288)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#288)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#288)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#288)" (> Var "v~6") (Typ Int (IntRange U 32)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#288)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#288)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#288)" (> Var "ret~49") (Typ Int (IntRange U 32)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#288)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:228:26: 228:30 (#288)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
           :variant "PermissionDataU32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#288)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#288)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#288)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicU32." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#291)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionU32." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#288)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:238:23: 238:27 (#288)"
         (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicU32." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#288)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#288)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU32." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#288)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#288)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#288)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#288)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU32." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#288)" (> Var "ret~44") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:260:28: 260:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_u32.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
            :variant "PermissionDataU32" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU32." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
         ) (Typ Int (IntRange U 32))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#294)" (> Var "n~6") (Typ Int (IntRange U 32))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:274:28: 274:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_u32.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
            :variant "PermissionDataU32" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU32." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
         ) (Typ Int (IntRange U 32))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#294)" (> Var "n~6") (Typ Int (IntRange U 32))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:291:23: 291:27 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#294)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#294)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#294)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#294)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#294)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#294)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#294)" (> Const (Constant Int 4294967295)) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#294)" (> Var "ret~101") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#294)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#294)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#294)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#294)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#294)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#294)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#294)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#294)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU32." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#294)" (> Var "n~6") (Typ Int (IntRange U 32))))
     ) (Typ Int (IntRange U 32)))
   ) (Typ Int (IntRange U 32))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:307:23: 307:27 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#294)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#294)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#294)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#294)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#294)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#294)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#294)" (> Const (Constant Int 4294967295)) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#294)" (> Var "ret~101") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#294)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#294)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#294)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#294)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#294)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#294)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#294)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#294)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU32." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#294)" (> Var "n~6") (Typ Int (IntRange U 32))))
     ) (Typ Int (IntRange U 32)))
   ) (Typ Int (IntRange U 32))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:323:28: 323:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#294)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#294)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:337:28: 337:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#294)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#294)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:351:28: 351:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#294)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#294)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:365:28: 365:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#294)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#294)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#294)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
        ) (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:379:28: 379:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#294)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#294)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
             :variant "PermissionDataU32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#294)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#294)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32)))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#294)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#294)" (> Var "n~6")
          (Typ Int (IntRange U 32)))
        ) (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#294)" (Function
  :name (Fun :path "vstd!atomic.impl&%6.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#294)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#297)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#294)" (Param :name "n~6" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:479:88: 479:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#294)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:393:28: 393:32 (#294)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU32." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#294)" (> Var "ret~49") (Typ Int (IntRange U 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
         :variant "PermissionDataU32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#294)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#294)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#294)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
      ) (Typ Int (IntRange U 32))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#294)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#294)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#294)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
             :variant "PermissionDataU32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#294)" (> Var "n~6") (Typ Int (IntRange U 32)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#294)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#294)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#294)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#294)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32)))
        ) (Typ Int (IntRange U 32))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#294)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#294)" (> Var "n~6")
          (Typ Int (IntRange U 32)))
        ) (Typ Int (IntRange U 32)))
      ) (Typ Int (IntRange U 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:21:9: 21:58 (#277)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_u32.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:21:36: 21:42 (#277)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:21:44: 21:50 (#277)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:21:55: 21:58 (#277)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:21:59: 27:10 (#277)" (> Block () (@@ "pervasive/atomic.rs:22:13: 26:14 (#277)" (> If (@@ "pervasive/atomic.rs:22:16: 22:17 (#277)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:22:16: 22:17 (#277)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:22:16: 22:17 (#277)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:22:20: 22:21 (#277)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:22:25: 22:41 (#277)" (> Const (Constant Int 4294967295)) (Typ Int (IntRange U 32)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:22:50: 24:14 (#277)" (> Block () (@@ "pervasive/atomic.rs:23:17: 23:18 (#277)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:23:17: 23:18 (#277)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:17: 23:18 (#277)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:21: 23:22 (#277)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:23:25: 23:84 (#277)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:26: 23:51 (#277)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:23:27: 23:43 (#277)" (> Const (Constant Int 4294967295))
               (Typ Int (IntRange U 32))
              ) (@@ "pervasive/atomic.rs:23:55: 23:71 (#277)" (> Const (Constant Int 0)) (Typ Int (IntRange U 32)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:82: 23:83 (#277)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:24:20: 26:14 (#277)" (> Block () (@@ "pervasive/atomic.rs:25:17: 25:18 (#277)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:25:17: 25:18 (#277)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:25:21: 25:22 (#277)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:29:9: 29:58 (#277)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_u32.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:29:36: 29:42 (#277)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:29:44: 29:50 (#277)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:29:55: 29:58 (#277)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:29:59: 35:10 (#277)" (> Block () (@@ "pervasive/atomic.rs:30:13: 34:14 (#277)" (> If (@@ "pervasive/atomic.rs:30:16: 30:17 (#277)"
       (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/atomic.rs:30:16: 30:17 (#277)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:30:16: 30:17 (#277)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:30:20: 30:21 (#277)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:30:25: 30:41 (#277)" (> Const (Constant Int 0)) (Typ Int (IntRange U 32)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:30:50: 32:14 (#277)" (> Block () (@@ "pervasive/atomic.rs:31:17: 31:18 (#277)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:31:17: 31:18 (#277)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:17: 31:18 (#277)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:21: 31:22 (#277)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:31:25: 31:84 (#277)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:31:26: 31:51 (#277)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:27: 31:43 (#277)" (> Const (Constant Int 4294967295))
               (Typ Int (IntRange U 32))
              ) (@@ "pervasive/atomic.rs:31:55: 31:71 (#277)" (> Const (Constant Int 0)) (Typ Int (IntRange U 32)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:82: 31:83 (#277)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:32:20: 34:14 (#277)" (> Block () (@@ "pervasive/atomic.rs:33:17: 33:18 (#277)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:33:17: 33:18 (#277)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:33:21: 33:22 (#277)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#282)" (Function
  :name (Fun :path "vstd!atomic.impl&%7.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#282)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionU32." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:479:58: 479:75 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataU32."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#282)" (Function
  :name (Fun :path "vstd!atomic.impl&%7.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#282)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU32."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#282)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicU32." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#282)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#282)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#282)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#282)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
          :variant "PermissionDataU32" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#282)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#282)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU32."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#282)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#282)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicU32." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#282)" (Function
  :name (Fun :path "vstd!atomic.impl&%7.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#282)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU32."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#282)" (Param :name "v~4" :typ (Typ Int (IntRange U 32)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#282)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#282)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#282)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#282)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32."
          :variant "PermissionDataU32" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#282)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#282)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU32."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
       ) (Typ Int (IntRange U 32))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#282)" (> Var "v~4") (Typ Int (IntRange U 32)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#310)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#310)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#310)" (Param :name "i~2" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#310)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU64."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU64." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#310)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:138:23: 138:29 (#310)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#310)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#310)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionU64." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU64." ())))
         ) (Typ Datatype "vstd!atomic.PermissionU64." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataU64." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#310)" (> Ctor "vstd!atomic.PermissionDataU64." "PermissionDataU64" ((-> patomic (
          @@ "pervasive/atomic.rs:138:62: 138:72 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#310)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#310)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionU64." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicU64." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#310)" (> Var "i~2") (Typ Int (IntRange U 64))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#310)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#313)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU64." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#310)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:149:23: 149:27 (#310)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#310)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#310)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#310)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#310)" (> Var "ret~44") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#310)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#313)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#310)" (Param :name "v~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#310)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#310)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:161:23: 161:27 (#310)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#310)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#310)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#310)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
           :variant "PermissionDataU64" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#310)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#310)" (> Var "v~6") (Typ Int (IntRange U 64)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#310)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:162:58: 162:62 (#310)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
           :variant "PermissionDataU64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#310)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#310)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#313)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#310)" (Param :name "current~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#310)" (Param :name "new~8" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#310)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 64)
      ) (Typ Int (IntRange U 64)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#310)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:173:23: 173:27 (#310)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#310)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#310)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%8.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#310)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
           :variant "PermissionDataU64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#310)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#310)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#310)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 64)) (Typ Int (IntRange U 64))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#310)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#310)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#310)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 64)) (Typ Int (IntRange U 64))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#310)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#310)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#310)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#310)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#310)" (> Var "current~6") (Typ Int (IntRange U 64)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                    :variant "PermissionDataU64" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU64." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
                 ) (Typ Int (IntRange U 64)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#310)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#310)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
                 ) (Typ Int (IntRange U 64))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#310)" (> Var "new~8") (Typ Int (IntRange U 64)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#310)"
               (> Var "r~71") (Typ Int (IntRange U 64))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                  :variant "PermissionDataU64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
               ) (Typ Int (IntRange U 64)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#310)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#310)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#310)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 64)) (Typ Int (IntRange U 64))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#310)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#310)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#310)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#310)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#310)"
                   (> Var "current~6") (Typ Int (IntRange U 64))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                      :variant "PermissionDataU64" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionU64." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
                   ) (Typ Int (IntRange U 64)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#310)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#310)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
                 ) (Typ Int (IntRange U 64))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                    :variant "PermissionDataU64" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU64." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
                 ) (Typ Int (IntRange U 64)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#310)"
               (> Var "r~116") (Typ Int (IntRange U 64))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                  :variant "PermissionDataU64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
               ) (Typ Int (IntRange U 64)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#310)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#313)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#310)" (Param :name "current~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#310)" (Param :name "new~8" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#310)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange U 64)
      ) (Typ Int (IntRange U 64)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#310)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:199:23: 199:27 (#310)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#310)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#310)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%8.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#310)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
           :variant "PermissionDataU64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#310)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#310)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#310)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 64)) (Typ Int (IntRange U 64))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#310)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#310)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#310)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange U 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 64)) (Typ Int (IntRange U 64))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#310)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#310)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#310)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#310)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#310)" (> Var "current~6") (Typ Int (IntRange U 64)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                    :variant "PermissionDataU64" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionU64." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
                 ) (Typ Int (IntRange U 64)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#310)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#310)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
                 ) (Typ Int (IntRange U 64))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#310)" (> Var "new~8") (Typ Int (IntRange U 64)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#310)"
               (> Var "r~71") (Typ Int (IntRange U 64))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                  :variant "PermissionDataU64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
               ) (Typ Int (IntRange U 64)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#310)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#310)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#310)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange U 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange U 64)) (Typ Int (IntRange U 64))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#310)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#310)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#310)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#310)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
               ) (Typ Int (IntRange U 64))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                  :variant "PermissionDataU64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
               ) (Typ Int (IntRange U 64)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#310)"
               (> Var "r~116") (Typ Int (IntRange U 64))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
                  :variant "PermissionDataU64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#310)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionU64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
               ) (Typ Int (IntRange U 64)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#310)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#313)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#310)" (Param :name "v~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#310)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:224:23: 224:27 (#310)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#310)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#310)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#310)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#310)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#310)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#310)" (> Var "v~6") (Typ Int (IntRange U 64)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#310)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#310)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#310)" (> Var "ret~49") (Typ Int (IntRange U 64)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#310)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:228:26: 228:30 (#310)"
           (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
           :variant "PermissionDataU64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#310)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#310)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#310)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicU64." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#313)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionU64." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#310)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:238:23: 238:27 (#310)"
         (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicU64." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#310)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#310)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU64." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#310)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#310)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#310)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#310)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionU64." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#310)" (> Var "ret~44") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:260:28: 260:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_u64.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
            :variant "PermissionDataU64" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU64." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
         ) (Typ Int (IntRange U 64))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#316)" (> Var "n~6") (Typ Int (IntRange U 64))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:274:28: 274:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_u64.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
            :variant "PermissionDataU64" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionU64." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
         ) (Typ Int (IntRange U 64))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#316)" (> Var "n~6") (Typ Int (IntRange U 64))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:291:23: 291:27 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#316)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#316)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#316)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#316)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#316)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#316)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#316)" (> Const (Constant Int 18446744073709551615)) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#316)" (> Var "ret~101") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#316)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#316)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#316)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#316)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#316)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#316)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#316)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#316)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU64." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#316)" (> Var "n~6") (Typ Int (IntRange U 64))))
     ) (Typ Int (IntRange U 64)))
   ) (Typ Int (IntRange U 64))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:307:23: 307:27 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#316)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#316)"
      (> Const (Constant Int 0)) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#316)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#316)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#316)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#316)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#316)" (> Const (Constant Int 18446744073709551615)) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#316)" (> Var "ret~101") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#316)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#316)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#316)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#316)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#316)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#316)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#316)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#316)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionU64." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#316)" (> Var "n~6") (Typ Int (IntRange U 64))))
     ) (Typ Int (IntRange U 64)))
   ) (Typ Int (IntRange U 64))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:323:28: 323:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#316)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#316)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:337:28: 337:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#316)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#316)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:351:28: 351:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#316)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#316)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionU64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:365:28: 365:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#316)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#316)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#316)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
        ) (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:379:28: 379:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#316)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#316)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
             :variant "PermissionDataU64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#316)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#316)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64)))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#316)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#316)" (> Var "n~6")
          (Typ Int (IntRange U 64)))
        ) (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#316)" (Function
  :name (Fun :path "vstd!atomic.impl&%8.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#316)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#319)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#316)" (Param :name "n~6" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:480:88: 480:91 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#316)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/atomic.rs:393:28: 393:32 (#316)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicU64." ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#316)" (> Var "ret~49") (Typ Int (IntRange U 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
         :variant "PermissionDataU64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionU64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#316)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#316)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#316)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionU64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
      ) (Typ Int (IntRange U 64))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#316)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#316)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#316)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
             :variant "PermissionDataU64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#316)" (> Var "n~6") (Typ Int (IntRange U 64)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#316)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#316)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#316)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#316)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionU64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64)))
        ) (Typ Int (IntRange U 64))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#316)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#316)" (> Var "n~6")
          (Typ Int (IntRange U 64)))
        ) (Typ Int (IntRange U 64)))
      ) (Typ Int (IntRange U 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:21:9: 21:58 (#299)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_u64.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:21:36: 21:42 (#299)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:21:44: 21:50 (#299)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:21:55: 21:58 (#299)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:21:59: 27:10 (#299)" (> Block () (@@ "pervasive/atomic.rs:22:13: 26:14 (#299)" (> If (@@ "pervasive/atomic.rs:22:16: 22:17 (#299)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:22:16: 22:17 (#299)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:22:16: 22:17 (#299)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:22:20: 22:21 (#299)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:22:25: 22:41 (#299)" (> Const (Constant Int 18446744073709551615)) (Typ Int (IntRange U 64)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:22:50: 24:14 (#299)" (> Block () (@@ "pervasive/atomic.rs:23:17: 23:18 (#299)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:23:17: 23:18 (#299)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:17: 23:18 (#299)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:21: 23:22 (#299)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:23:25: 23:84 (#299)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:26: 23:51 (#299)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:23:27: 23:43 (#299)" (> Const (Constant Int 18446744073709551615))
               (Typ Int (IntRange U 64))
              ) (@@ "pervasive/atomic.rs:23:55: 23:71 (#299)" (> Const (Constant Int 0)) (Typ Int (IntRange U 64)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:82: 23:83 (#299)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:24:20: 26:14 (#299)" (> Block () (@@ "pervasive/atomic.rs:25:17: 25:18 (#299)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:25:17: 25:18 (#299)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:25:21: 25:22 (#299)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:29:9: 29:58 (#299)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_u64.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:29:36: 29:42 (#299)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:29:44: 29:50 (#299)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:29:55: 29:58 (#299)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:29:59: 35:10 (#299)" (> Block () (@@ "pervasive/atomic.rs:30:13: 34:14 (#299)" (> If (@@ "pervasive/atomic.rs:30:16: 30:17 (#299)"
       (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/atomic.rs:30:16: 30:17 (#299)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:30:16: 30:17 (#299)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:30:20: 30:21 (#299)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:30:25: 30:41 (#299)" (> Const (Constant Int 0)) (Typ Int (IntRange U 64)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:30:50: 32:14 (#299)" (> Block () (@@ "pervasive/atomic.rs:31:17: 31:18 (#299)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:31:17: 31:18 (#299)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:17: 31:18 (#299)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:21: 31:22 (#299)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:31:25: 31:84 (#299)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:31:26: 31:51 (#299)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:27: 31:43 (#299)" (> Const (Constant Int 18446744073709551615))
               (Typ Int (IntRange U 64))
              ) (@@ "pervasive/atomic.rs:31:55: 31:71 (#299)" (> Const (Constant Int 0)) (Typ Int (IntRange U 64)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:82: 31:83 (#299)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:32:20: 34:14 (#299)" (> Block () (@@ "pervasive/atomic.rs:33:17: 33:18 (#299)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:33:17: 33:18 (#299)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:33:21: 33:22 (#299)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#304)" (Function
  :name (Fun :path "vstd!atomic.impl&%9.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#304)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionU64." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:480:58: 480:75 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataU64."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#304)" (Function
  :name (Fun :path "vstd!atomic.impl&%9.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#304)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU64."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#304)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicU64." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#304)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#304)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#304)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#304)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
          :variant "PermissionDataU64" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#304)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#304)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU64."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#304)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#304)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicU64." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#304)" (Function
  :name (Fun :path "vstd!atomic.impl&%9.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#304)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU64."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#304)" (Param :name "v~4" :typ (Typ Int (IntRange U 64)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#304)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#304)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#304)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#304)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64."
          :variant "PermissionDataU64" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#304)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#304)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionU64."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
       ) (Typ Int (IntRange U 64))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#304)" (> Var "v~4") (Typ Int (IntRange U 64)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#332)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#332)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#332)" (Param :name "i~2" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#332)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicUsize."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionUsize." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#332)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.") () () (AutospecUsage IfMarked)) (
        (@@ "pervasive/atomic.rs:138:23: 138:29 (#332)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#332)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#332)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicUsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionUsize." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionUsize." ())))
         ) (Typ Datatype "vstd!atomic.PermissionUsize." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#332)" (> Ctor "vstd!atomic.PermissionDataUsize." "PermissionDataUsize" ((-> patomic
         (@@ "pervasive/atomic.rs:138:62: 138:72 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#332)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#332)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicUsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionUsize." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicUsize." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#332)" (> Var "i~2") (Typ Int (IntRange USize))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#332)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#335)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionUsize." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#332)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:149:23: 149:27 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#332)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#332)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#332)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#332)" (> Var "ret~44") (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#332)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#335)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#332)" (Param :name "v~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#332)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#332)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:161:23: 161:27 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#332)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#332)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#332)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
           :variant "PermissionDataUsize" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#332)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#332)" (> Var "v~6") (Typ Int (IntRange USize)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#332)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:162:58: 162:62 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
           :variant "PermissionDataUsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#332)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#332)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#335)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ())
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#332)" (Param :name "current~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#332)" (Param :name "new~8" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#332)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange USize)
      ) (Typ Int (IntRange USize)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#332)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:173:23: 173:27 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#332)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#332)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%10.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
           :variant "PermissionDataUsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#332)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#332)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#332)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange USize)) (Typ Int (IntRange USize))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#332)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#332)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#332)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange USize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange USize)) (Typ Int (IntRange USize))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#332)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#332)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#332)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#332)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#332)" (> Var "current~6") (Typ Int (IntRange USize)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                    :variant "PermissionDataUsize" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionUsize." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
                 ) (Typ Int (IntRange USize)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#332)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#332)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
                 ) (Typ Int (IntRange USize))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#332)" (> Var "new~8") (Typ Int (IntRange USize)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#332)"
               (> Var "r~71") (Typ Int (IntRange USize))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                  :variant "PermissionDataUsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionUsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
               ) (Typ Int (IntRange USize)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#332)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#332)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#332)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange USize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange USize)) (Typ Int (IntRange USize))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#332)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#332)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#332)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#332)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#332)"
                   (> Var "current~6") (Typ Int (IntRange USize))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                      :variant "PermissionDataUsize" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionUsize." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
                   ) (Typ Int (IntRange USize)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#332)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#332)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
                 ) (Typ Int (IntRange USize))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                    :variant "PermissionDataUsize" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionUsize." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
                 ) (Typ Int (IntRange USize)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#332)"
               (> Var "r~116") (Typ Int (IntRange USize))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                  :variant "PermissionDataUsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionUsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
               ) (Typ Int (IntRange USize)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#332)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#335)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ())
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#332)" (Param :name "current~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#332)" (Param :name "new~8" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#332)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange USize)
      ) (Typ Int (IntRange USize)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#332)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:199:23: 199:27 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#332)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#332)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%10.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
           :variant "PermissionDataUsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#332)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#332)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#332)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange USize)) (Typ Int (IntRange USize))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#332)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#332)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#332)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange USize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange USize)) (Typ Int (IntRange USize))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#332)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#332)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#332)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#332)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#332)" (> Var "current~6") (Typ Int (IntRange USize)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                    :variant "PermissionDataUsize" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionUsize." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
                 ) (Typ Int (IntRange USize)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#332)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#332)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
                 ) (Typ Int (IntRange USize))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#332)" (> Var "new~8") (Typ Int (IntRange USize)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#332)"
               (> Var "r~71") (Typ Int (IntRange USize))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                  :variant "PermissionDataUsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionUsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
               ) (Typ Int (IntRange USize)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#332)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#332)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#332)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange USize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange USize)) (Typ Int (IntRange USize))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#332)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#332)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#332)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#332)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
               ) (Typ Int (IntRange USize))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                  :variant "PermissionDataUsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionUsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
               ) (Typ Int (IntRange USize)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#332)"
               (> Var "r~116") (Typ Int (IntRange USize))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
                  :variant "PermissionDataUsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#332)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionUsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
               ) (Typ Int (IntRange USize)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#332)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#335)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#332)" (Param :name "v~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#332)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:224:23: 224:27 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#332)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#332)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#332)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#332)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#332)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#332)" (> Var "v~6") (Typ Int (IntRange USize)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#332)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#332)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionUsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#332)" (> Var "ret~49") (Typ Int (IntRange USize)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#332)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:228:26: 228:30 (#332)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
           :variant "PermissionDataUsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#332)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#332)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#332)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicUsize." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#335)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionUsize." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#332)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:238:23: 238:27 (#332)" (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicUsize." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#332)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#332)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionUsize." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#332)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#332)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#332)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#332)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionUsize." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#332)" (> Var "ret~44") (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:260:28: 260:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_usize.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
            :variant "PermissionDataUsize" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionUsize." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
         ) (Typ Int (IntRange USize))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#338)" (> Var "n~6") (Typ Int (IntRange USize))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:274:28: 274:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_usize.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
            :variant "PermissionDataUsize" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionUsize." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
         ) (Typ Int (IntRange USize))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#338)" (> Var "n~6") (Typ Int (IntRange USize))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:291:23: 291:27 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#338)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#338)"
      (> Const (Constant Int 0)) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#338)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#338)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#338)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#338)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#338)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind UnsignedMax)
        Exec
       ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#338)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits)
          Exec
         ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#338)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#338)" (> Var "ret~101") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#338)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#338)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#338)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#338)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#338)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#338)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#338)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionUsize." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#338)" (> Var "n~6") (Typ Int (IntRange USize))))
     ) (Typ Int (IntRange USize)))
   ) (Typ Int (IntRange USize))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:307:23: 307:27 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#338)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#338)"
      (> Const (Constant Int 0)) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#338)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#338)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#338)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#338)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#338)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind UnsignedMax)
        Exec
       ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#338)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits)
          Exec
         ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#338)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#338)" (> Var "ret~101") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#338)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#338)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#338)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#338)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#338)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#338)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#338)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionUsize." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#338)" (> Var "n~6") (Typ Int (IntRange USize))))
     ) (Typ Int (IntRange USize)))
   ) (Typ Int (IntRange USize))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:323:28: 323:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#338)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#338)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:337:28: 337:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#338)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#338)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:351:28: 351:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#338)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#338)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionUsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:365:28: 365:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#338)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#338)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#338)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionUsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
        ) (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:379:28: 379:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#338)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#338)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
             :variant "PermissionDataUsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionUsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#338)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#338)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionUsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize)))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#338)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#338)" (> Var "n~6")
          (Typ Int (IntRange USize)))
        ) (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#338)" (Function
  :name (Fun :path "vstd!atomic.impl&%10.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#338)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#341)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#338)" (Param :name "n~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:96: 481:101 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#338)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:393:28: 393:32 (#338)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicUsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#338)" (> Var "ret~49") (Typ Int (IntRange USize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
         :variant "PermissionDataUsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#338)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#338)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#338)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionUsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#338)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#338)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#338)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
             :variant "PermissionDataUsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionUsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#338)" (> Var "n~6") (Typ Int (IntRange USize)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#338)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#338)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#338)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#338)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionUsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize)))
        ) (Typ Int (IntRange USize))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#338)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#338)" (> Var "n~6")
          (Typ Int (IntRange USize)))
        ) (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:21:9: 21:58 (#321)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_usize.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:21:36: 21:42 (#321)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:21:44: 21:50 (#321)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:21:55: 21:58 (#321)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:21:59: 27:10 (#321)" (> Block () (@@ "pervasive/atomic.rs:22:13: 26:14 (#321)" (> If (@@ "pervasive/atomic.rs:22:16: 22:17 (#321)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:22:16: 22:17 (#321)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:22:16: 22:17 (#321)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:22:20: 22:21 (#321)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:22:25: 22:41 (#321)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind UnsignedMax) Exec)
          (@@ "pervasive/atomic.rs:22:25: 22:41 (#321)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
            (@@ "pervasive/atomic.rs:22:25: 22:41 (#321)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange USize)))
         ) (Typ Int (IntRange USize)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:22:50: 24:14 (#321)" (> Block () (@@ "pervasive/atomic.rs:23:17: 23:18 (#321)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:23:17: 23:18 (#321)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:17: 23:18 (#321)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:21: 23:22 (#321)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:23:25: 23:84 (#321)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:23:26: 23:51 (#321)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:23:27: 23:43 (#321)" (> UnaryOpr (UnaryOpr IntegerTypeBound
                 (IntegerTypeBoundKind UnsignedMax) Exec
                ) (@@ "pervasive/atomic.rs:23:27: 23:43 (#321)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                  (@@ "pervasive/atomic.rs:23:27: 23:43 (#321)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                 ) (Typ Int (IntRange USize)))
               ) (Typ Int (IntRange USize))
              ) (@@ "pervasive/atomic.rs:23:55: 23:71 (#321)" (> Const (Constant Int 0)) (Typ Int (IntRange USize)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:23:82: 23:83 (#321)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:24:20: 26:14 (#321)" (> Block () (@@ "pervasive/atomic.rs:25:17: 25:18 (#321)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:25:17: 25:18 (#321)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:25:21: 25:22 (#321)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:29:9: 29:58 (#321)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_usize.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:29:36: 29:42 (#321)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:29:44: 29:50 (#321)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:29:55: 29:58 (#321)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:29:59: 35:10 (#321)" (> Block () (@@ "pervasive/atomic.rs:30:13: 34:14 (#321)" (> If (@@ "pervasive/atomic.rs:30:16: 30:17 (#321)"
       (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/atomic.rs:30:16: 30:17 (#321)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:30:16: 30:17 (#321)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:30:20: 30:21 (#321)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:30:25: 30:41 (#321)" (> Const (Constant Int 0)) (Typ Int (IntRange USize)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:30:50: 32:14 (#321)" (> Block () (@@ "pervasive/atomic.rs:31:17: 31:18 (#321)" (> Binary (BinaryOp
           Arith (ArithOp Add) None
          ) (@@ "pervasive/atomic.rs:31:17: 31:18 (#321)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:17: 31:18 (#321)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:21: 31:22 (#321)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:31:25: 31:84 (#321)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:31:26: 31:51 (#321)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:31:27: 31:43 (#321)" (> UnaryOpr (UnaryOpr IntegerTypeBound
                 (IntegerTypeBoundKind UnsignedMax) Exec
                ) (@@ "pervasive/atomic.rs:31:27: 31:43 (#321)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                  (@@ "pervasive/atomic.rs:31:27: 31:43 (#321)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                 ) (Typ Int (IntRange USize)))
               ) (Typ Int (IntRange USize))
              ) (@@ "pervasive/atomic.rs:31:55: 31:71 (#321)" (> Const (Constant Int 0)) (Typ Int (IntRange USize)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:31:82: 31:83 (#321)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:32:20: 34:14 (#321)" (> Block () (@@ "pervasive/atomic.rs:33:17: 33:18 (#321)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:33:17: 33:18 (#321)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:33:21: 33:22 (#321)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#326)" (Function
  :name (Fun :path "vstd!atomic.impl&%11.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#326)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionUsize." ())
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:481:62: 481:81 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataUsize."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#326)" (Function
  :name (Fun :path "vstd!atomic.impl&%11.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#326)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionUsize."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#326)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicUsize." ())
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#326)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#326)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#326)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#326)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
          :variant "PermissionDataUsize" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#326)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#326)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionUsize."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#326)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#326)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicUsize." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#326)" (Function
  :name (Fun :path "vstd!atomic.impl&%11.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#326)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionUsize."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#326)" (Param :name "v~4" :typ (Typ Int (IntRange USize)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#326)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#326)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#326)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#326)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize."
          :variant "PermissionDataUsize" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#326)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#326)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionUsize."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
       ) (Typ Int (IntRange USize))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#326)" (> Var "v~4") (Typ Int (IntRange USize)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#354)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#354)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#354)" (Param :name "i~2" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#354)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI8."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI8." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#354)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.") () () (AutospecUsage IfMarked)) (
        (@@ "pervasive/atomic.rs:138:23: 138:29 (#354)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#354)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#354)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI8."
                 ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI8." ())))
         ) (Typ Datatype "vstd!atomic.PermissionI8." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataI8." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#354)" (> Ctor "vstd!atomic.PermissionDataI8." "PermissionDataI8" ((-> patomic (@@
          "pervasive/atomic.rs:138:62: 138:72 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#354)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#354)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI8."
                   ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicI8." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#354)" (> Var "i~2") (Typ Int (IntRange I 8))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#354)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#357)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI8." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#354)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:149:23: 149:27 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#354)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#354)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#354)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#354)" (> Var "ret~44") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#354)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#357)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#354)" (Param :name "v~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#354)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#354)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:161:23: 161:27 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#354)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#354)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#354)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
           :variant "PermissionDataI8" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#354)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#354)" (> Var "v~6") (Typ Int (IntRange I 8)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#354)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:162:58: 162:62 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
           :variant "PermissionDataI8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#354)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#354)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#357)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#354)" (Param :name "current~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#354)" (Param :name "new~8" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#354)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 8)
      ) (Typ Int (IntRange I 8)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#354)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:173:23: 173:27 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#354)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#354)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%12.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
           :variant "PermissionDataI8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#354)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#354)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#354)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 8)) (Typ Int (IntRange I 8))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#354)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#354)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#354)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 8)) (Typ Int (IntRange I 8))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#354)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#354)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#354)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#354)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#354)" (> Var "current~6") (Typ Int (IntRange I 8)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                    :variant "PermissionDataI8" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI8." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
                 ) (Typ Int (IntRange I 8)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#354)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
                    false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#354)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
                 ) (Typ Int (IntRange I 8))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#354)" (> Var "new~8") (Typ Int (IntRange I 8)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#354)"
               (> Var "r~71") (Typ Int (IntRange I 8))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                  :variant "PermissionDataI8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
               ) (Typ Int (IntRange I 8)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#354)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#354)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#354)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 8)) (Typ Int (IntRange I 8))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#354)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#354)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#354)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#354)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#354)"
                   (> Var "current~6") (Typ Int (IntRange I 8))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                      :variant "PermissionDataI8" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionI8." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
                   ) (Typ Int (IntRange I 8)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#354)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
                    false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#354)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
                 ) (Typ Int (IntRange I 8))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                    :variant "PermissionDataI8" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI8." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
                 ) (Typ Int (IntRange I 8)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#354)"
               (> Var "r~116") (Typ Int (IntRange I 8))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                  :variant "PermissionDataI8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
               ) (Typ Int (IntRange I 8)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#354)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#357)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#354)" (Param :name "current~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#354)" (Param :name "new~8" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#354)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 8)
      ) (Typ Int (IntRange I 8)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#354)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:199:23: 199:27 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#354)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#354)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%12.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
           :variant "PermissionDataI8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#354)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#354)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#354)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 8)) (Typ Int (IntRange I 8))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#354)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#354)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#354)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 8)) (Typ Int (IntRange I 8))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#354)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#354)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#354)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#354)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#354)" (> Var "current~6") (Typ Int (IntRange I 8)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                    :variant "PermissionDataI8" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI8." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
                 ) (Typ Int (IntRange I 8)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#354)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
                    false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#354)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
                 ) (Typ Int (IntRange I 8))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#354)" (> Var "new~8") (Typ Int (IntRange I 8)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#354)"
               (> Var "r~71") (Typ Int (IntRange I 8))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                  :variant "PermissionDataI8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
               ) (Typ Int (IntRange I 8)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#354)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#354)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#354)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 8)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 8)) (Typ Int (IntRange I 8))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#354)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#354)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#354)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
                  false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#354)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
               ) (Typ Int (IntRange I 8))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                  :variant "PermissionDataI8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
               ) (Typ Int (IntRange I 8)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#354)"
               (> Var "r~116") (Typ Int (IntRange I 8))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
                  :variant "PermissionDataI8" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#354)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI8." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
               ) (Typ Int (IntRange I 8)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#354)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#357)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#354)" (Param :name "v~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#354)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:224:23: 224:27 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#354)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#354)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#354)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#354)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
             false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#354)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#354)" (> Var "v~6") (Typ Int (IntRange I 8)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#354)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
             false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#354)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#354)" (> Var "ret~49") (Typ Int (IntRange I 8)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#354)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:228:26: 228:30 (#354)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
           :variant "PermissionDataI8" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#354)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#354)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#354)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicI8." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#357)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionI8." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#354)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:238:23: 238:27 (#354)" (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicI8." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#354)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#354)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI8." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#354)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#354)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#354)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#354)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI8." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#354)" (> Var "ret~44") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:260:28: 260:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_i8.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
            :variant "PermissionDataI8" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI8." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
         ) (Typ Int (IntRange I 8))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#360)" (> Var "n~6") (Typ Int (IntRange I 8))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:274:28: 274:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_i8.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
            :variant "PermissionDataI8" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI8." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
         ) (Typ Int (IntRange I 8))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#360)" (> Var "n~6") (Typ Int (IntRange I 8))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:291:23: 291:27 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#360)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#360)"
      (> Const (Constant Int -128)) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#360)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#360)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#360)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#360)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#360)" (> Const (Constant Int 127)) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#360)" (> Var "ret~101") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#360)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#360)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#360)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#360)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#360)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#360)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#360)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI8." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#360)" (> Var "n~6") (Typ Int (IntRange I 8))))
     ) (Typ Int (IntRange I 8)))
   ) (Typ Int (IntRange I 8))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:307:23: 307:27 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#360)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#360)"
      (> Const (Constant Int -128)) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#360)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#360)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#360)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#360)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#360)" (> Const (Constant Int 127)) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#360)" (> Var "ret~101") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#360)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#360)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#360)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#360)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#360)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#360)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#360)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI8." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#360)" (> Var "n~6") (Typ Int (IntRange I 8))))
     ) (Typ Int (IntRange I 8)))
   ) (Typ Int (IntRange I 8))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:323:28: 323:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#360)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#360)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:337:28: 337:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#360)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#360)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:351:28: 351:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#360)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#360)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
           false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI8." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:365:28: 365:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#360)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#360)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#360)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
        ) (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:379:28: 379:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#360)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#360)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
             :variant "PermissionDataI8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#360)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#360)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8)))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#360)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#360)" (> Var "n~6")
          (Typ Int (IntRange I 8)))
        ) (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#360)" (Function
  :name (Fun :path "vstd!atomic.impl&%12.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#360)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#363)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#360)" (Param :name "n~6" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:483:82: 483:84 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#360)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:393:28: 393:32 (#360)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI8."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#360)" (> Var "ret~49") (Typ Int (IntRange I 8)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
         :variant "PermissionDataI8" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI8." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#360)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#360)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
         false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#360)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI8."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
      ) (Typ Int (IntRange I 8))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#360)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#360)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#360)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
             :variant "PermissionDataI8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#360)" (> Var "n~6") (Typ Int (IntRange I 8)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#360)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#360)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#360)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#360)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI8." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8)))
        ) (Typ Int (IntRange I 8))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#360)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#360)" (> Var "n~6")
          (Typ Int (IntRange I 8)))
        ) (Typ Int (IntRange I 8)))
      ) (Typ Int (IntRange I 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:51:9: 51:58 (#343)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_i8.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:51:36: 51:42 (#343)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:51:44: 51:50 (#343)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:51:55: 51:58 (#343)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:51:59: 59:10 (#343)" (> Block () (@@ "pervasive/atomic.rs:52:13: 58:14 (#343)" (> If (@@ "pervasive/atomic.rs:52:16: 52:17 (#343)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:52:16: 52:17 (#343)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:52:16: 52:17 (#343)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:52:20: 52:21 (#343)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:52:25: 52:41 (#343)" (> Const (Constant Int 127)) (Typ Int (IntRange I 8)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:52:50: 54:14 (#343)" (> Block () (@@ "pervasive/atomic.rs:53:17: 53:18 (#343)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:53:17: 53:18 (#343)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:17: 53:18 (#343)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:21: 53:22 (#343)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:53:25: 53:84 (#343)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:26: 53:51 (#343)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:53:27: 53:43 (#343)" (> Const (Constant Int 127)) (Typ
                Int (IntRange I 8))
              ) (@@ "pervasive/atomic.rs:53:55: 53:71 (#343)" (> Const (Constant Int -128)) (Typ Int (IntRange I 8)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:82: 53:83 (#343)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:54:20: 58:14 (#343)" (> If (@@ "pervasive/atomic.rs:54:23: 54:24 (#343)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:54:23: 54:24 (#343)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:54:23: 54:24 (#343)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:54:27: 54:28 (#343)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:54:32: 54:48 (#343)" (> Const (Constant Int -128)) (Typ Int (IntRange I 8)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:54:57: 56:14 (#343)" (> Block () (@@ "pervasive/atomic.rs:55:17: 55:18 (#343)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:55:17: 55:18 (#343)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:17: 55:18 (#343)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:21: 55:22 (#343)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:55:25: 55:84 (#343)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:26: 55:51 (#343)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:55:27: 55:43 (#343)" (> Const (Constant Int 127)) (Typ
                  Int (IntRange I 8))
                ) (@@ "pervasive/atomic.rs:55:55: 55:71 (#343)" (> Const (Constant Int -128)) (Typ Int (IntRange I 8)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:82: 55:83 (#343)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:56:20: 58:14 (#343)" (> Block () (@@ "pervasive/atomic.rs:57:17: 57:18 (#343)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:57:17: 57:18 (#343)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:57:21: 57:22 (#343)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:61:9: 61:58 (#343)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_i8.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:61:36: 61:42 (#343)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:61:44: 61:50 (#343)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:61:55: 61:58 (#343)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:61:59: 69:10 (#343)" (> Block () (@@ "pervasive/atomic.rs:62:13: 68:14 (#343)" (> If (@@ "pervasive/atomic.rs:62:16: 62:17 (#343)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:62:16: 62:17 (#343)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:62:16: 62:17 (#343)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:62:20: 62:21 (#343)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:62:25: 62:41 (#343)" (> Const (Constant Int 127)) (Typ Int (IntRange I 8)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:62:50: 64:14 (#343)" (> Block () (@@ "pervasive/atomic.rs:63:17: 63:18 (#343)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:63:17: 63:18 (#343)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:17: 63:18 (#343)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:21: 63:22 (#343)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:63:25: 63:84 (#343)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:63:26: 63:51 (#343)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:27: 63:43 (#343)" (> Const (Constant Int 127)) (Typ
                Int (IntRange I 8))
              ) (@@ "pervasive/atomic.rs:63:55: 63:71 (#343)" (> Const (Constant Int -128)) (Typ Int (IntRange I 8)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:82: 63:83 (#343)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:64:20: 68:14 (#343)" (> If (@@ "pervasive/atomic.rs:64:23: 64:24 (#343)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:64:23: 64:24 (#343)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:64:23: 64:24 (#343)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:64:27: 64:28 (#343)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:64:32: 64:48 (#343)" (> Const (Constant Int -128)) (Typ Int (IntRange I 8)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:64:57: 66:14 (#343)" (> Block () (@@ "pervasive/atomic.rs:65:17: 65:18 (#343)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:65:17: 65:18 (#343)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:17: 65:18 (#343)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:21: 65:22 (#343)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:65:25: 65:84 (#343)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:65:26: 65:51 (#343)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:27: 65:43 (#343)" (> Const (Constant Int 127)) (Typ
                  Int (IntRange I 8))
                ) (@@ "pervasive/atomic.rs:65:55: 65:71 (#343)" (> Const (Constant Int -128)) (Typ Int (IntRange I 8)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:82: 65:83 (#343)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:66:20: 68:14 (#343)" (> Block () (@@ "pervasive/atomic.rs:67:17: 67:18 (#343)" (> Binary (BinaryOp
             Arith (ArithOp Sub) None
            ) (@@ "pervasive/atomic.rs:67:17: 67:18 (#343)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:67:21: 67:22 (#343)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#348)" (Function
  :name (Fun :path "vstd!atomic.impl&%13.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#348)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionI8." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:483:54: 483:70 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataI8."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#348)" (Function
  :name (Fun :path "vstd!atomic.impl&%13.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#348)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI8."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#348)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicI8." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#348)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#348)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#348)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#348)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
          :variant "PermissionDataI8" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#348)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#348)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI8."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#348)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#348)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicI8." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#348)" (Function
  :name (Fun :path "vstd!atomic.impl&%13.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#348)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI8."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#348)" (Param :name "v~4" :typ (Typ Int (IntRange I 8)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#348)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#348)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#348)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#348)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8."
          :variant "PermissionDataI8" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#348)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#348)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI8."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
       ) (Typ Int (IntRange I 8))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#348)" (> Var "v~4") (Typ Int (IntRange I 8)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#376)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#376)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#376)" (Param :name "i~2" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#376)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI16."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI16." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#376)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.") () () (AutospecUsage IfMarked)) (
        (@@ "pervasive/atomic.rs:138:23: 138:29 (#376)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#376)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#376)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionI16." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI16." ())))
         ) (Typ Datatype "vstd!atomic.PermissionI16." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataI16." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#376)" (> Ctor "vstd!atomic.PermissionDataI16." "PermissionDataI16" ((-> patomic (
          @@ "pervasive/atomic.rs:138:62: 138:72 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#376)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#376)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionI16." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicI16." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#376)" (> Var "i~2") (Typ Int (IntRange I 16))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#376)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#379)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI16." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#376)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:149:23: 149:27 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#376)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#376)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#376)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#376)" (> Var "ret~44") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#376)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#379)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#376)" (Param :name "v~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#376)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#376)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:161:23: 161:27 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#376)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#376)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#376)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
           :variant "PermissionDataI16" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#376)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#376)" (> Var "v~6") (Typ Int (IntRange I 16)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#376)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:162:58: 162:62 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
           :variant "PermissionDataI16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#376)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#376)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#379)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#376)" (Param :name "current~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#376)" (Param :name "new~8" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#376)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 16)
      ) (Typ Int (IntRange I 16)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#376)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:173:23: 173:27 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#376)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#376)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%14.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
           :variant "PermissionDataI16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#376)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#376)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#376)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 16)) (Typ Int (IntRange I 16))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#376)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#376)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#376)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 16)) (Typ Int (IntRange I 16))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#376)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#376)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#376)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#376)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#376)" (> Var "current~6") (Typ Int (IntRange I 16)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                    :variant "PermissionDataI16" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI16." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
                 ) (Typ Int (IntRange I 16)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#376)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#376)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
                 ) (Typ Int (IntRange I 16))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#376)" (> Var "new~8") (Typ Int (IntRange I 16)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#376)"
               (> Var "r~71") (Typ Int (IntRange I 16))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                  :variant "PermissionDataI16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
               ) (Typ Int (IntRange I 16)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#376)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#376)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#376)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 16)) (Typ Int (IntRange I 16))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#376)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#376)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#376)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#376)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#376)"
                   (> Var "current~6") (Typ Int (IntRange I 16))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                      :variant "PermissionDataI16" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionI16." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
                   ) (Typ Int (IntRange I 16)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#376)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#376)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
                 ) (Typ Int (IntRange I 16))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                    :variant "PermissionDataI16" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI16." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
                 ) (Typ Int (IntRange I 16)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#376)"
               (> Var "r~116") (Typ Int (IntRange I 16))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                  :variant "PermissionDataI16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
               ) (Typ Int (IntRange I 16)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#376)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#379)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#376)" (Param :name "current~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#376)" (Param :name "new~8" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#376)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 16)
      ) (Typ Int (IntRange I 16)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#376)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:199:23: 199:27 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#376)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#376)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%14.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
           :variant "PermissionDataI16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#376)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#376)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#376)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 16)) (Typ Int (IntRange I 16))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#376)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#376)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#376)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 16)) (Typ Int (IntRange I 16))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#376)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#376)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#376)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#376)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#376)" (> Var "current~6") (Typ Int (IntRange I 16)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                    :variant "PermissionDataI16" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI16." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
                 ) (Typ Int (IntRange I 16)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#376)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#376)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
                 ) (Typ Int (IntRange I 16))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#376)" (> Var "new~8") (Typ Int (IntRange I 16)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#376)"
               (> Var "r~71") (Typ Int (IntRange I 16))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                  :variant "PermissionDataI16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
               ) (Typ Int (IntRange I 16)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#376)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#376)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#376)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 16)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 16)) (Typ Int (IntRange I 16))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#376)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#376)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#376)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#376)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
               ) (Typ Int (IntRange I 16))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                  :variant "PermissionDataI16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
               ) (Typ Int (IntRange I 16)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#376)"
               (> Var "r~116") (Typ Int (IntRange I 16))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
                  :variant "PermissionDataI16" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#376)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI16." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
               ) (Typ Int (IntRange I 16)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#376)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#379)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#376)" (Param :name "v~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#376)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:224:23: 224:27 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#376)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#376)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#376)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#376)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#376)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#376)" (> Var "v~6") (Typ Int (IntRange I 16)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#376)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#376)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#376)" (> Var "ret~49") (Typ Int (IntRange I 16)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#376)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:228:26: 228:30 (#376)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
           :variant "PermissionDataI16" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#376)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#376)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#376)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicI16." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#379)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionI16." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#376)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:238:23: 238:27 (#376)" (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicI16." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#376)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#376)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI16." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#376)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#376)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#376)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#376)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI16." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#376)" (> Var "ret~44") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:260:28: 260:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_i16.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
            :variant "PermissionDataI16" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI16." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
         ) (Typ Int (IntRange I 16))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#382)" (> Var "n~6") (Typ Int (IntRange I 16))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:274:28: 274:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_i16.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
            :variant "PermissionDataI16" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI16." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
         ) (Typ Int (IntRange I 16))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#382)" (> Var "n~6") (Typ Int (IntRange I 16))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:291:23: 291:27 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#382)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#382)"
      (> Const (Constant Int -32768)) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#382)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#382)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#382)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#382)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#382)" (> Const (Constant Int 32767)) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#382)" (> Var "ret~101") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#382)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#382)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#382)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#382)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#382)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#382)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#382)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI16." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#382)" (> Var "n~6") (Typ Int (IntRange I 16))))
     ) (Typ Int (IntRange I 16)))
   ) (Typ Int (IntRange I 16))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:307:23: 307:27 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#382)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#382)"
      (> Const (Constant Int -32768)) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#382)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#382)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#382)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#382)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#382)" (> Const (Constant Int 32767)) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#382)" (> Var "ret~101") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#382)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#382)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#382)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#382)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#382)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#382)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#382)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI16." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#382)" (> Var "n~6") (Typ Int (IntRange I 16))))
     ) (Typ Int (IntRange I 16)))
   ) (Typ Int (IntRange I 16))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:323:28: 323:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#382)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#382)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:337:28: 337:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#382)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#382)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:351:28: 351:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#382)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#382)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI16." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:365:28: 365:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#382)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#382)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#382)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
        ) (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:379:28: 379:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#382)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#382)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
             :variant "PermissionDataI16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#382)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#382)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16)))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#382)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#382)" (> Var "n~6")
          (Typ Int (IntRange I 16)))
        ) (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#382)" (Function
  :name (Fun :path "vstd!atomic.impl&%14.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#382)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#385)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#382)" (Param :name "n~6" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:484:86: 484:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#382)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:393:28: 393:32 (#382)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI16."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#382)" (> Var "ret~49") (Typ Int (IntRange I 16)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
         :variant "PermissionDataI16" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI16." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#382)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#382)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#382)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI16."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
      ) (Typ Int (IntRange I 16))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#382)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#382)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#382)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
             :variant "PermissionDataI16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#382)" (> Var "n~6") (Typ Int (IntRange I 16)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#382)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#382)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#382)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#382)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI16." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16)))
        ) (Typ Int (IntRange I 16))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#382)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#382)" (> Var "n~6")
          (Typ Int (IntRange I 16)))
        ) (Typ Int (IntRange I 16)))
      ) (Typ Int (IntRange I 16)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:51:9: 51:58 (#365)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_i16.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:51:36: 51:42 (#365)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:51:44: 51:50 (#365)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:51:55: 51:58 (#365)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:51:59: 59:10 (#365)" (> Block () (@@ "pervasive/atomic.rs:52:13: 58:14 (#365)" (> If (@@ "pervasive/atomic.rs:52:16: 52:17 (#365)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:52:16: 52:17 (#365)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:52:16: 52:17 (#365)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:52:20: 52:21 (#365)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:52:25: 52:41 (#365)" (> Const (Constant Int 32767)) (Typ Int (IntRange I 16)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:52:50: 54:14 (#365)" (> Block () (@@ "pervasive/atomic.rs:53:17: 53:18 (#365)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:53:17: 53:18 (#365)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:17: 53:18 (#365)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:21: 53:22 (#365)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:53:25: 53:84 (#365)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:26: 53:51 (#365)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:53:27: 53:43 (#365)" (> Const (Constant Int 32767))
               (Typ Int (IntRange I 16))
              ) (@@ "pervasive/atomic.rs:53:55: 53:71 (#365)" (> Const (Constant Int -32768)) (Typ Int (IntRange I 16)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:82: 53:83 (#365)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:54:20: 58:14 (#365)" (> If (@@ "pervasive/atomic.rs:54:23: 54:24 (#365)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:54:23: 54:24 (#365)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:54:23: 54:24 (#365)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:54:27: 54:28 (#365)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:54:32: 54:48 (#365)" (> Const (Constant Int -32768)) (Typ Int (IntRange I 16)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:54:57: 56:14 (#365)" (> Block () (@@ "pervasive/atomic.rs:55:17: 55:18 (#365)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:55:17: 55:18 (#365)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:17: 55:18 (#365)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:21: 55:22 (#365)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:55:25: 55:84 (#365)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:26: 55:51 (#365)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:55:27: 55:43 (#365)" (> Const (Constant Int 32767))
                 (Typ Int (IntRange I 16))
                ) (@@ "pervasive/atomic.rs:55:55: 55:71 (#365)" (> Const (Constant Int -32768)) (Typ Int (IntRange I 16)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:82: 55:83 (#365)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:56:20: 58:14 (#365)" (> Block () (@@ "pervasive/atomic.rs:57:17: 57:18 (#365)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:57:17: 57:18 (#365)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:57:21: 57:22 (#365)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:61:9: 61:58 (#365)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_i16.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:61:36: 61:42 (#365)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:61:44: 61:50 (#365)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:61:55: 61:58 (#365)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:61:59: 69:10 (#365)" (> Block () (@@ "pervasive/atomic.rs:62:13: 68:14 (#365)" (> If (@@ "pervasive/atomic.rs:62:16: 62:17 (#365)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:62:16: 62:17 (#365)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:62:16: 62:17 (#365)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:62:20: 62:21 (#365)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:62:25: 62:41 (#365)" (> Const (Constant Int 32767)) (Typ Int (IntRange I 16)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:62:50: 64:14 (#365)" (> Block () (@@ "pervasive/atomic.rs:63:17: 63:18 (#365)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:63:17: 63:18 (#365)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:17: 63:18 (#365)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:21: 63:22 (#365)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:63:25: 63:84 (#365)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:63:26: 63:51 (#365)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:27: 63:43 (#365)" (> Const (Constant Int 32767))
               (Typ Int (IntRange I 16))
              ) (@@ "pervasive/atomic.rs:63:55: 63:71 (#365)" (> Const (Constant Int -32768)) (Typ Int (IntRange I 16)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:82: 63:83 (#365)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:64:20: 68:14 (#365)" (> If (@@ "pervasive/atomic.rs:64:23: 64:24 (#365)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:64:23: 64:24 (#365)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:64:23: 64:24 (#365)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:64:27: 64:28 (#365)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:64:32: 64:48 (#365)" (> Const (Constant Int -32768)) (Typ Int (IntRange I 16)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:64:57: 66:14 (#365)" (> Block () (@@ "pervasive/atomic.rs:65:17: 65:18 (#365)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:65:17: 65:18 (#365)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:17: 65:18 (#365)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:21: 65:22 (#365)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:65:25: 65:84 (#365)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:65:26: 65:51 (#365)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:27: 65:43 (#365)" (> Const (Constant Int 32767))
                 (Typ Int (IntRange I 16))
                ) (@@ "pervasive/atomic.rs:65:55: 65:71 (#365)" (> Const (Constant Int -32768)) (Typ Int (IntRange I 16)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:82: 65:83 (#365)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:66:20: 68:14 (#365)" (> Block () (@@ "pervasive/atomic.rs:67:17: 67:18 (#365)" (> Binary (BinaryOp
             Arith (ArithOp Sub) None
            ) (@@ "pervasive/atomic.rs:67:17: 67:18 (#365)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:67:21: 67:22 (#365)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#370)" (Function
  :name (Fun :path "vstd!atomic.impl&%15.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#370)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionI16." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:484:56: 484:73 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataI16."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#370)" (Function
  :name (Fun :path "vstd!atomic.impl&%15.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#370)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI16."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#370)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicI16." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#370)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#370)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#370)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#370)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
          :variant "PermissionDataI16" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#370)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#370)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI16."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#370)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#370)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicI16." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#370)" (Function
  :name (Fun :path "vstd!atomic.impl&%15.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#370)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI16."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#370)" (Param :name "v~4" :typ (Typ Int (IntRange I 16)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#370)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#370)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#370)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#370)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16."
          :variant "PermissionDataI16" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#370)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#370)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI16."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
       ) (Typ Int (IntRange I 16))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#370)" (> Var "v~4") (Typ Int (IntRange I 16)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#398)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#398)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#398)" (Param :name "i~2" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#398)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI32."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI32." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#398)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.") () () (AutospecUsage IfMarked)) (
        (@@ "pervasive/atomic.rs:138:23: 138:29 (#398)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#398)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#398)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionI32." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI32." ())))
         ) (Typ Datatype "vstd!atomic.PermissionI32." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataI32." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#398)" (> Ctor "vstd!atomic.PermissionDataI32." "PermissionDataI32" ((-> patomic (
          @@ "pervasive/atomic.rs:138:62: 138:72 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#398)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#398)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionI32." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicI32." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#398)" (> Var "i~2") (Typ Int (IntRange I 32))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#398)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#401)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI32." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#398)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:149:23: 149:27 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#398)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#398)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#398)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#398)" (> Var "ret~44") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#398)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#401)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#398)" (Param :name "v~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#398)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#398)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:161:23: 161:27 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#398)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#398)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#398)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
           :variant "PermissionDataI32" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#398)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#398)" (> Var "v~6") (Typ Int (IntRange I 32)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#398)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:162:58: 162:62 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
           :variant "PermissionDataI32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#398)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#398)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#401)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#398)" (Param :name "current~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#398)" (Param :name "new~8" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#398)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 32)
      ) (Typ Int (IntRange I 32)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#398)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:173:23: 173:27 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#398)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#398)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%16.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
           :variant "PermissionDataI32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#398)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#398)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#398)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 32)) (Typ Int (IntRange I 32))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#398)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#398)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#398)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 32)) (Typ Int (IntRange I 32))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#398)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#398)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#398)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#398)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#398)" (> Var "current~6") (Typ Int (IntRange I 32)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                    :variant "PermissionDataI32" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI32." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
                 ) (Typ Int (IntRange I 32)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#398)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#398)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
                 ) (Typ Int (IntRange I 32))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#398)" (> Var "new~8") (Typ Int (IntRange I 32)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#398)"
               (> Var "r~71") (Typ Int (IntRange I 32))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                  :variant "PermissionDataI32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
               ) (Typ Int (IntRange I 32)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#398)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#398)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#398)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 32)) (Typ Int (IntRange I 32))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#398)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#398)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#398)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#398)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#398)"
                   (> Var "current~6") (Typ Int (IntRange I 32))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                      :variant "PermissionDataI32" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionI32." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
                   ) (Typ Int (IntRange I 32)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#398)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#398)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
                 ) (Typ Int (IntRange I 32))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                    :variant "PermissionDataI32" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI32." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
                 ) (Typ Int (IntRange I 32)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#398)"
               (> Var "r~116") (Typ Int (IntRange I 32))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                  :variant "PermissionDataI32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
               ) (Typ Int (IntRange I 32)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#398)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#401)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#398)" (Param :name "current~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#398)" (Param :name "new~8" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#398)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 32)
      ) (Typ Int (IntRange I 32)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#398)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:199:23: 199:27 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#398)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#398)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%16.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
           :variant "PermissionDataI32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#398)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#398)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#398)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 32)) (Typ Int (IntRange I 32))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#398)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#398)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#398)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 32)) (Typ Int (IntRange I 32))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#398)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#398)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#398)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#398)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#398)" (> Var "current~6") (Typ Int (IntRange I 32)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                    :variant "PermissionDataI32" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI32." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
                 ) (Typ Int (IntRange I 32)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#398)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#398)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
                 ) (Typ Int (IntRange I 32))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#398)" (> Var "new~8") (Typ Int (IntRange I 32)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#398)"
               (> Var "r~71") (Typ Int (IntRange I 32))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                  :variant "PermissionDataI32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
               ) (Typ Int (IntRange I 32)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#398)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#398)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#398)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 32)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 32)) (Typ Int (IntRange I 32))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#398)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#398)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#398)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#398)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
               ) (Typ Int (IntRange I 32))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                  :variant "PermissionDataI32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
               ) (Typ Int (IntRange I 32)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#398)"
               (> Var "r~116") (Typ Int (IntRange I 32))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
                  :variant "PermissionDataI32" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#398)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI32." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
               ) (Typ Int (IntRange I 32)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#398)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#401)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#398)" (Param :name "v~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#398)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:224:23: 224:27 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#398)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#398)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#398)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#398)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#398)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#398)" (> Var "v~6") (Typ Int (IntRange I 32)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#398)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#398)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#398)" (> Var "ret~49") (Typ Int (IntRange I 32)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#398)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:228:26: 228:30 (#398)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
           :variant "PermissionDataI32" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#398)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#398)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#398)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicI32." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#401)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionI32." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#398)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:238:23: 238:27 (#398)" (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicI32." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#398)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#398)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI32." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#398)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#398)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#398)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#398)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI32." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#398)" (> Var "ret~44") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:260:28: 260:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_i32.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
            :variant "PermissionDataI32" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI32." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
         ) (Typ Int (IntRange I 32))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#404)" (> Var "n~6") (Typ Int (IntRange I 32))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:274:28: 274:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_i32.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
            :variant "PermissionDataI32" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI32." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
         ) (Typ Int (IntRange I 32))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#404)" (> Var "n~6") (Typ Int (IntRange I 32))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:291:23: 291:27 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#404)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#404)"
      (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#404)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#404)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#404)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#404)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#404)" (> Const (Constant Int 2147483647)) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#404)" (> Var "ret~101") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#404)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#404)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#404)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#404)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#404)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#404)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#404)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI32." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#404)" (> Var "n~6") (Typ Int (IntRange I 32))))
     ) (Typ Int (IntRange I 32)))
   ) (Typ Int (IntRange I 32))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:307:23: 307:27 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#404)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#404)"
      (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#404)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#404)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#404)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#404)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#404)" (> Const (Constant Int 2147483647)) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#404)" (> Var "ret~101") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#404)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#404)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#404)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#404)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#404)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#404)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#404)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI32." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#404)" (> Var "n~6") (Typ Int (IntRange I 32))))
     ) (Typ Int (IntRange I 32)))
   ) (Typ Int (IntRange I 32))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:323:28: 323:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#404)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#404)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:337:28: 337:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#404)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#404)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:351:28: 351:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#404)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#404)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI32." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:365:28: 365:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#404)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#404)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#404)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
        ) (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:379:28: 379:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#404)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#404)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
             :variant "PermissionDataI32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#404)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#404)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32)))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#404)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#404)" (> Var "n~6")
          (Typ Int (IntRange I 32)))
        ) (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#404)" (Function
  :name (Fun :path "vstd!atomic.impl&%16.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#404)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#407)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#404)" (Param :name "n~6" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:485:86: 485:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#404)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:393:28: 393:32 (#404)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI32."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#404)" (> Var "ret~49") (Typ Int (IntRange I 32)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
         :variant "PermissionDataI32" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI32." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#404)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#404)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#404)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI32."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
      ) (Typ Int (IntRange I 32))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#404)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#404)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#404)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
             :variant "PermissionDataI32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#404)" (> Var "n~6") (Typ Int (IntRange I 32)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#404)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#404)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#404)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#404)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI32." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32)))
        ) (Typ Int (IntRange I 32))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#404)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#404)" (> Var "n~6")
          (Typ Int (IntRange I 32)))
        ) (Typ Int (IntRange I 32)))
      ) (Typ Int (IntRange I 32)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:51:9: 51:58 (#387)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_i32.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:51:36: 51:42 (#387)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:51:44: 51:50 (#387)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:51:55: 51:58 (#387)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:51:59: 59:10 (#387)" (> Block () (@@ "pervasive/atomic.rs:52:13: 58:14 (#387)" (> If (@@ "pervasive/atomic.rs:52:16: 52:17 (#387)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:52:16: 52:17 (#387)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:52:16: 52:17 (#387)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:52:20: 52:21 (#387)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:52:25: 52:41 (#387)" (> Const (Constant Int 2147483647)) (Typ Int (IntRange I 32)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:52:50: 54:14 (#387)" (> Block () (@@ "pervasive/atomic.rs:53:17: 53:18 (#387)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:53:17: 53:18 (#387)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:17: 53:18 (#387)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:21: 53:22 (#387)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:53:25: 53:84 (#387)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:26: 53:51 (#387)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:53:27: 53:43 (#387)" (> Const (Constant Int 2147483647))
               (Typ Int (IntRange I 32))
              ) (@@ "pervasive/atomic.rs:53:55: 53:71 (#387)" (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:82: 53:83 (#387)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:54:20: 58:14 (#387)" (> If (@@ "pervasive/atomic.rs:54:23: 54:24 (#387)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:54:23: 54:24 (#387)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:54:23: 54:24 (#387)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:54:27: 54:28 (#387)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:54:32: 54:48 (#387)" (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:54:57: 56:14 (#387)" (> Block () (@@ "pervasive/atomic.rs:55:17: 55:18 (#387)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:55:17: 55:18 (#387)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:17: 55:18 (#387)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:21: 55:22 (#387)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:55:25: 55:84 (#387)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:26: 55:51 (#387)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:55:27: 55:43 (#387)" (> Const (Constant Int 2147483647))
                 (Typ Int (IntRange I 32))
                ) (@@ "pervasive/atomic.rs:55:55: 55:71 (#387)" (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:82: 55:83 (#387)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:56:20: 58:14 (#387)" (> Block () (@@ "pervasive/atomic.rs:57:17: 57:18 (#387)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:57:17: 57:18 (#387)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:57:21: 57:22 (#387)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:61:9: 61:58 (#387)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_i32.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:61:36: 61:42 (#387)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:61:44: 61:50 (#387)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:61:55: 61:58 (#387)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:61:59: 69:10 (#387)" (> Block () (@@ "pervasive/atomic.rs:62:13: 68:14 (#387)" (> If (@@ "pervasive/atomic.rs:62:16: 62:17 (#387)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:62:16: 62:17 (#387)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:62:16: 62:17 (#387)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:62:20: 62:21 (#387)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:62:25: 62:41 (#387)" (> Const (Constant Int 2147483647)) (Typ Int (IntRange I 32)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:62:50: 64:14 (#387)" (> Block () (@@ "pervasive/atomic.rs:63:17: 63:18 (#387)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:63:17: 63:18 (#387)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:17: 63:18 (#387)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:21: 63:22 (#387)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:63:25: 63:84 (#387)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:63:26: 63:51 (#387)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:27: 63:43 (#387)" (> Const (Constant Int 2147483647))
               (Typ Int (IntRange I 32))
              ) (@@ "pervasive/atomic.rs:63:55: 63:71 (#387)" (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:82: 63:83 (#387)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:64:20: 68:14 (#387)" (> If (@@ "pervasive/atomic.rs:64:23: 64:24 (#387)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:64:23: 64:24 (#387)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:64:23: 64:24 (#387)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:64:27: 64:28 (#387)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:64:32: 64:48 (#387)" (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:64:57: 66:14 (#387)" (> Block () (@@ "pervasive/atomic.rs:65:17: 65:18 (#387)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:65:17: 65:18 (#387)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:17: 65:18 (#387)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:21: 65:22 (#387)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:65:25: 65:84 (#387)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:65:26: 65:51 (#387)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:27: 65:43 (#387)" (> Const (Constant Int 2147483647))
                 (Typ Int (IntRange I 32))
                ) (@@ "pervasive/atomic.rs:65:55: 65:71 (#387)" (> Const (Constant Int -2147483648)) (Typ Int (IntRange I 32)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:82: 65:83 (#387)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:66:20: 68:14 (#387)" (> Block () (@@ "pervasive/atomic.rs:67:17: 67:18 (#387)" (> Binary (BinaryOp
             Arith (ArithOp Sub) None
            ) (@@ "pervasive/atomic.rs:67:17: 67:18 (#387)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:67:21: 67:22 (#387)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#392)" (Function
  :name (Fun :path "vstd!atomic.impl&%17.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#392)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionI32." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:485:56: 485:73 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataI32."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#392)" (Function
  :name (Fun :path "vstd!atomic.impl&%17.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#392)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI32."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#392)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicI32." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#392)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#392)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#392)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#392)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
          :variant "PermissionDataI32" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#392)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#392)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI32."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#392)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#392)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicI32." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#392)" (Function
  :name (Fun :path "vstd!atomic.impl&%17.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#392)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI32."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#392)" (Param :name "v~4" :typ (Typ Int (IntRange I 32)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#392)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#392)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#392)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#392)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32."
          :variant "PermissionDataI32" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#392)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#392)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI32."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
       ) (Typ Int (IntRange I 32))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#392)" (> Var "v~4") (Typ Int (IntRange I 32)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#420)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#420)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#420)" (Param :name "i~2" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#420)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI64."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI64." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#420)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.") () () (AutospecUsage IfMarked)) (
        (@@ "pervasive/atomic.rs:138:23: 138:29 (#420)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#420)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#420)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionI64." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI64." ())))
         ) (Typ Datatype "vstd!atomic.PermissionI64." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataI64." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#420)" (> Ctor "vstd!atomic.PermissionDataI64." "PermissionDataI64" ((-> patomic (
          @@ "pervasive/atomic.rs:138:62: 138:72 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#420)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#420)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionI64." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicI64." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#420)" (> Var "i~2") (Typ Int (IntRange I 64))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#420)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#423)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI64." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#420)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:149:23: 149:27 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#420)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#420)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#420)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#420)" (> Var "ret~44") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#420)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#423)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#420)" (Param :name "v~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#420)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#420)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:161:23: 161:27 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#420)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#420)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#420)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
           :variant "PermissionDataI64" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#420)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#420)" (> Var "v~6") (Typ Int (IntRange I 64)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#420)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:162:58: 162:62 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
           :variant "PermissionDataI64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#420)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#420)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#423)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#420)" (Param :name "current~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#420)" (Param :name "new~8" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#420)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 64)
      ) (Typ Int (IntRange I 64)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#420)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:173:23: 173:27 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#420)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#420)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%18.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
           :variant "PermissionDataI64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#420)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#420)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#420)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 64)) (Typ Int (IntRange I 64))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#420)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#420)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#420)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 64)) (Typ Int (IntRange I 64))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#420)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#420)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#420)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#420)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#420)" (> Var "current~6") (Typ Int (IntRange I 64)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                    :variant "PermissionDataI64" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI64." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
                 ) (Typ Int (IntRange I 64)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#420)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#420)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
                 ) (Typ Int (IntRange I 64))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#420)" (> Var "new~8") (Typ Int (IntRange I 64)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#420)"
               (> Var "r~71") (Typ Int (IntRange I 64))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                  :variant "PermissionDataI64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
               ) (Typ Int (IntRange I 64)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#420)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#420)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#420)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 64)) (Typ Int (IntRange I 64))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#420)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#420)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#420)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#420)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#420)"
                   (> Var "current~6") (Typ Int (IntRange I 64))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                      :variant "PermissionDataI64" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionI64." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
                   ) (Typ Int (IntRange I 64)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#420)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#420)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
                 ) (Typ Int (IntRange I 64))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                    :variant "PermissionDataI64" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI64." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
                 ) (Typ Int (IntRange I 64)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#420)"
               (> Var "r~116") (Typ Int (IntRange I 64))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                  :variant "PermissionDataI64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
               ) (Typ Int (IntRange I 64)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#420)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#423)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#420)" (Param :name "current~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#420)" (Param :name "new~8" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#420)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange I 64)
      ) (Typ Int (IntRange I 64)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#420)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:199:23: 199:27 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#420)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#420)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%18.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
           :variant "PermissionDataI64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#420)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#420)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#420)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 64)) (Typ Int (IntRange I 64))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#420)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#420)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#420)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange I 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 64)) (Typ Int (IntRange I 64))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#420)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#420)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#420)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#420)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#420)" (> Var "current~6") (Typ Int (IntRange I 64)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                    :variant "PermissionDataI64" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionI64." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
                 ) (Typ Int (IntRange I 64)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#420)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#420)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
                 ) (Typ Int (IntRange I 64))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#420)" (> Var "new~8") (Typ Int (IntRange I 64)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#420)"
               (> Var "r~71") (Typ Int (IntRange I 64))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                  :variant "PermissionDataI64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
               ) (Typ Int (IntRange I 64)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#420)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#420)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#420)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange I 64)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange I 64)) (Typ Int (IntRange I 64))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#420)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#420)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#420)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#420)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
               ) (Typ Int (IntRange I 64))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                  :variant "PermissionDataI64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
               ) (Typ Int (IntRange I 64)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#420)"
               (> Var "r~116") (Typ Int (IntRange I 64))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
                  :variant "PermissionDataI64" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#420)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionI64." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
               ) (Typ Int (IntRange I 64)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#420)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#423)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#420)" (Param :name "v~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#420)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:224:23: 224:27 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#420)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#420)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#420)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#420)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#420)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#420)" (> Var "v~6") (Typ Int (IntRange I 64)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#420)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#420)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#420)" (> Var "ret~49") (Typ Int (IntRange I 64)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#420)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:228:26: 228:30 (#420)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
           :variant "PermissionDataI64" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#420)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#420)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#420)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicI64." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#423)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionI64." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#420)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:238:23: 238:27 (#420)" (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicI64." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#420)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#420)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI64." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#420)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#420)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#420)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#420)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionI64." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#420)" (> Var "ret~44") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:260:28: 260:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_i64.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
            :variant "PermissionDataI64" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI64." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
         ) (Typ Int (IntRange I 64))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#426)" (> Var "n~6") (Typ Int (IntRange I 64))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:274:28: 274:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_i64.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
            :variant "PermissionDataI64" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionI64." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
         ) (Typ Int (IntRange I 64))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#426)" (> Var "n~6") (Typ Int (IntRange I 64))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:291:23: 291:27 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#426)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#426)"
      (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#426)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#426)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#426)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#426)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#426)" (> Const (Constant Int 9223372036854775807)) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#426)" (> Var "ret~101") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#426)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#426)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#426)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#426)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#426)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#426)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#426)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI64." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#426)" (> Var "n~6") (Typ Int (IntRange I 64))))
     ) (Typ Int (IntRange I 64)))
   ) (Typ Int (IntRange I 64))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:307:23: 307:27 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#426)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#426)"
      (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#426)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#426)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#426)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#426)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#426)" (> Const (Constant Int 9223372036854775807)) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#426)" (> Var "ret~101") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#426)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#426)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#426)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#426)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#426)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#426)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#426)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionI64." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#426)" (> Var "n~6") (Typ Int (IntRange I 64))))
     ) (Typ Int (IntRange I 64)))
   ) (Typ Int (IntRange I 64))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:323:28: 323:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#426)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#426)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:337:28: 337:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#426)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#426)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:351:28: 351:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#426)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#426)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionI64." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:365:28: 365:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#426)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#426)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#426)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
        ) (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:379:28: 379:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#426)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#426)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
             :variant "PermissionDataI64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#426)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#426)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64)))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#426)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#426)" (> Var "n~6")
          (Typ Int (IntRange I 64)))
        ) (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#426)" (Function
  :name (Fun :path "vstd!atomic.impl&%18.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#426)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#429)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#426)" (Param :name "n~6" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:486:86: 486:89 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#426)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:393:28: 393:32 (#426)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicI64."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#426)" (> Var "ret~49") (Typ Int (IntRange I 64)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
         :variant "PermissionDataI64" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionI64." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#426)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#426)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#426)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionI64."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
      ) (Typ Int (IntRange I 64))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#426)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#426)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#426)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
             :variant "PermissionDataI64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#426)" (> Var "n~6") (Typ Int (IntRange I 64)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#426)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#426)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#426)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#426)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionI64." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64)))
        ) (Typ Int (IntRange I 64))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#426)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#426)" (> Var "n~6")
          (Typ Int (IntRange I 64)))
        ) (Typ Int (IntRange I 64)))
      ) (Typ Int (IntRange I 64)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:51:9: 51:58 (#409)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_i64.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:51:36: 51:42 (#409)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:51:44: 51:50 (#409)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:51:55: 51:58 (#409)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:51:59: 59:10 (#409)" (> Block () (@@ "pervasive/atomic.rs:52:13: 58:14 (#409)" (> If (@@ "pervasive/atomic.rs:52:16: 52:17 (#409)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:52:16: 52:17 (#409)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:52:16: 52:17 (#409)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:52:20: 52:21 (#409)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:52:25: 52:41 (#409)" (> Const (Constant Int 9223372036854775807)) (Typ Int (IntRange I 64)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:52:50: 54:14 (#409)" (> Block () (@@ "pervasive/atomic.rs:53:17: 53:18 (#409)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:53:17: 53:18 (#409)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:17: 53:18 (#409)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:21: 53:22 (#409)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:53:25: 53:84 (#409)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:26: 53:51 (#409)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:53:27: 53:43 (#409)" (> Const (Constant Int 9223372036854775807))
               (Typ Int (IntRange I 64))
              ) (@@ "pervasive/atomic.rs:53:55: 53:71 (#409)" (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:82: 53:83 (#409)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:54:20: 58:14 (#409)" (> If (@@ "pervasive/atomic.rs:54:23: 54:24 (#409)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:54:23: 54:24 (#409)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:54:23: 54:24 (#409)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:54:27: 54:28 (#409)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:54:32: 54:48 (#409)" (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:54:57: 56:14 (#409)" (> Block () (@@ "pervasive/atomic.rs:55:17: 55:18 (#409)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:55:17: 55:18 (#409)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:17: 55:18 (#409)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:21: 55:22 (#409)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:55:25: 55:84 (#409)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:26: 55:51 (#409)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:55:27: 55:43 (#409)" (> Const (Constant Int 9223372036854775807))
                 (Typ Int (IntRange I 64))
                ) (@@ "pervasive/atomic.rs:55:55: 55:71 (#409)" (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:82: 55:83 (#409)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:56:20: 58:14 (#409)" (> Block () (@@ "pervasive/atomic.rs:57:17: 57:18 (#409)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:57:17: 57:18 (#409)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:57:21: 57:22 (#409)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:61:9: 61:58 (#409)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_i64.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:61:36: 61:42 (#409)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:61:44: 61:50 (#409)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:61:55: 61:58 (#409)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:61:59: 69:10 (#409)" (> Block () (@@ "pervasive/atomic.rs:62:13: 68:14 (#409)" (> If (@@ "pervasive/atomic.rs:62:16: 62:17 (#409)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:62:16: 62:17 (#409)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:62:16: 62:17 (#409)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:62:20: 62:21 (#409)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:62:25: 62:41 (#409)" (> Const (Constant Int 9223372036854775807)) (Typ Int (IntRange I 64)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:62:50: 64:14 (#409)" (> Block () (@@ "pervasive/atomic.rs:63:17: 63:18 (#409)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:63:17: 63:18 (#409)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:17: 63:18 (#409)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:21: 63:22 (#409)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:63:25: 63:84 (#409)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:63:26: 63:51 (#409)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:27: 63:43 (#409)" (> Const (Constant Int 9223372036854775807))
               (Typ Int (IntRange I 64))
              ) (@@ "pervasive/atomic.rs:63:55: 63:71 (#409)" (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:82: 63:83 (#409)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:64:20: 68:14 (#409)" (> If (@@ "pervasive/atomic.rs:64:23: 64:24 (#409)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:64:23: 64:24 (#409)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:64:23: 64:24 (#409)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:64:27: 64:28 (#409)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:64:32: 64:48 (#409)" (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:64:57: 66:14 (#409)" (> Block () (@@ "pervasive/atomic.rs:65:17: 65:18 (#409)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:65:17: 65:18 (#409)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:17: 65:18 (#409)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:21: 65:22 (#409)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:65:25: 65:84 (#409)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:65:26: 65:51 (#409)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:27: 65:43 (#409)" (> Const (Constant Int 9223372036854775807))
                 (Typ Int (IntRange I 64))
                ) (@@ "pervasive/atomic.rs:65:55: 65:71 (#409)" (> Const (Constant Int -9223372036854775808)) (Typ Int (IntRange I 64)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:82: 65:83 (#409)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:66:20: 68:14 (#409)" (> Block () (@@ "pervasive/atomic.rs:67:17: 67:18 (#409)" (> Binary (BinaryOp
             Arith (ArithOp Sub) None
            ) (@@ "pervasive/atomic.rs:67:17: 67:18 (#409)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:67:21: 67:22 (#409)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#414)" (Function
  :name (Fun :path "vstd!atomic.impl&%19.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#414)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionI64." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:486:56: 486:73 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataI64."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#414)" (Function
  :name (Fun :path "vstd!atomic.impl&%19.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#414)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI64."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#414)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicI64." ()) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#414)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#414)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#414)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#414)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
          :variant "PermissionDataI64" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#414)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#414)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI64."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#414)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#414)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicI64." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#414)" (Function
  :name (Fun :path "vstd!atomic.impl&%19.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#414)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI64."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#414)" (Param :name "v~4" :typ (Typ Int (IntRange I 64)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#414)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#414)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#414)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#414)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64."
          :variant "PermissionDataI64" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#414)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#414)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionI64."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
       ) (Typ Int (IntRange I 64))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#414)" (> Var "v~4") (Typ Int (IntRange I 64)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:132:9: 132:37 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:132:24: 132:29 (#442)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:132:34: 132:37 (#442)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:136:9: 136:73 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:136:20: 136:21 (#442)" (Param :name "i~2" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:136:43: 136:73 (#442)" (Param :name "res~10" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicIsize."
       ()
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionIsize." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/atomic.rs:138:17: 138:85 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:138:23: 138:36 (#442)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.") () () (AutospecUsage IfMarked)) (
        (@@ "pervasive/atomic.rs:138:23: 138:29 (#442)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/atomic.rs:138:23: 138:28 (#442)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/atomic.rs:138:23: 138:26 (#442)"
             (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicIsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!atomic.PermissionIsize." ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionIsize." ())))
         ) (Typ Datatype "vstd!atomic.PermissionIsize." ())))
      ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ())
     ) (@@ "pervasive/atomic.rs:138:51: 138:84 (#442)" (> Ctor "vstd!atomic.PermissionDataIsize." "PermissionDataIsize" ((-> patomic
         (@@ "pervasive/atomic.rs:138:62: 138:72 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:138:62: 138:67 (#442)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic.rs:138:62: 138:65 (#442)"
               (> Var "res~10") (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicIsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!atomic.PermissionIsize." ())))))
             ) (Typ Datatype "vstd!atomic.PAtomicIsize." ())))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/atomic.rs:138:81: 138:82 (#442)" (> Var "i~2") (Typ Int (IntRange ISize))))
       ) None
      ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:147:9: 147:12 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.load.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:147:21: 147:26 (#442)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#445)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate
       (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionIsize." ()))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:149:17: 149:54 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:149:23: 149:32 (#442)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:149:23: 149:27 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:149:34: 149:53 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:149:34: 149:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:149:34: 149:38 (#442)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:150:21: 150:50 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:150:27: 150:44 (#442)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:150:27: 150:38 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:150:27: 150:31 (#442)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:150:46: 150:49 (#442)" (> Var "ret~44") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:159:9: 159:81 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.store.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:159:22: 159:27 (#442)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#445)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:159:68: 159:69 (#442)" (Param :name "v~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:164:9: 164:9 (#442)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/atomic.rs:161:17: 161:59 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:161:23: 161:32 (#442)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:161:23: 161:27 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:161:34: 161:58 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:161:34: 161:50 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:161:34: 161:43 (#442)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:162:21: 162:89 (#442)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:162:21: 162:48 (#442)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:27: 162:44 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
           :variant "PermissionDataIsize" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:27: 162:38 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:27: 162:31 (#442)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:162:46: 162:47 (#442)" (> Var "v~6") (Typ Int (IntRange ISize)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:162:52: 162:89 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:162:58: 162:67 (#442)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:162:58: 162:62 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:162:69: 162:88 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
           :variant "PermissionDataIsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:162:69: 162:80 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:162:69: 162:73 (#442)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:171:9: 171:152 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.compare_exchange.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:171:33: 171:38 (#442)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#445)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ())
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:171:79: 171:86 (#442)" (Param :name "current~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/atomic.rs:171:99: 171:102 (#442)" (Param :name "new~8" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:171:124: 171:152 (#442)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange ISize)
      ) (Typ Int (IntRange ISize)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:173:17: 173:59 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:173:23: 173:32 (#442)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:173:23: 173:27 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:173:34: 173:58 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:173:34: 173:50 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:173:34: 173:43 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:175:17: 185:18 (#442)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:175:17: 175:54 (#442)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:175:23: 175:32 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%20.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:175:23: 175:27 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:175:34: 175:53 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
           :variant "PermissionDataIsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:175:34: 175:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:175:34: 175:38 (#442)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:176:20: 185:18 (#442)" (> Match (@@ "pervasive/atomic.rs:176:26: 176:29 (#442)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange ISize)) (Typ Int (IntRange ISize))))
       ) ((@ "pervasive/atomic.rs:177:21: 180:60 (#442)" (Arm :pattern (@@ "pervasive/atomic.rs:177:21: 177:34 (#442)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:177:32: 177:33 (#442)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange ISize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange ISize)) (Typ Int (IntRange ISize))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#442)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:178:28: 180:60 (#442)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 179:57 (#442)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:178:28: 178:35 (#442)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:178:28: 178:35 (#442)" (> Var "current~6") (Typ Int (IntRange ISize)))
                (@@ "pervasive/atomic.rs:178:39: 178:61 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                    :variant "PermissionDataIsize" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:178:39: 178:55 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:178:39: 178:48 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionIsize." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:179:28: 179:57 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:179:34: 179:51 (#442)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:179:34: 179:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:179:34: 179:38 (#442)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
                 ) (Typ Int (IntRange ISize))
                ) (@@ "pervasive/atomic.rs:179:53: 179:56 (#442)" (> Var "new~8") (Typ Int (IntRange ISize)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:180:28: 180:60 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:180:34: 180:35 (#442)"
               (> Var "r~71") (Typ Int (IntRange ISize))
              ) (@@ "pervasive/atomic.rs:180:37: 180:59 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                  :variant "PermissionDataIsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:180:37: 180:53 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:180:37: 180:46 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionIsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
               ) (Typ Int (IntRange ISize)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:181:21: 184:60 (#442)" (Arm :pattern (@@ "pervasive/atomic.rs:181:21: 181:35 (#442)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:181:33: 181:34 (#442)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange ISize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange ISize)) (Typ Int (IntRange ISize))))
          ) :guard (@@ "pervasive/atomic.rs:176:20: 185:18 (#442)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:182:28: 184:60 (#442)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 183:76 (#442)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:182:28: 182:35 (#442)"
               (> Unary (UnaryOp Not) (@@ "pervasive/atomic.rs:182:28: 182:35 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:182:28: 182:35 (#442)"
                   (> Var "current~6") (Typ Int (IntRange ISize))
                  ) (@@ "pervasive/atomic.rs:182:39: 182:61 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                      :variant "PermissionDataIsize" :field "value" :get_variant false)
                    ) (@@ "pervasive/atomic.rs:182:39: 182:55 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                       () () (AutospecUsage IfMarked)
                      ) ((@@ "pervasive/atomic.rs:182:39: 182:48 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                          Datatype "vstd!atomic.PermissionIsize." ()))))
                     ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
                   ) (Typ Int (IntRange ISize)))
                 ) (Typ Bool))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:183:28: 183:76 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:183:34: 183:51 (#442)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:34: 183:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:34: 183:38 (#442)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
                 ) (Typ Int (IntRange ISize))
                ) (@@ "pervasive/atomic.rs:183:53: 183:75 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                    :variant "PermissionDataIsize" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:183:53: 183:69 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:183:53: 183:62 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionIsize." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:184:28: 184:60 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:184:34: 184:35 (#442)"
               (> Var "r~116") (Typ Int (IntRange ISize))
              ) (@@ "pervasive/atomic.rs:184:37: 184:59 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                  :variant "PermissionDataIsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:184:37: 184:53 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:184:37: 184:46 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionIsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
               ) (Typ Int (IntRange ISize)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:197:9: 197:157 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.compare_exchange_weak.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:197:38: 197:43 (#442)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#445)" (Param :name "perm~11" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ())
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:197:84: 197:91 (#442)" (Param :name "current~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/atomic.rs:197:104: 197:107 (#442)" (Param :name "new~8" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:197:129: 197:157 (#442)" (Param :name "ret~51" :typ (Typ Datatype "core!result.Result." ((Typ Int
       (IntRange ISize)
      ) (Typ Int (IntRange ISize)))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:199:17: 199:59 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:199:23: 199:32 (#442)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:199:23: 199:27 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:199:34: 199:58 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:199:34: 199:50 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:199:34: 199:43 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
             Datatype "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:201:17: 210:18 (#442)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:201:17: 201:54 (#442)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:201:23: 201:32 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%20.id."
          ) () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:201:23: 201:27 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:201:34: 201:53 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
           :variant "PermissionDataIsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:201:34: 201:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:201:34: 201:38 (#442)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:202:20: 210:18 (#442)" (> Match (@@ "pervasive/atomic.rs:202:26: 202:29 (#442)" (> Var "ret~51")
        (Typ Datatype "core!result.Result." ((Typ Int (IntRange ISize)) (Typ Int (IntRange ISize))))
       ) ((@ "pervasive/atomic.rs:203:21: 206:60 (#442)" (Arm :pattern (@@ "pervasive/atomic.rs:203:21: 203:34 (#442)" (Pattern Constructor
            "core!result.Result." "Ok" ((-> _0 (@@ "pervasive/atomic.rs:203:32: 203:33 (#442)" (Pattern Var :name "r~71" :mutable false)
               (Typ Int (IntRange ISize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange ISize)) (Typ Int (IntRange ISize))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#442)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:204:28: 206:60 (#442)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 205:57 (#442)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:204:28: 204:35 (#442)"
               (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:204:28: 204:35 (#442)" (> Var "current~6") (Typ Int (IntRange ISize)))
                (@@ "pervasive/atomic.rs:204:39: 204:61 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                    :variant "PermissionDataIsize" :field "value" :get_variant false)
                  ) (@@ "pervasive/atomic.rs:204:39: 204:55 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:204:39: 204:48 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                        Datatype "vstd!atomic.PermissionIsize." ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Bool)
              ) (@@ "pervasive/atomic.rs:205:28: 205:57 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:205:34: 205:51 (#442)"
                 (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
                    :get_variant false)
                  ) (@@ "pervasive/atomic.rs:205:34: 205:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/atomic.rs:205:34: 205:38 (#442)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
                        ()))))
                   ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
                 ) (Typ Int (IntRange ISize))
                ) (@@ "pervasive/atomic.rs:205:53: 205:56 (#442)" (> Var "new~8") (Typ Int (IntRange ISize)))
               ) (Typ Bool))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:206:28: 206:60 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:206:34: 206:35 (#442)"
               (> Var "r~71") (Typ Int (IntRange ISize))
              ) (@@ "pervasive/atomic.rs:206:37: 206:59 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                  :variant "PermissionDataIsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:206:37: 206:53 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:206:37: 206:46 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionIsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
               ) (Typ Int (IntRange ISize)))
             ) (Typ Bool))
           ) (Typ Bool)))
        ) (@ "pervasive/atomic.rs:207:21: 209:60 (#442)" (Arm :pattern (@@ "pervasive/atomic.rs:207:21: 207:35 (#442)" (Pattern Constructor
            "core!result.Result." "Err" ((-> _0 (@@ "pervasive/atomic.rs:207:33: 207:34 (#442)" (Pattern Var :name "r~116" :mutable false)
               (Typ Int (IntRange ISize)))))
           ) (Typ Datatype "core!result.Result." ((Typ Int (IntRange ISize)) (Typ Int (IntRange ISize))))
          ) :guard (@@ "pervasive/atomic.rs:202:20: 210:18 (#442)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/atomic.rs:208:28: 209:60 (#442)"
           (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:208:28: 208:76 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:208:34: 208:51 (#442)"
               (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
                  :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:34: 208:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:34: 208:38 (#442)" (> Var "perm~11") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
                      ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
               ) (Typ Int (IntRange ISize))
              ) (@@ "pervasive/atomic.rs:208:53: 208:75 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                  :variant "PermissionDataIsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:208:53: 208:69 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:208:53: 208:62 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionIsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
               ) (Typ Int (IntRange ISize)))
             ) (Typ Bool)
            ) (@@ "pervasive/atomic.rs:209:28: 209:60 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:209:34: 209:35 (#442)"
               (> Var "r~116") (Typ Int (IntRange ISize))
              ) (@@ "pervasive/atomic.rs:209:37: 209:59 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
                  :variant "PermissionDataIsize" :field "value" :get_variant false)
                ) (@@ "pervasive/atomic.rs:209:37: 209:53 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
                   () () (AutospecUsage IfMarked)
                  ) ((@@ "pervasive/atomic.rs:209:37: 209:46 (#442)" (> VarAt "perm~11" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ
                      Datatype "vstd!atomic.PermissionIsize." ()))))
                 ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
               ) (Typ Int (IntRange ISize)))
             ) (Typ Bool))
           ) (Typ Bool)))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:222:9: 222:12 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:222:21: 222:26 (#442)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#445)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:222:67: 222:68 (#442)" (Param :name "v~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:224:17: 224:59 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:224:23: 224:32 (#442)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:224:23: 224:27 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:224:34: 224:58 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:224:34: 224:50 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:224:34: 224:43 (#442)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:226:20: 228:57 (#442)" (> Binary (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 227:54 (#442)" (> Binary
       (BinaryOp And) (@@ "pervasive/atomic.rs:226:20: 226:47 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:226:26: 226:43 (#442)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:226:26: 226:37 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:226:26: 226:30 (#442)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
                 ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize))
         ) (@@ "pervasive/atomic.rs:226:45: 226:46 (#442)" (> Var "v~6") (Typ Int (IntRange ISize)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:227:20: 227:54 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:227:26: 227:48 (#442)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic.rs:227:26: 227:42 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:227:26: 227:35 (#442)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionIsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize))
         ) (@@ "pervasive/atomic.rs:227:50: 227:53 (#442)" (> Var "ret~49") (Typ Int (IntRange ISize)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic.rs:228:20: 228:57 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:228:26: 228:35 (#442)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/atomic.rs:228:26: 228:30 (#442)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
             ()))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/atomic.rs:228:37: 228:56 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
           :variant "PermissionDataIsize" :field "patomic" :get_variant false)
         ) (@@ "pervasive/atomic.rs:228:37: 228:48 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:228:37: 228:41 (#442)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
               ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:236:9: 236:12 (#442)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:236:27: 236:31 (#442)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PAtomicIsize." ()) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:130:9: 245:10 (#445)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype
       "vstd!atomic.PermissionIsize." ())
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~44" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:238:17: 238:54 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:238:23: 238:32 (#442)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:238:23: 238:27 (#442)" (> Var "self~2") (Typ Datatype "vstd!atomic.PAtomicIsize." ())))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:238:34: 238:53 (#442)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:238:34: 238:45 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:238:34: 238:38 (#442)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionIsize." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:239:21: 239:50 (#442)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:239:27: 239:44 (#442)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:239:27: 239:38 (#442)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:239:27: 239:31 (#442)" (> Var "perm~7") (Typ Datatype "vstd!atomic.PermissionIsize." ())))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:239:46: 239:49 (#442)" (> Var "ret~44") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:259:9: 259:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_add_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:259:35: 259:40 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:259:81: 259:82 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:260:22: 260:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:260:28: 260:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:260:28: 260:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:260:39: 260:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:260:39: 260:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:260:39: 260:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:262:17: 262:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:262:23: 262:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:262:23: 262:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:262:23: 262:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:262:47: 262:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:263:17: 263:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:263:17: 263:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:17: 263:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:17: 263:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:263:40: 263:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:263:40: 263:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:263:40: 263:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:264:17: 264:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:264:17: 264:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:264:17: 264:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:264:17: 264:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:264:54: 264:95 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_add_isize.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:264:55: 264:77 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
            :variant "PermissionDataIsize" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:264:55: 264:71 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:264:55: 264:64 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionIsize." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
         ) (Typ Int (IntRange ISize))
        ) (@@ "pervasive/atomic.rs:264:86: 264:87 (#448)" (> Var "n~6") (Typ Int (IntRange ISize))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:273:9: 273:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_sub_wrapping.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:273:35: 273:40 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:273:81: 273:82 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:274:22: 274:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:274:28: 274:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:274:28: 274:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:274:39: 274:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:274:39: 274:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:274:39: 274:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:276:17: 276:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:276:23: 276:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:276:23: 276:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:276:23: 276:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:276:47: 276:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:277:17: 277:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:277:17: 277:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:17: 277:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:17: 277:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:277:40: 277:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:277:40: 277:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:277:40: 277:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:278:17: 278:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:278:17: 278:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:278:17: 278:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:278:17: 278:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:278:54: 278:95 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.wrapping_sub_isize.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic.rs:278:55: 278:77 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
            :variant "PermissionDataIsize" :field "value" :get_variant false)
          ) (@@ "pervasive/atomic.rs:278:55: 278:71 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic.rs:278:55: 278:64 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!atomic.PermissionIsize." ()))))
           ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
         ) (Typ Int (IntRange ISize))
        ) (@@ "pervasive/atomic.rs:278:86: 278:87 (#448)" (> Var "n~6") (Typ Int (IntRange ISize))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:289:9: 289:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:289:26: 289:31 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:289:72: 289:73 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:291:17: 291:59 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:291:23: 291:32 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:291:23: 291:27 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:291:34: 291:58 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:291:34: 291:50 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:291:34: 291:43 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:292:17: 292:42 (#448)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:292:18: 292:34 (#448)"
      (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec) (@@ "pervasive/atomic.rs:292:18: 292:34 (#448)"
        (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec) (@@ "pervasive/atomic.rs:292:18: 292:34 (#448)"
          (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:292:46: 292:49 (#448)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:292:46: 292:68 (#448)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:292:46: 292:62 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:292:46: 292:55 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:292:71: 292:72 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:293:17: 293:20 (#448)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:293:17: 293:20 (#448)"
      (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:293:17: 293:39 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:293:17: 293:33 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:293:17: 293:26 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:293:42: 293:43 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:293:48: 293:64 (#448)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMax) Exec)
       (@@ "pervasive/atomic.rs:293:48: 293:64 (#448)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
         (@@ "pervasive/atomic.rs:293:48: 293:64 (#448)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:295:17: 295:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:295:23: 295:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:295:23: 295:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:295:23: 295:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:295:47: 295:50 (#448)" (> Var "ret~101") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:296:17: 296:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:296:17: 296:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:17: 296:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:17: 296:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:296:40: 296:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:296:40: 296:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:296:40: 296:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:297:17: 297:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:297:17: 297:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:297:17: 297:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:297:17: 297:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:297:38: 297:41 (#448)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:297:38: 297:60 (#448)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:297:38: 297:54 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:297:38: 297:47 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:297:63: 297:64 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:299:9: 301:10 (#448)" (> Block () (@@ "pervasive/atomic.rs:300:13: 300:60 (#448)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.fetch_add_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:300:13: 300:17 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
          ()))
       ) (@@ "pervasive/atomic.rs:300:45: 300:55 (#448)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:300:45: 300:55 (#448)"
          (> Loc (@@ "pervasive/atomic.rs:300:51: 300:55 (#448)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionIsize." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize." ()))
       ) (@@ "pervasive/atomic.rs:300:58: 300:59 (#448)" (> Var "n~6") (Typ Int (IntRange ISize))))
     ) (Typ Int (IntRange ISize)))
   ) (Typ Int (IntRange ISize))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:305:9: 305:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:305:26: 305:31 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:305:72: 305:73 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~101" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:307:17: 307:59 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:307:23: 307:32 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:307:23: 307:27 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:307:34: 307:58 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:307:34: 307:50 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:307:34: 307:43 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:308:17: 308:42 (#448)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:308:18: 308:34 (#448)"
      (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec) (@@ "pervasive/atomic.rs:308:18: 308:34 (#448)"
        (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec) (@@ "pervasive/atomic.rs:308:18: 308:34 (#448)"
          (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:308:46: 308:49 (#448)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:308:46: 308:68 (#448)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:308:46: 308:62 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:308:46: 308:55 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:308:71: 308:72 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:309:17: 309:20 (#448)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/atomic.rs:309:17: 309:20 (#448)"
      (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:309:17: 309:39 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr
           :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value" :get_variant false)
         ) (@@ "pervasive/atomic.rs:309:17: 309:33 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:309:17: 309:26 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:309:42: 309:43 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:309:47: 309:63 (#448)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMax) Exec)
       (@@ "pervasive/atomic.rs:309:47: 309:63 (#448)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
         (@@ "pervasive/atomic.rs:309:47: 309:63 (#448)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:311:17: 311:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:311:23: 311:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:311:23: 311:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:311:23: 311:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:311:47: 311:50 (#448)" (> Var "ret~101") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:312:17: 312:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:312:17: 312:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:17: 312:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:17: 312:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:312:40: 312:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:312:40: 312:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:312:40: 312:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:313:17: 313:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:313:17: 313:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:313:17: 313:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:313:17: 313:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:313:38: 313:41 (#448)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:313:38: 313:60 (#448)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:313:38: 313:54 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:313:38: 313:47 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:313:63: 313:64 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:315:9: 317:10 (#448)" (> Block () (@@ "pervasive/atomic.rs:316:13: 316:60 (#448)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.fetch_sub_wrapping.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/atomic.rs:316:13: 316:17 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
          ()))
       ) (@@ "pervasive/atomic.rs:316:45: 316:55 (#448)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic.rs:316:45: 316:55 (#448)"
          (> Loc (@@ "pervasive/atomic.rs:316:51: 316:55 (#448)" (> VarLoc "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!atomic.PermissionIsize." ())))
          ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize." ())))
        ) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize." ()))
       ) (@@ "pervasive/atomic.rs:316:58: 316:59 (#448)" (> Var "n~6") (Typ Int (IntRange ISize))))
     ) (Typ Int (IntRange ISize)))
   ) (Typ Int (IntRange ISize))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:322:9: 322:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_and.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:322:26: 322:31 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:322:72: 322:73 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:323:22: 323:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:323:28: 323:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:323:28: 323:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:323:39: 323:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:323:39: 323:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:323:39: 323:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:325:17: 325:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:325:23: 325:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:325:23: 325:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:325:23: 325:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:325:47: 325:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:326:17: 326:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:326:17: 326:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:17: 326:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:17: 326:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:326:40: 326:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:326:40: 326:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:326:40: 326:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:327:17: 327:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:327:17: 327:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:327:17: 327:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:327:17: 327:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:327:38: 327:66 (#448)" (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:327:39: 327:61 (#448)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:327:39: 327:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:327:39: 327:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:327:64: 327:65 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:336:9: 336:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_or.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:336:25: 336:30 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:336:71: 336:72 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:337:22: 337:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:337:28: 337:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:337:28: 337:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:337:39: 337:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:337:39: 337:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:337:39: 337:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:339:17: 339:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:339:23: 339:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:339:23: 339:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:339:23: 339:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:339:47: 339:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:340:17: 340:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:340:17: 340:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:17: 340:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:17: 340:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:340:40: 340:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:340:40: 340:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:340:40: 340:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:341:17: 341:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:341:17: 341:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:341:17: 341:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:341:17: 341:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:341:38: 341:66 (#448)" (> Binary (BinaryOp Bitwise (BitwiseOp BitOr) Spec) (@@ "pervasive/atomic.rs:341:39: 341:61 (#448)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:341:39: 341:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:341:39: 341:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:341:64: 341:65 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:350:9: 350:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_xor.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:350:26: 350:31 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:350:72: 350:73 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:351:22: 351:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:351:28: 351:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:351:28: 351:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:351:39: 351:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:351:39: 351:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:351:39: 351:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:353:17: 353:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:353:23: 353:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:353:23: 353:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:353:23: 353:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:353:47: 353:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:354:17: 354:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:354:17: 354:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:17: 354:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:17: 354:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:354:40: 354:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:354:40: 354:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:354:40: 354:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:355:17: 355:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:355:17: 355:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:355:17: 355:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:355:17: 355:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:355:38: 355:66 (#448)" (> Binary (BinaryOp Bitwise (BitwiseOp BitXor) Spec) (@@ "pervasive/atomic.rs:355:39: 355:61 (#448)"
        (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
           :get_variant false)
         ) (@@ "pervasive/atomic.rs:355:39: 355:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
            () () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/atomic.rs:355:39: 355:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!atomic.PermissionIsize." ()))))
          ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:355:64: 355:65 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:364:9: 364:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_nand.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:364:27: 364:32 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:364:73: 364:74 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:365:22: 365:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:365:28: 365:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:365:28: 365:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:365:39: 365:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:365:39: 365:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:365:39: 365:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:367:17: 367:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:367:23: 367:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:367:23: 367:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:367:23: 367:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:367:47: 367:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:368:17: 368:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:368:17: 368:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:17: 368:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:17: 368:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:368:40: 368:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:368:40: 368:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:368:40: 368:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:369:17: 369:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:369:17: 369:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:369:17: 369:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:369:17: 369:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:369:38: 369:67 (#448)" (> Unary (UnaryOp BitNot) (@@ "pervasive/atomic.rs:369:39: 369:67 (#448)"
        (> Binary (BinaryOp Bitwise (BitwiseOp BitAnd) Spec) (@@ "pervasive/atomic.rs:369:40: 369:62 (#448)" (> UnaryOpr (UnaryOpr Field
            (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:369:40: 369:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:369:40: 369:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionIsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize))
         ) (@@ "pervasive/atomic.rs:369:65: 369:66 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
        ) (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:378:9: 378:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:378:26: 378:31 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:378:72: 378:73 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:379:22: 379:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:379:28: 379:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:379:28: 379:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:379:39: 379:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:379:39: 379:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:379:39: 379:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:381:17: 381:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:381:23: 381:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:381:23: 381:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:381:23: 381:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:381:47: 381:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:382:17: 382:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:382:17: 382:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:17: 382:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:17: 382:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:382:40: 382:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:382:40: 382:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:382:40: 382:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:383:17: 383:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:383:17: 383:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:383:17: 383:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:383:17: 383:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:383:38: 383:107 (#448)" (> If (@@ "pervasive/atomic.rs:383:42: 383:45 (#448)" (> Binary (BinaryOp Inequality
          (InequalityOp Gt)
         ) (@@ "pervasive/atomic.rs:383:42: 383:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
             :variant "PermissionDataIsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:42: 383:58 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:42: 383:51 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionIsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize))
         ) (@@ "pervasive/atomic.rs:383:67: 383:68 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:383:69: 383:95 (#448)" (> Block () (@@ "pervasive/atomic.rs:383:71: 383:93 (#448)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:383:71: 383:87 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:383:71: 383:80 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionIsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize)))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:383:101: 383:106 (#448)" (> Block () (@@ "pervasive/atomic.rs:383:103: 383:104 (#448)" (> Var "n~6")
          (Typ Int (IntRange ISize)))
        ) (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:392:9: 392:12 (#448)" (Function
  :name (Fun :path "vstd!atomic.impl&%20.fetch_min.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:392:26: 392:31 (#448)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:251:9: 403:10 (#451)" (Param :name "perm~9" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ()) :mode
     Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/atomic.rs:392:72: 392:73 (#448)" (Param :name "n~6" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:94: 487:99 (#0)" (Param :name "ret~49" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic.rs:393:22: 393:64 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:393:28: 393:37 (#448)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.") () () (AutospecUsage IfMarked)) ((@@
         "pervasive/atomic.rs:393:28: 393:32 (#448)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PAtomicIsize."
           ()))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:393:39: 393:63 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:393:39: 393:55 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:393:39: 393:48 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic.rs:395:17: 395:51 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:395:23: 395:45 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:395:23: 395:39 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:395:23: 395:32 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:395:47: 395:50 (#448)" (> Var "ret~49") (Typ Int (IntRange ISize)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:396:17: 396:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:396:17: 396:36 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:17: 396:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:17: 396:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/atomic.rs:396:40: 396:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
         :variant "PermissionDataIsize" :field "patomic" :get_variant false)
       ) (@@ "pervasive/atomic.rs:396:40: 396:56 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:396:40: 396:49 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/atomic.rs:397:17: 397:21 (#448)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:397:17: 397:34 (#448)"
      (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
         :get_variant false)
       ) (@@ "pervasive/atomic.rs:397:17: 397:28 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic.rs:397:17: 397:21 (#448)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!atomic.PermissionIsize."
             ()))))
        ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
      ) (Typ Int (IntRange ISize))
     ) (@@ "pervasive/atomic.rs:397:38: 397:107 (#448)" (> If (@@ "pervasive/atomic.rs:397:42: 397:45 (#448)" (> Binary (BinaryOp Inequality
          (InequalityOp Lt)
         ) (@@ "pervasive/atomic.rs:397:42: 397:64 (#448)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
             :variant "PermissionDataIsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:42: 397:58 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:42: 397:51 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionIsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize))
         ) (@@ "pervasive/atomic.rs:397:67: 397:68 (#448)" (> Var "n~6") (Typ Int (IntRange ISize)))
        ) (Typ Bool)
       ) (@@ "pervasive/atomic.rs:397:69: 397:95 (#448)" (> Block () (@@ "pervasive/atomic.rs:397:71: 397:93 (#448)" (> UnaryOpr (UnaryOpr
            Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value" :get_variant false)
           ) (@@ "pervasive/atomic.rs:397:71: 397:87 (#448)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic.rs:397:71: 397:80 (#448)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                 "vstd!atomic.PermissionIsize." ()))))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize)))
        ) (Typ Int (IntRange ISize))
       ) (@@ "pervasive/atomic.rs:397:101: 397:106 (#448)" (> Block () (@@ "pervasive/atomic.rs:397:103: 397:104 (#448)" (> Var "n~6")
          (Typ Int (IntRange ISize)))
        ) (Typ Int (IntRange ISize)))
      ) (Typ Int (IntRange ISize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic true :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:51:9: 51:58 (#431)" (Function
  :name (Fun :path "vstd!atomic.wrapping_add_isize.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:51:36: 51:42 (#431)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:51:44: 51:50 (#431)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:51:55: 51:58 (#431)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:51:59: 59:10 (#431)" (> Block () (@@ "pervasive/atomic.rs:52:13: 58:14 (#431)" (> If (@@ "pervasive/atomic.rs:52:16: 52:17 (#431)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:52:16: 52:17 (#431)" (> Binary (BinaryOp Arith (ArithOp
            Add
           ) None
          ) (@@ "pervasive/atomic.rs:52:16: 52:17 (#431)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:52:20: 52:21 (#431)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:52:25: 52:41 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMax) Exec)
          (@@ "pervasive/atomic.rs:52:25: 52:41 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
            (@@ "pervasive/atomic.rs:52:25: 52:41 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange ISize)))
         ) (Typ Int (IntRange ISize)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:52:50: 54:14 (#431)" (> Block () (@@ "pervasive/atomic.rs:53:17: 53:18 (#431)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:53:17: 53:18 (#431)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:17: 53:18 (#431)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:21: 53:22 (#431)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:53:25: 53:84 (#431)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:53:26: 53:51 (#431)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:53:27: 53:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound
                 (IntegerTypeBoundKind SignedMax) Exec
                ) (@@ "pervasive/atomic.rs:53:27: 53:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                  (@@ "pervasive/atomic.rs:53:27: 53:43 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Int (IntRange ISize))
              ) (@@ "pervasive/atomic.rs:53:55: 53:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec)
                (@@ "pervasive/atomic.rs:53:55: 53:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                  (@@ "pervasive/atomic.rs:53:55: 53:71 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Int (IntRange ISize)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:53:82: 53:83 (#431)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:54:20: 58:14 (#431)" (> If (@@ "pervasive/atomic.rs:54:23: 54:24 (#431)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:54:23: 54:24 (#431)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:54:23: 54:24 (#431)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:54:27: 54:28 (#431)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:54:32: 54:48 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec)
            (@@ "pervasive/atomic.rs:54:32: 54:48 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
              (@@ "pervasive/atomic.rs:54:32: 54:48 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange ISize)))
           ) (Typ Int (IntRange ISize)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:54:57: 56:14 (#431)" (> Block () (@@ "pervasive/atomic.rs:55:17: 55:18 (#431)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:55:17: 55:18 (#431)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:17: 55:18 (#431)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:21: 55:22 (#431)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:55:25: 55:84 (#431)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:55:26: 55:51 (#431)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:55:27: 55:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound
                   (IntegerTypeBoundKind SignedMax) Exec
                  ) (@@ "pervasive/atomic.rs:55:27: 55:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                    (@@ "pervasive/atomic.rs:55:27: 55:43 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                   ) (Typ Int (IntRange ISize)))
                 ) (Typ Int (IntRange ISize))
                ) (@@ "pervasive/atomic.rs:55:55: 55:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec)
                  (@@ "pervasive/atomic.rs:55:55: 55:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                    (@@ "pervasive/atomic.rs:55:55: 55:71 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                   ) (Typ Int (IntRange ISize)))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:55:82: 55:83 (#431)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:56:20: 58:14 (#431)" (> Block () (@@ "pervasive/atomic.rs:57:17: 57:18 (#431)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:57:17: 57:18 (#431)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:57:21: 57:22 (#431)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:61:9: 61:58 (#431)" (Function
  :name (Fun :path "vstd!atomic.wrapping_sub_isize.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:61:36: 61:42 (#431)" (Param :name "a~2" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic.rs:61:44: 61:50 (#431)" (Param :name "b~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic.rs:61:55: 61:58 (#431)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:61:59: 69:10 (#431)" (> Block () (@@ "pervasive/atomic.rs:62:13: 68:14 (#431)" (> If (@@ "pervasive/atomic.rs:62:16: 62:17 (#431)"
       (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/atomic.rs:62:16: 62:17 (#431)" (> Binary (BinaryOp Arith (ArithOp
            Sub
           ) None
          ) (@@ "pervasive/atomic.rs:62:16: 62:17 (#431)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:62:20: 62:21 (#431)"
           (> Var "b~4") (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:62:25: 62:41 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMax) Exec)
          (@@ "pervasive/atomic.rs:62:25: 62:41 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
            (@@ "pervasive/atomic.rs:62:25: 62:41 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange ISize)))
         ) (Typ Int (IntRange ISize)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic.rs:62:50: 64:14 (#431)" (> Block () (@@ "pervasive/atomic.rs:63:17: 63:18 (#431)" (> Binary (BinaryOp
           Arith (ArithOp Sub) None
          ) (@@ "pervasive/atomic.rs:63:17: 63:18 (#431)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:17: 63:18 (#431)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:21: 63:22 (#431)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:63:25: 63:84 (#431)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:63:26: 63:51 (#431)"
             (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:63:27: 63:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound
                 (IntegerTypeBoundKind SignedMax) Exec
                ) (@@ "pervasive/atomic.rs:63:27: 63:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                  (@@ "pervasive/atomic.rs:63:27: 63:43 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Int (IntRange ISize))
              ) (@@ "pervasive/atomic.rs:63:55: 63:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec)
                (@@ "pervasive/atomic.rs:63:55: 63:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                  (@@ "pervasive/atomic.rs:63:55: 63:71 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Int (IntRange ISize)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:63:82: 63:83 (#431)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:64:20: 68:14 (#431)" (> If (@@ "pervasive/atomic.rs:64:23: 64:24 (#431)" (> Binary (BinaryOp Inequality
           (InequalityOp Lt)
          ) (@@ "pervasive/atomic.rs:64:23: 64:24 (#431)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:64:23: 64:24 (#431)"
             (> Var "a~2") (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:64:27: 64:28 (#431)" (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int))
          ) (@@ "pervasive/atomic.rs:64:32: 64:48 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec)
            (@@ "pervasive/atomic.rs:64:32: 64:48 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
              (@@ "pervasive/atomic.rs:64:32: 64:48 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange ISize)))
           ) (Typ Int (IntRange ISize)))
         ) (Typ Bool)
        ) (@@ "pervasive/atomic.rs:64:57: 66:14 (#431)" (> Block () (@@ "pervasive/atomic.rs:65:17: 65:18 (#431)" (> Binary (BinaryOp
             Arith (ArithOp Add) None
            ) (@@ "pervasive/atomic.rs:65:17: 65:18 (#431)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:17: 65:18 (#431)"
               (> Var "a~2") (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:21: 65:22 (#431)" (> Var "b~4") (Typ Int (IntRange Int)))
             ) (Typ Int (IntRange Int))
            ) (@@ "pervasive/atomic.rs:65:25: 65:84 (#431)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/atomic.rs:65:26: 65:51 (#431)"
               (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/atomic.rs:65:27: 65:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound
                   (IntegerTypeBoundKind SignedMax) Exec
                  ) (@@ "pervasive/atomic.rs:65:27: 65:43 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                    (@@ "pervasive/atomic.rs:65:27: 65:43 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                   ) (Typ Int (IntRange ISize)))
                 ) (Typ Int (IntRange ISize))
                ) (@@ "pervasive/atomic.rs:65:55: 65:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind SignedMin) Exec)
                  (@@ "pervasive/atomic.rs:65:55: 65:71 (#431)" (> UnaryOpr (UnaryOpr IntegerTypeBound (IntegerTypeBoundKind ArchWordBits) Exec)
                    (@@ "pervasive/atomic.rs:65:55: 65:71 (#431)" (> Const (Constant Int 0)) (Typ Int (IntRange Int)))
                   ) (Typ Int (IntRange ISize)))
                 ) (Typ Int (IntRange ISize)))
               ) (Typ Int (IntRange Int))
              ) (@@ "pervasive/atomic.rs:65:82: 65:83 (#431)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
             ) (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic.rs:66:20: 68:14 (#431)" (> Block () (@@ "pervasive/atomic.rs:67:17: 67:18 (#431)" (> Binary (BinaryOp
             Arith (ArithOp Sub) None
            ) (@@ "pervasive/atomic.rs:67:17: 67:18 (#431)" (> Var "a~2") (Typ Int (IntRange Int))) (@@ "pervasive/atomic.rs:67:21: 67:22 (#431)"
             (> Var "b~4") (Typ Int (IntRange Int)))
           ) (Typ Int (IntRange Int)))
         ) (Typ Int (IntRange Int)))
       ) (Typ Int (IntRange Int)))
     ) (Typ Int (IntRange Int)))
   ) (Typ Int (IntRange Int))
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:113:13: 113:16 (#436)" (Function
  :name (Fun :path "vstd!atomic.impl&%21.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:113:30: 113:34 (#436)" (Param :name "self~2" :typ (Typ Datatype "vstd!atomic.PermissionIsize." ())
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:487:60: 487:79 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!atomic.PermissionDataIsize."
     ()
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic.rs:115:13: 115:71 (#436)" (Function
  :name (Fun :path "vstd!atomic.impl&%21.is_for.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:115:37: 115:42 (#436)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionIsize."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:115:44: 115:51 (#436)" (Param :name "patomic~4" :typ (Typ Datatype "vstd!atomic.PAtomicIsize." ())
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:115:67: 115:71 (#436)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:115:72: 117:14 (#436)" (> Block () (@@ "pervasive/atomic.rs:116:17: 116:21 (#436)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:116:17: 116:36 (#436)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
          :variant "PermissionDataIsize" :field "patomic" :get_variant false)
        ) (@@ "pervasive/atomic.rs:116:17: 116:28 (#436)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:116:17: 116:21 (#436)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionIsize."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic.rs:116:40: 116:52 (#436)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic.rs:116:40: 116:47 (#436)" (> Var "patomic~4") (Typ Datatype "vstd!atomic.PAtomicIsize." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic.rs:119:13: 119:68 (#436)" (Function
  :name (Fun :path "vstd!atomic.impl&%21.points_to.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/atomic.rs:119:40: 119:45 (#436)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionIsize."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic.rs:119:47: 119:48 (#436)" (Param :name "v~4" :typ (Typ Int (IntRange ISize)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/atomic.rs:119:64: 119:68 (#436)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic.rs:119:69: 121:14 (#436)" (> Block () (@@ "pervasive/atomic.rs:120:17: 120:21 (#436)" (> Binary
      (BinaryOp Eq Spec) (@@ "pervasive/atomic.rs:120:17: 120:34 (#436)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize."
          :variant "PermissionDataIsize" :field "value" :get_variant false)
        ) (@@ "pervasive/atomic.rs:120:17: 120:28 (#436)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic.rs:120:17: 120:21 (#436)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic.PermissionIsize."
              ()))))
         ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
       ) (Typ Int (IntRange ISize))
      ) (@@ "pervasive/atomic.rs:120:38: 120:39 (#436)" (> Var "v~4") (Typ Int (IntRange ISize)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:14:10: 14:50 (#0)" (Function
  :name (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.") :proxy None :kind (FunctionKind TraitMethodDecl
   :trait_path "vstd!atomic_ghost.AtomicInvariantPredicate."
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:14:24: 14:28 (#0)" (Param :name "k~2" :typ (Typ TypParam "K") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic_ghost.rs:14:30: 14:34 (#0)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic_ghost.rs:14:36: 14:40 (#0)" (Param :name "g~6" :typ (Typ TypParam "G") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/atomic_ghost.rs:14:45: 14:49 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#457)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%0.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%0." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#457)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#457)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#457)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#457)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#457)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#457)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#457)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#457)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#457)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#457)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#457)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#457)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionU64." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#457)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#457)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#457)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#457)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#457)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#457)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#457)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU64." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#457)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#457)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 64)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#457)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#457)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU64." :variant "PermissionDataU64" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#457)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%9.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#457)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU64." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataU64." ()))
          ) (Typ Int (IntRange U 64))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#457)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#457)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%1.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#457)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#457)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#457)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#457)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#457)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#457)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#457)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#457)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU64."
                 :variant "AtomicU64" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#457)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU64."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionU64." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#457)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#457)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU64."
             :variant "AtomicU64" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#457)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU64."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicU64." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#457)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%1.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#457)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#457)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#457)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#457)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#457)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%0.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#457)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#457)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU64."
               :variant "AtomicU64" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#457)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU64."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionU64." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#457)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%1.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#457)" (Param :name "u~4" :typ (Typ Int (IntRange U 64)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#457)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicU64."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#457)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 64)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#457)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#457)"
       (> Var "u~4") (Typ Int (IntRange U 64))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#457)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#457)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#457)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%1.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#457)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU64." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#457)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#457)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%1.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#457)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU64." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#457)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#457)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#457)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#457)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#457)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicU64." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU64." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU64."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#457)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%8.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#457)" (> Var "u~4") (Typ Int (IntRange U 64))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU64."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#457)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#457)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionU64." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#457)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#457)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#457)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#457)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionU64."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionU64." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionU64." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#457)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#457)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#457)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#457)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionU64." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#457)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#457)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#457)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#457)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#457)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#457)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#457)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU64." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#457)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#457)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#457)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%0.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#457)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#457)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#457)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%8.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#457)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU64." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#457)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#457)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionU64." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#457)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#457)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU64." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#457)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#457)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionU64." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#457)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#457)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#457)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#460)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#457)" (> Ctor "vstd!atomic_ghost.AtomicU64." "AtomicU64" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#457)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU64." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#457)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#457)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionU64." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU64." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicU64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicU64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#464)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%2.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%2." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#464)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#464)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#464)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#464)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#464)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#464)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#464)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#464)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#464)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#464)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#464)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#464)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionU32." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#464)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#464)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#464)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#464)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#464)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#464)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#464)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU32." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#464)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#464)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 32)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#464)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#464)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU32." :variant "PermissionDataU32" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#464)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%7.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#464)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU32." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataU32." ()))
          ) (Typ Int (IntRange U 32))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#464)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#464)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%3.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#464)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#464)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#464)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#464)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#464)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#464)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%2.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#464)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#464)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU32."
                 :variant "AtomicU32" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#464)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU32."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionU32." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#464)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#464)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU32."
             :variant "AtomicU32" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#464)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU32."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicU32." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#464)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%3.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#464)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#464)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#464)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#464)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#464)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%2.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#464)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#464)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU32."
               :variant "AtomicU32" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#464)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU32."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionU32." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#464)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%3.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#464)" (Param :name "u~4" :typ (Typ Int (IntRange U 32)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#464)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicU32."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#464)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 32)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#464)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#464)"
       (> Var "u~4") (Typ Int (IntRange U 32))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#464)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#464)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#464)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%3.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#464)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU32." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#464)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#464)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%3.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#464)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU32." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#464)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#464)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#464)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#464)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#464)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicU32." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU32." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU32."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#464)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%6.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#464)" (> Var "u~4") (Typ Int (IntRange U 32))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU32."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#464)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#464)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionU32." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#464)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#464)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#464)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#464)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionU32."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionU32." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionU32." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#464)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#464)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#464)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#464)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionU32." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#464)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#464)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#464)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#464)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#464)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#464)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#464)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU32." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#464)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#464)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#464)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%2.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#464)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#464)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#464)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%6.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#464)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU32." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#464)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#464)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionU32." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#464)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#464)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU32." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#464)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#464)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionU32." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#464)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#464)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#464)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#467)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#464)" (> Ctor "vstd!atomic_ghost.AtomicU32." "AtomicU32" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#464)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU32." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#464)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#464)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionU32." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU32." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicU32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicU32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#471)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%4.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%4." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#471)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#471)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#471)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#471)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#471)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#471)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#471)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#471)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#471)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#471)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#471)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#471)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionU16." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#471)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#471)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#471)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#471)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#471)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#471)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#471)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU16." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#471)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#471)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 16)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#471)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#471)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU16." :variant "PermissionDataU16" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#471)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%5.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#471)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU16." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataU16." ()))
          ) (Typ Int (IntRange U 16))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#471)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#471)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%5.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#471)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#471)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#471)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#471)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#471)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#471)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%4.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#471)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#471)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU16."
                 :variant "AtomicU16" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#471)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU16."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionU16." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#471)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#471)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU16."
             :variant "AtomicU16" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#471)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU16."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicU16." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#471)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%5.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#471)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#471)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#471)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#471)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#471)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%4.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#471)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#471)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU16."
               :variant "AtomicU16" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#471)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU16."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionU16." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#471)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%5.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#471)" (Param :name "u~4" :typ (Typ Int (IntRange U 16)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#471)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicU16."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#471)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 16)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#471)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#471)"
       (> Var "u~4") (Typ Int (IntRange U 16))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#471)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#471)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#471)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%5.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#471)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU16." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#471)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#471)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%5.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#471)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU16." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#471)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#471)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#471)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#471)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#471)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicU16." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU16." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU16."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#471)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%4.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#471)" (> Var "u~4") (Typ Int (IntRange U 16))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU16."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#471)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#471)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionU16." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#471)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#471)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#471)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#471)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionU16."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionU16." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionU16." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#471)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#471)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#471)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#471)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionU16." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#471)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#471)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#471)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#471)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#471)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#471)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#471)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU16." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#471)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#471)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#471)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%4.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#471)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#471)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#471)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%4.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#471)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU16." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#471)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#471)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionU16." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#471)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#471)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU16." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#471)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#471)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionU16." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#471)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#471)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#471)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#474)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#471)" (> Ctor "vstd!atomic_ghost.AtomicU16." "AtomicU16" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#471)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU16." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#471)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#471)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionU16." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU16." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicU16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicU16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#478)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%6.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%6." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#478)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#478)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#478)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#478)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#478)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#478)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#478)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#478)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#478)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#478)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#478)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#478)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionU8." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#478)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#478)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#478)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#478)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#478)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#478)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#478)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU8." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#478)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#478)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 8)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#478)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#478)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataU8." :variant "PermissionDataU8" :field "value" :get_variant
             false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#478)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%3.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#478)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionU8." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataU8." ()))
          ) (Typ Int (IntRange U 8))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#478)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#478)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%7.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#478)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#478)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#478)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#478)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#478)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#478)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%6.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#478)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#478)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU8."
                 :variant "AtomicU8" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#478)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU8."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionU8." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#478)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#478)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU8."
             :variant "AtomicU8" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#478)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU8."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicU8." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#478)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%7.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#478)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicU8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#478)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#478)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#478)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#478)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%6.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#478)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#478)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicU8."
               :variant "AtomicU8" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#478)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicU8."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionU8." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#478)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%7.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#478)" (Param :name "u~4" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#478)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicU8."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#478)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange U 8)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#478)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#478)"
       (> Var "u~4") (Typ Int (IntRange U 8))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#478)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#478)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#478)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%7.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#478)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU8." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#478)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#478)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%7.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#478)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicU8." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#478)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#478)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#478)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#478)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#478)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicU8." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU8." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU8."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#478)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%2.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#478)" (> Var "u~4") (Typ Int (IntRange U 8))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicU8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionU8."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#478)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#478)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionU8." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#478)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#478)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#478)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#478)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionU8."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionU8." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionU8." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#478)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#478)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#478)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#478)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionU8." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#478)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#478)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#478)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#478)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#478)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#478)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#478)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU8." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#478)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#478)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#478)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%6.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#478)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#478)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#478)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%2.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#478)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU8." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#478)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#478)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionU8." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#478)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#478)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionU8." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#478)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#478)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionU8." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#478)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#478)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#478)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#481)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#478)" (> Ctor "vstd!atomic_ghost.AtomicU8." "AtomicU8" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#478)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicU8." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#478)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#478)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionU8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionU8." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredU8." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicU8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicU8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#485)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%8.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%8." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#485)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#485)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#485)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#485)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#485)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#485)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#485)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#485)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#485)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#485)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#485)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#485)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionUsize." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#485)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#485)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#485)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#485)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#485)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#485)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#485)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionUsize." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#485)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#485)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange USize)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#485)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#485)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataUsize." :variant "PermissionDataUsize" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#485)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%11.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#485)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionUsize." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataUsize." ()))
          ) (Typ Int (IntRange USize))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#485)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#485)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%9.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#485)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicUsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#485)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#485)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#485)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#485)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#485)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ
               TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%8.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#485)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#485)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicUsize."
                 :variant "AtomicUsize" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#485)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicUsize."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionUsize." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#485)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#485)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicUsize."
             :variant "AtomicUsize" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#485)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicUsize."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicUsize." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#485)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%9.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#485)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicUsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#485)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#485)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#485)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#485)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%8.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#485)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#485)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicUsize."
               :variant "AtomicUsize" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#485)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicUsize."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionUsize." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#485)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%9.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#485)" (Param :name "u~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#485)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicUsize."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#485)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange USize)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#485)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#485)"
       (> Var "u~4") (Typ Int (IntRange USize))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#485)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#485)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#485)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%9.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#485)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicUsize." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#485)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#485)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%9.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#485)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicUsize." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#485)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#485)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#485)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#485)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#485)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicUsize." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionUsize." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicUsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionUsize."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#485)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%10.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#485)" (> Var "u~4") (Typ Int (IntRange USize))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicUsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionUsize."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#485)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#485)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionUsize." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#485)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#485)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#485)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#485)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionUsize."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionUsize." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionUsize." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#485)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#485)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#485)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#485)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionUsize." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#485)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#485)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#485)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#485)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#485)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#485)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#485)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionUsize." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#485)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#485)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#485)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ
                    TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%8.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#485)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#485)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#485)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%10.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#485)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicUsize." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#485)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#485)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionUsize." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#485)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#485)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionUsize." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#485)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#485)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionUsize." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ
                    TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#485)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#485)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#485)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ
                      TypParam "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#488)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ
                      TypParam "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#485)" (> Ctor "vstd!atomic_ghost.AtomicUsize." "AtomicUsize" ((-> patomic (@@
         "pervasive/atomic_ghost.rs:78:21: 78:28 (#485)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicUsize." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#485)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#485)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionUsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionUsize." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredUsize." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicUsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicUsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#492)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%10.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%10." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#492)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#492)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#492)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#492)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#492)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#492)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#492)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#492)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#492)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#492)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#492)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#492)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionI64." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#492)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#492)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#492)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#492)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#492)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#492)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#492)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI64." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#492)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#492)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 64)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#492)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#492)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI64." :variant "PermissionDataI64" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#492)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%19.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#492)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI64." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataI64." ()))
          ) (Typ Int (IntRange I 64))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#492)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#492)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%11.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#492)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#492)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#492)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#492)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#492)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#492)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%10.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#492)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#492)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI64."
                 :variant "AtomicI64" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#492)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI64."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionI64." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#492)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#492)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI64."
             :variant "AtomicI64" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#492)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI64."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicI64." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#492)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%11.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#492)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#492)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#492)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#492)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#492)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%10.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#492)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#492)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI64."
               :variant "AtomicI64" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#492)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI64."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionI64." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#492)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%11.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#492)" (Param :name "u~4" :typ (Typ Int (IntRange I 64)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#492)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicI64."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#492)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 64)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#492)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#492)"
       (> Var "u~4") (Typ Int (IntRange I 64))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#492)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#492)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#492)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%11.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#492)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI64." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#492)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#492)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%11.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#492)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI64." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#492)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#492)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#492)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#492)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#492)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicI64." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI64." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI64."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#492)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%18.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#492)" (> Var "u~4") (Typ Int (IntRange I 64))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI64." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI64."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#492)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#492)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionI64." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#492)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#492)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#492)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#492)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionI64."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionI64." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionI64." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#492)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#492)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#492)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#492)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionI64." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#492)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#492)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#492)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#492)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#492)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#492)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#492)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI64." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#492)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#492)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#492)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%10.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#492)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#492)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#492)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%18.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#492)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI64." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#492)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#492)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionI64." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#492)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#492)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI64." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#492)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#492)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionI64." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#492)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#492)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#492)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#495)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#492)" (> Ctor "vstd!atomic_ghost.AtomicI64." "AtomicI64" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#492)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI64." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#492)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#492)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI64." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionI64." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI64." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicI64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicI64." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#499)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%12.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%12." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#499)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#499)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#499)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#499)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#499)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#499)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#499)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#499)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#499)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#499)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#499)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#499)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionI32." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#499)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#499)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#499)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#499)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#499)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#499)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#499)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI32." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#499)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#499)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 32)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#499)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#499)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI32." :variant "PermissionDataI32" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#499)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%17.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#499)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI32." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataI32." ()))
          ) (Typ Int (IntRange I 32))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#499)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#499)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%13.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#499)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#499)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#499)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#499)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#499)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#499)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%12.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#499)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#499)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI32."
                 :variant "AtomicI32" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#499)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI32."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionI32." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#499)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#499)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI32."
             :variant "AtomicI32" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#499)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI32."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicI32." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#499)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%13.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#499)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#499)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#499)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#499)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#499)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%12.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#499)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#499)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI32."
               :variant "AtomicI32" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#499)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI32."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionI32." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#499)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%13.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#499)" (Param :name "u~4" :typ (Typ Int (IntRange I 32)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#499)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicI32."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#499)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 32)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#499)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#499)"
       (> Var "u~4") (Typ Int (IntRange I 32))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#499)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#499)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#499)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%13.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#499)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI32." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#499)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#499)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%13.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#499)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI32." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#499)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#499)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#499)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#499)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#499)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicI32." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI32." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI32."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#499)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%16.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#499)" (> Var "u~4") (Typ Int (IntRange I 32))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI32." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI32."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#499)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#499)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionI32." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#499)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#499)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#499)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#499)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionI32."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionI32." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionI32." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#499)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#499)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#499)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#499)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionI32." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#499)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#499)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#499)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#499)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#499)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#499)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#499)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI32." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#499)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#499)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#499)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%12.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#499)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#499)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#499)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%16.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#499)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI32." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#499)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#499)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionI32." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#499)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#499)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI32." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#499)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#499)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionI32." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#499)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#499)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#499)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#502)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#499)" (> Ctor "vstd!atomic_ghost.AtomicI32." "AtomicI32" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#499)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI32." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#499)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#499)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI32." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionI32." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI32." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicI32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicI32." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#506)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%14.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%14." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#506)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#506)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#506)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#506)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#506)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#506)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#506)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#506)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#506)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#506)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#506)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#506)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionI16." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#506)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#506)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#506)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#506)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#506)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#506)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#506)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI16." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#506)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#506)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 16)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#506)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#506)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI16." :variant "PermissionDataI16" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#506)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%15.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#506)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI16." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataI16." ()))
          ) (Typ Int (IntRange I 16))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#506)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#506)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%15.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#506)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#506)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#506)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#506)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#506)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#506)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%14.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#506)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#506)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI16."
                 :variant "AtomicI16" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#506)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI16."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionI16." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#506)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#506)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI16."
             :variant "AtomicI16" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#506)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI16."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicI16." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#506)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%15.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#506)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#506)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#506)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#506)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#506)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%14.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#506)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#506)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI16."
               :variant "AtomicI16" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#506)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI16."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionI16." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#506)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%15.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#506)" (Param :name "u~4" :typ (Typ Int (IntRange I 16)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#506)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicI16."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#506)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 16)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#506)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#506)"
       (> Var "u~4") (Typ Int (IntRange I 16))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#506)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#506)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#506)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%15.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#506)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI16." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#506)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#506)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%15.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#506)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI16." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#506)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#506)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#506)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#506)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#506)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicI16." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI16." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI16."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#506)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%14.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#506)" (> Var "u~4") (Typ Int (IntRange I 16))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI16." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI16."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#506)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#506)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionI16." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#506)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#506)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#506)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#506)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionI16."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionI16." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionI16." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#506)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#506)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#506)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#506)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionI16." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#506)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#506)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#506)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#506)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#506)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#506)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#506)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI16." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#506)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#506)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#506)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%14.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#506)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#506)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#506)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%14.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#506)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI16." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#506)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#506)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionI16." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#506)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#506)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI16." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#506)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#506)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionI16." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#506)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#506)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#506)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#509)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#506)" (> Ctor "vstd!atomic_ghost.AtomicI16." "AtomicI16" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#506)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI16." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#506)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#506)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI16." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionI16." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI16." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicI16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicI16." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#513)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%16.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%16." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#513)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#513)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#513)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#513)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#513)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#513)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#513)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#513)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#513)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#513)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#513)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#513)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionI8." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#513)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#513)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#513)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#513)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#513)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#513)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#513)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI8." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#513)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#513)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 8)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#513)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#513)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataI8." :variant "PermissionDataI8" :field "value" :get_variant
             false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#513)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%13.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#513)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionI8." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataI8." ()))
          ) (Typ Int (IntRange I 8))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#513)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#513)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%17.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#513)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#513)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#513)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#513)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#513)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#513)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%16.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#513)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#513)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI8."
                 :variant "AtomicI8" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#513)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI8."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionI8." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#513)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#513)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI8."
             :variant "AtomicI8" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#513)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI8."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicI8." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#513)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%17.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#513)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicI8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#513)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#513)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#513)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#513)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%16.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#513)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#513)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicI8."
               :variant "AtomicI8" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#513)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicI8."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionI8." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#513)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%17.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#513)" (Param :name "u~4" :typ (Typ Int (IntRange I 8)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#513)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicI8."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#513)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange I 8)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#513)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#513)"
       (> Var "u~4") (Typ Int (IntRange I 8))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#513)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#513)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#513)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%17.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#513)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI8." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#513)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#513)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%17.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#513)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicI8." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#513)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#513)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#513)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#513)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#513)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicI8." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI8." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI8."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#513)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%12.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#513)" (> Var "u~4") (Typ Int (IntRange I 8))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicI8." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionI8."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#513)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#513)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionI8." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#513)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#513)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#513)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#513)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionI8."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionI8." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionI8." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#513)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#513)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#513)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#513)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionI8." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#513)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#513)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#513)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#513)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#513)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#513)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#513)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI8." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#513)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#513)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#513)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%16.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#513)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#513)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#513)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%12.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#513)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI8." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#513)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#513)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionI8." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#513)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#513)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionI8." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#513)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#513)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionI8." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#513)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#513)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#513)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#516)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#513)" (> Ctor "vstd!atomic_ghost.AtomicI8." "AtomicI8" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#513)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicI8." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#513)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#513)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionI8." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionI8." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredI8." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicI8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicI8." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#520)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%18.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%18." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#520)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#520)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#520)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#520)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#520)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#520)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#520)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#520)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#520)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#520)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#520)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#520)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionIsize." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#520)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#520)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#520)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#520)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#520)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#520)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#520)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionIsize." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#520)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#520)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange ISize)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#520)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#520)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataIsize." :variant "PermissionDataIsize" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#520)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%21.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#520)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionIsize." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataIsize." ()))
          ) (Typ Int (IntRange ISize))
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#520)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#520)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%19.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#520)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicIsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#520)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#520)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#520)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#520)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#520)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ
               TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%18.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#520)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#520)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicIsize."
                 :variant "AtomicIsize" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#520)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicIsize."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionIsize." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#520)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#520)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicIsize."
             :variant "AtomicIsize" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#520)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicIsize."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicIsize." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#520)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%19.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#520)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicIsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#520)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#520)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#520)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#520)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%18.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#520)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#520)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicIsize."
               :variant "AtomicIsize" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#520)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicIsize."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionIsize." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#520)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%19.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#520)" (Param :name "u~4" :typ (Typ Int (IntRange ISize)) :mode Exec :is_mut false
     :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#520)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicIsize."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#520)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Int (IntRange ISize)) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#520)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#520)"
       (> Var "u~4") (Typ Int (IntRange ISize))
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#520)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#520)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#520)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%19.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#520)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicIsize." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#520)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#520)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%19.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#520)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicIsize." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#520)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#520)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#520)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#520)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#520)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicIsize." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionIsize." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicIsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionIsize."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#520)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%20.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#520)" (> Var "u~4") (Typ Int (IntRange ISize))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicIsize." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionIsize."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#520)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#520)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionIsize." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#520)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#520)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#520)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#520)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionIsize."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionIsize." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionIsize." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#520)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#520)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#520)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#520)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionIsize." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#520)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#520)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#520)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#520)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#520)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#520)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#520)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionIsize." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#520)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#520)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#520)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ
                    TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%18.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#520)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#520)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#520)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%20.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#520)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicIsize." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#520)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#520)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionIsize." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#520)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#520)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionIsize." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#520)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#520)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionIsize." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ
                    TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#520)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#520)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#520)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ
                      TypParam "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#523)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ
                      TypParam "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#520)" (> Ctor "vstd!atomic_ghost.AtomicIsize." "AtomicIsize" ((-> patomic (@@
         "pervasive/atomic_ghost.rs:78:21: 78:28 (#520)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicIsize." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#520)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#520)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionIsize." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionIsize." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredIsize." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicIsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicIsize." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:27:23: 27:77 (#527)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%20.inv.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!invariant.InvariantPredicate.inv.")
   :impl_path "vstd!atomic_ghost.impl&%20." :trait_path "vstd!invariant.InvariantPredicate." :trait_typ_args ((Typ Tuple ((Typ TypParam
       "K"
      ) (Typ Int (IntRange Int)))
    ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G")))
   ) :self_typ (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:27:30: 27:45 (#527)" (Param :name "k_loc~2" :typ (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
         Int)))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/atomic_ghost.rs:27:47: 27:68 (#527)" (Param :name "perm_g~4" :typ (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool."
        ()
       ) (Typ TypParam "G"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:27:73: 27:77 (#527)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:27:78: 33:14 (#527)" (> Block (
     (@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#527)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:28:21: 28:29 (#527)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:28:22: 28:23 (#527)" (Pattern Var :name "k~9" :mutable false) (Typ TypParam "K"))
          (@@ "pervasive/atomic_ghost.rs:28:25: 28:28 (#527)" (Pattern Var :name "loc~10" :mutable false) (Typ Int (IntRange Int))))
        ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:28:32: 28:37 (#527)" (> Var "k_loc~2") (Typ Tuple ((Typ TypParam "K") (Typ
           Int (IntRange Int)))))))
     (@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#527)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:29:21: 29:30 (#527)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:29:22: 29:26 (#527)" (Pattern Var :name "perm~16" :mutable false) (Typ Datatype
            "vstd!atomic.PermissionBool." ())
          ) (@@ "pervasive/atomic_ghost.rs:29:28: 29:29 (#527)" (Pattern Var :name "g~17" :mutable false) (Typ TypParam "G")))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G")))
       ) :mode Spec :init (@@ "pervasive/atomic_ghost.rs:29:33: 29:39 (#527)" (> Var "perm_g~4") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool."
           ()
          ) (Typ TypParam "G"))))))
    ) (@@ "pervasive/atomic_ghost.rs:31:17: 32:63 (#527)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#527)"
       (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:31:17: 31:36 (#527)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype
            "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "patomic" :get_variant false)
          ) (@@ "pervasive/atomic_ghost.rs:31:17: 31:28 (#527)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/atomic_ghost.rs:31:17: 31:21 (#527)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionBool." ())))
           ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
         ) (Typ Int (IntRange Int))
        ) (@@ "pervasive/atomic_ghost.rs:31:40: 31:43 (#527)" (> Var "loc~10") (Typ Int (IntRange Int)))
       ) (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:32:22: 32:63 (#527)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
         ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Bool) (Typ TypParam "G")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:32:39: 32:40 (#527)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:32:42: 32:59 (#527)"
          (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic.PermissionDataBool." :variant "PermissionDataBool" :field "value"
             :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:32:42: 32:53 (#527)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%1.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/atomic_ghost.rs:32:42: 32:46 (#527)" (> Var "perm~16") (Typ Datatype "vstd!atomic.PermissionBool." ())))
            ) (Typ Datatype "vstd!atomic.PermissionDataBool." ()))
          ) (Typ Bool)
         ) (@@ "pervasive/atomic_ghost.rs:32:61: 32:62 (#527)" (> Var "g~17") (Typ TypParam "G")))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:57:13: 57:56 (#527)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%21.well_formed.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:57:42: 57:47 (#527)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicBool." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:57:52: 57:56 (#527)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:57:57: 59:14 (#527)" (> Block () (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#527)"
     (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:58:17: 58:46 (#527)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity
         2 :field 1
        ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:44 (#527)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.")
           ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam
               "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))
           ) ((tuple "Pred" "vstd!atomic_ghost.impl&%20.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/atomic_ghost.rs:58:17: 58:33 (#527)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
              :kind (ModeCoercion Other)
             ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:32 (#527)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicBool."
                 :variant "AtomicBool" :field "atomic_inv" :get_variant false)
               ) (@@ "pervasive/atomic_ghost.rs:58:17: 58:21 (#527)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicBool."
                  ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
              ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                    (IntRange Int)))
                 ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool."
                  ((Typ TypParam "Pred")))))))
            ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                 Datatype "vstd!atomic.PermissionBool." ()
                ) (Typ TypParam "G"))
              ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))))
         ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
       ) (Typ Int (IntRange Int))
      ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:67 (#527)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.")
         () () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:58:50: 58:62 (#527)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicBool."
             :variant "AtomicBool" :field "patomic" :get_variant false)
           ) (@@ "pervasive/atomic_ghost.rs:58:50: 58:54 (#527)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicBool."
              ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
          ) (Typ Datatype "vstd!atomic.PAtomicBool." ())))
       ) (Typ Int (IntRange Int)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:61:13: 61:50 (#527)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%21.constant.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:61:39: 61:44 (#527)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
       "vstd!atomic_ghost.AtomicBool." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/atomic_ghost.rs:61:49: 61:50 (#527)" (Param :name "%return" :typ (Typ TypParam "K") :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:61:51: 63:14 (#527)" (> Block () (@@ "pervasive/atomic_ghost.rs:62:17: 62:46 (#527)"
     (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/atomic_ghost.rs:62:17: 62:44 (#527)" (> Call (CallTarget
         Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.constant.") ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange
              Int)))
          ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool."
           ((Typ TypParam "Pred")))
         ) ((tuple "Pred" "vstd!atomic_ghost.impl&%20.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/atomic_ghost.rs:62:17: 62:33 (#527)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec
            :kind (ModeCoercion Other)
           ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:32 (#527)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!atomic_ghost.AtomicBool."
               :variant "AtomicBool" :field "atomic_inv" :get_variant false)
             ) (@@ "pervasive/atomic_ghost.rs:62:17: 62:21 (#527)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!atomic_ghost.AtomicBool."
                ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))))
            ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int
                  (IntRange Int)))
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool."
                ((Typ TypParam "Pred")))))))
          ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
               Datatype "vstd!atomic.PermissionBool." ()
              ) (Typ TypParam "G"))
            ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))))
       ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))))
     ) (Typ TypParam "K"))
   ) (Typ TypParam "K")
  ) :extra_dependencies ()))

(@ "pervasive/atomic_ghost.rs:66:13: 66:93 (#527)" (Function
  :name (Fun :path "vstd!atomic_ghost.impl&%21.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!atomic_ghost." :mode Exec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "G" (GenericBound Traits ()))
   (tuple "Pred" (GenericBound Traits ("vstd!atomic_ghost.AtomicInvariantPredicate.")))
  ) :params (
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (Param :name "k~9" :typ (Typ Decorate (TypDecoration Ghost) (Typ TypParam
       "K")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Spec "verus_tmp_k~2")))
   (@ "pervasive/atomic_ghost.rs:66:44: 66:45 (#527)" (Param :name "u~4" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (Param :name "g~22" :typ (Typ Decorate (TypDecoration Tracked) (Typ TypParam
       "G")
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_g~6")))
  ) :ret (@ "pervasive/atomic_ghost.rs:66:89: 66:93 (#527)" (Param :name "t~58" :typ (Typ Datatype "vstd!atomic_ghost.AtomicBool."
     ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/atomic_ghost.rs:67:26: 67:51 (#527)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!atomic_ghost.AtomicInvariantPredicate.atomic_inv.")
      ((Typ TypParam "Pred") (Typ TypParam "K") (Typ Bool) (Typ TypParam "G")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/atomic_ghost.rs:67:43: 67:44 (#527)" (> Var "k~9") (Typ TypParam "K")) (@@ "pervasive/atomic_ghost.rs:67:46: 67:47 (#527)"
       (> Var "u~4") (Typ Bool)
      ) (@@ "pervasive/atomic_ghost.rs:67:49: 67:50 (#527)" (> Var "g~22") (Typ TypParam "G")))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/atomic_ghost.rs:68:25: 68:45 (#527)" (> Binary (BinaryOp And) (@@ "pervasive/atomic_ghost.rs:68:25: 68:40 (#527)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%21.well_formed.") ((Typ TypParam "K") (Typ
          TypParam "G"
         ) (Typ TypParam "Pred")
        ) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/atomic_ghost.rs:68:25: 68:26 (#527)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicBool." ((Typ TypParam
            "K"
           ) (Typ TypParam "G") (Typ TypParam "Pred")))))
      ) (Typ Bool)
     ) (@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#527)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/atomic_ghost.rs:68:44: 68:56 (#527)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic_ghost.impl&%21.constant.") ((Typ TypParam "K") (Typ TypParam
            "G"
           ) (Typ TypParam "Pred")
          ) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/atomic_ghost.rs:68:44: 68:45 (#527)" (> Var "t~58") (Typ Datatype "vstd!atomic_ghost.AtomicBool." ((Typ TypParam
              "K"
             ) (Typ TypParam "G") (Typ TypParam "Pred")))))
        ) (Typ TypParam "K")
       ) (@@ "pervasive/atomic_ghost.rs:68:60: 68:61 (#527)" (> Var "k~9") (Typ TypParam "K"))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/atomic_ghost.rs:69:13: 81:14 (#527)" (> Block (
     (@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#527)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:21: 71:45 (#527)" (
         Pattern Tuple ((@@ "pervasive/atomic_ghost.rs:71:22: 71:29 (#527)" (Pattern Var :name "patomic~88" :mutable false) (Typ Datatype
            "vstd!atomic.PAtomicBool." ())
          ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (Pattern Var :name "verus_tmp_perm~89" :mutable false) (Typ Decorate
            (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionBool." ()))))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicBool." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionBool."
            ()))))
       ) :mode Exec :init (@@ "pervasive/atomic_ghost.rs:71:61: 71:67 (#527)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path
           "vstd!atomic.impl&%0.new."
          ) () () (AutospecUsage Final)
         ) ((@@ "pervasive/atomic_ghost.rs:71:65: 71:66 (#527)" (> Var "u~4") (Typ Bool)))
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PAtomicBool." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!atomic.PermissionBool."
            ())))))))
     (@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#527)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#527)" (
         Pattern Var :name "perm~93" :mutable true
        ) (Typ Datatype "vstd!atomic.PermissionBool." ())
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#527)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:71:17: 71:20 (#527)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#527)" (> Assign :init_not_mut
                false :lhs (@@ "pervasive/atomic_ghost.rs:71:39: 71:43 (#527)" (> VarLoc "perm~93") (Typ Datatype "vstd!atomic.PermissionBool."
                  ())
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode
                   Proof :kind (ModeCoercion Other)
                  ) (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> Var "verus_tmp_perm~89") (Typ Decorate (TypDecoration Tracked) (Typ
                     Datatype "vstd!atomic.PermissionBool." ())))
                 ) (Typ Datatype "vstd!atomic.PermissionBool." ()))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (
         Pattern Var :name "verus_tmp~107" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#527)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#527)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> VarLoc "verus_tmp~107") (Typ Tuple
               ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G")))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:73:36: 73:45 (#527)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:73:37: 73:41 (#527)" (> Var
                  "perm~93"
                 ) (Typ Datatype "vstd!atomic.PermissionBool." ())
                ) (@@ "pervasive/atomic_ghost.rs:73:43: 73:44 (#527)" (> Var "g~22") (Typ TypParam "G")))
              ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#527)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#527)" (
         Pattern Var :name "pair~121" :mutable false
        ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G")))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#527)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:73:17: 73:20 (#527)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (
                Pattern Var :name "verus_tmp_pair~127" :mutable false
               ) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G")))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> Var "verus_tmp~107") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool."
                  ()
                 ) (Typ TypParam "G"))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#527)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:73:29: 73:33 (#527)" (> VarLoc "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool."
                    ()
                   ) (Typ TypParam "G")))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> Var "verus_tmp_pair~127") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool."
                    ()
                   ) (Typ TypParam "G"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (
         Pattern Var :name "verus_tmp~138" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionBool." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#527)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#527)" (> Block () (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)"
            (> Assign :init_not_mut true :lhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> VarLoc "verus_tmp~138") (Typ Datatype
               "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool."
                   ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))
             ) :rhs (@@ "pervasive/atomic_ghost.rs:74:42: 75:48 (#527)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!invariant.impl&%0.new.")
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))
                ) ((tuple "Pred" "vstd!atomic_ghost.impl&%20.")) (AutospecUsage IfMarked)
               ) ((@@ "pervasive/atomic_ghost.rs:75:21: 75:38 (#527)" (> Tuple ((@@ "pervasive/atomic_ghost.rs:75:22: 75:23 (#527)" (> Var "k~9")
                    (Typ TypParam "K")
                   ) (@@ "pervasive/atomic_ghost.rs:75:25: 75:37 (#527)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!atomic.impl&%0.id.")
                      () () (AutospecUsage IfMarked)
                     ) ((@@ "pervasive/atomic_ghost.rs:75:25: 75:32 (#527)" (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicBool." ())))
                    ) (Typ Int (IntRange Int))))
                 ) (Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
                ) (@@ "pervasive/atomic_ghost.rs:75:40: 75:44 (#527)" (> Var "pair~121") (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool."
                    ()
                   ) (Typ TypParam "G")))
                ) (@@ "pervasive/atomic_ghost.rs:75:46: 75:47 (#527)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))))
              ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                   Datatype "vstd!atomic.PermissionBool." ()
                  ) (Typ TypParam "G"))
                ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred"))))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#527)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#527)" (
         Pattern Var :name "atomic_inv~167" :mutable false
        ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
             Datatype "vstd!atomic.PermissionBool." ()
            ) (Typ TypParam "G"))
          ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))
       ) :mode Proof :init None))
     (@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#527)" (> Ghost :alloc_wrapper
         false :tracked false :expr (@@ "pervasive/atomic_ghost.rs:74:17: 74:20 (#527)" (> Block (
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (Stmt Decl :pattern (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (
                Pattern Var :name "verus_tmp_atomic_inv~173" :mutable false
               ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
                    Datatype "vstd!atomic.PermissionBool." ()
                   ) (Typ TypParam "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))
              ) :mode Proof :init (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> Var "verus_tmp~138") (Typ Datatype "vstd!invariant.AtomicInvariant."
                ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam
                    "G"))
                 ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred"))))))))
            (@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#527)" (Stmt Expr (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#527)" (> Assign :init_not_mut
                true :lhs (@@ "pervasive/atomic_ghost.rs:74:29: 74:39 (#527)" (> VarLoc "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))
                ) :rhs (@@ "pervasive/atomic_ghost.rs:20:9: 102:10 (#530)" (> Var "verus_tmp_atomic_inv~173") (Typ Datatype "vstd!invariant.AtomicInvariant."
                  ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam
                      "G"))
                   ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred"))))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/atomic_ghost.rs:77:27: 80:18 (#527)" (> Ctor "vstd!atomic_ghost.AtomicBool." "AtomicBool" ((-> patomic (@@ "pervasive/atomic_ghost.rs:78:21: 78:28 (#527)"
         (> Var "patomic~88") (Typ Datatype "vstd!atomic.PAtomicBool." ()))
       ) (-> atomic_inv (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#527)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/atomic_ghost.rs:79:41: 79:51 (#527)"
           (> Var "atomic_inv~167") (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int))))
             (Typ Tuple ((Typ Datatype "vstd!atomic.PermissionBool." ()) (Typ TypParam "G"))) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool."
              ((Typ TypParam "Pred"))))))
         ) (Typ Datatype "vstd!invariant.AtomicInvariant." ((Typ Tuple ((Typ TypParam "K") (Typ Int (IntRange Int)))) (Typ Tuple ((Typ
              Datatype "vstd!atomic.PermissionBool." ()
             ) (Typ TypParam "G"))
           ) (Typ Datatype "vstd!atomic_ghost.AtomicPredBool." ((Typ TypParam "Pred")))))))
      ) None
     ) (Typ Datatype "vstd!atomic_ghost.AtomicBool." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred"))))
   ) (Typ Datatype "vstd!atomic_ghost.AtomicBool." ((Typ TypParam "K") (Typ TypParam "G") (Typ TypParam "Pred")))
  ) :extra_dependencies ()))

(@ "pervasive/modes.rs:9:1: 9:67 (#0)" (Function
  :name (Fun :path "vstd!modes.tracked_swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!modes." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/modes.rs:9:30: 9:47 (#0)" (Param :name "a~2" :typ (Typ TypParam "V") :mode Proof :is_mut true :unwrapped_info
     None))
   (@ "pervasive/modes.rs:9:49: 9:66 (#0)" (Param :name "b~4" :typ (Typ TypParam "V") :mode Proof :is_mut true :unwrapped_info
     None))
  ) :ret (@ "pervasive/modes.rs:13:1: 13:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/modes.rs:11:9: 11:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/modes.rs:11:9: 11:10 (#0)" (> Loc (@@ "pervasive/modes.rs:11:9: 11:10 (#0)"
        (> VarLoc "a~2") (Typ Decorate (TypDecoration MutRef) (Typ TypParam "V")))
      ) (Typ Decorate (TypDecoration MutRef) (Typ TypParam "V"))
     ) (@@ "pervasive/modes.rs:11:14: 11:20 (#0)" (> Loc (@@ "pervasive/modes.rs:11:14: 11:20 (#0)" (> VarAt "b~4" (VarAt Pre)) (
         Typ Decorate (TypDecoration MutRef) (Typ TypParam "V")))
      ) (Typ Decorate (TypDecoration MutRef) (Typ TypParam "V")))
    ) (Typ Bool))
   (@@ "pervasive/modes.rs:12:9: 12:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/modes.rs:12:9: 12:10 (#0)" (> Loc (@@ "pervasive/modes.rs:12:9: 12:10 (#0)"
        (> VarLoc "b~4") (Typ Decorate (TypDecoration MutRef) (Typ TypParam "V")))
      ) (Typ Decorate (TypDecoration MutRef) (Typ TypParam "V"))
     ) (@@ "pervasive/modes.rs:12:14: 12:20 (#0)" (> Loc (@@ "pervasive/modes.rs:12:14: 12:20 (#0)" (> VarAt "a~2" (VarAt Pre)) (
         Typ Decorate (TypDecoration MutRef) (Typ TypParam "V")))
      ) (Typ Decorate (TypDecoration MutRef) (Typ TypParam "V")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:49:5: 49:45 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.count.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:49:23: 49:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:49:29: 49:37 (#0)" (Param :name "value~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:49:42: 49:45 (#0)" (Param :name "%return" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:52:5: 52:33 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:52:21: 52:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:52:30: 52:33 (#0)" (Param :name "%return" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:55:5: 55:32 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/multiset.rs:55:28: 55:32 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!multiset.Multiset."
     ((Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:58:5: 58:40 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.singleton.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:58:27: 58:31 (#0)" (Param :name "v~2" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:58:36: 58:40 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ
       TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:62:5: 62:44 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:62:21: 62:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:62:27: 62:35 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:62:40: 62:44 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ
       TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:72:5: 72:44 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:72:21: 72:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:72:27: 72:35 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:72:40: 72:44 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ
       TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:78:5: 78:48 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.insert.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:78:29: 78:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:78:35: 78:39 (#0)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:78:44: 78:48 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ
       TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/multiset.rs:78:49: 80:6 (#0)" (> Block () (@@ "pervasive/multiset.rs:79:9: 79:37 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.add.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/multiset.rs:79:9: 79:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
       (@@ "pervasive/multiset.rs:79:18: 79:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.singleton.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:79:34: 79:35 (#0)" (> Var "v~4") (Typ TypParam "V")))
        ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
     ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
   ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/multiset.rs:86:5: 86:48 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.remove.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:86:29: 86:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:86:35: 86:39 (#0)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:86:44: 86:48 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ
       TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/multiset.rs:86:49: 88:6 (#0)" (> Block () (@@ "pervasive/multiset.rs:87:9: 87:37 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.sub.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/multiset.rs:87:9: 87:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
       (@@ "pervasive/multiset.rs:87:18: 87:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.singleton.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:87:34: 87:35 (#0)" (> Var "v~4") (Typ TypParam "V")))
        ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
     ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
   ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/multiset.rs:94:5: 94:48 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.le.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:94:25: 94:29 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:94:31: 94:39 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:94:44: 94:48 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/multiset.rs:94:49: 96:6 (#0)" (> Block () (@@ "pervasive/multiset.rs:95:9: 95:15 (#0)" (> Quant (Forall
       :boxed_params true
      ) ((-> v~12 (Typ TypParam "V"))) (@@ "pervasive/multiset.rs:95:23: 95:27 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le))
        (@@ "pervasive/multiset.rs:95:23: 95:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/multiset.rs:95:23: 95:27 (#0)" (> Var "self~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
           (@@ "pervasive/multiset.rs:95:34: 95:35 (#0)" (> Var "v~12") (Typ TypParam "V")))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/multiset.rs:95:40: 95:51 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/multiset.rs:95:40: 95:42 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
           (@@ "pervasive/multiset.rs:95:49: 95:50 (#0)" (> Var "v~12") (Typ TypParam "V")))
         ) (Typ Int (IntRange Nat)))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/multiset.rs:109:5: 109:55 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:109:32: 109:36 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:109:38: 109:46 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:109:51: 109:55 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/multiset.rs:109:56: 111:6 (#0)" (> Block () (@@ "pervasive/multiset.rs:110:9: 110:13 (#0)" (> BinaryOpr
      (BinaryOpr ExtEq false (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))) (@@ "pervasive/multiset.rs:110:9: 110:13 (#0)"
       (> Var "self~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
      ) (@@ "pervasive/multiset.rs:110:18: 110:20 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/multiset.rs:114:5: 114:60 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.filter.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
   (tuple "impl%1" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:114:24: 114:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:114:30: 114:51 (#0)" (Param :name "f~4" :typ (Typ TypParam "impl%1") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:114:56: 114:60 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ
       TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:123:5: 123:39 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.choose.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:123:29: 123:33 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:123:38: 123:39 (#0)" (Param :name "%return" :typ (Typ TypParam "V") :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/multiset.rs:123:40: 125:6 (#0)" (> Block () (@@ "pervasive/multiset.rs:124:9: 124:15 (#0)" (> Choose :params
      (
       (-> v~10 (Typ TypParam "V"))
      ) :cond (@@ "pervasive/multiset.rs:124:22: 124:26 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/multiset.rs:124:22: 124:35 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/multiset.rs:124:22: 124:26 (#0)" (> Var "self~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
           (@@ "pervasive/multiset.rs:124:33: 124:34 (#0)" (> Var "v~10") (Typ TypParam "V")))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/multiset.rs:124:38: 124:39 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) :body (@@ "pervasive/multiset.rs:124:16: 124:20 (#0)" (> Var "v~10") (Typ TypParam "V"))
     ) (Typ TypParam "V"))
   ) (Typ TypParam "V")
  ) :extra_dependencies ()))

(@ "pervasive/multiset.rs:129:5: 129:50 (#0)" (Function
  :name (Fun :path "vstd!multiset.impl&%0.contains.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:129:31: 129:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:129:37: 129:41 (#0)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:129:46: 129:50 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/multiset.rs:129:51: 131:6 (#0)" (> Block () (@@ "pervasive/multiset.rs:130:9: 130:13 (#0)" (> Binary (
       BinaryOp Inequality (InequalityOp Gt)
      ) (@@ "pervasive/multiset.rs:130:9: 130:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
         ((Typ TypParam "V")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/multiset.rs:130:9: 130:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
         (@@ "pervasive/multiset.rs:130:20: 130:21 (#0)" (> Var "v~4") (Typ TypParam "V")))
       ) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/multiset.rs:130:25: 130:26 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/multiset.rs:138:1: 138:43 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_multiset_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:138:38: 138:42 (#0)" (Param :name "v~2" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:140:1: 140:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:139:13: 139:21 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:139:13: 139:39 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/multiset.rs:139:13: 139:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.empty.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ()
         ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
        ) (@@ "pervasive/multiset.rs:139:37: 139:38 (#0)" (> Var "v~2") (Typ TypParam "V")))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:139:43: 139:44 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:146:1: 146:47 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_multiset_singleton.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:146:42: 146:46 (#0)" (Param :name "v~2" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:148:1: 148:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:147:13: 147:48 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:147:13: 147:57 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/multiset.rs:147:13: 147:48 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:147:13: 147:48 (#0)"
           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.singleton.") ((Typ TypParam "V")) () (AutospecUsage
              IfMarked)
            ) ((@@ "pervasive/multiset.rs:147:45: 147:46 (#0)" (> Var "v~2") (Typ TypParam "V")))
           ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
         ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
        ) (@@ "pervasive/multiset.rs:147:55: 147:56 (#0)" (> Var "v~2") (Typ TypParam "V")))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:147:61: 147:62 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:152:1: 152:63 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_multiset_singleton_different.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:152:52: 152:56 (#0)" (Param :name "v~2" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/multiset.rs:152:58: 152:62 (#0)" (Param :name "w~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:154:1: 154:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:153:13: 153:14 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/multiset.rs:153:13: 153:14 (#0)"
      (> Unary (UnaryOp Not) (@@ "pervasive/multiset.rs:153:13: 153:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:153:13: 153:14 (#0)"
          (> Var "v~2") (Typ TypParam "V")
         ) (@@ "pervasive/multiset.rs:153:18: 153:19 (#0)" (> Var "w~4") (Typ TypParam "V"))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/multiset.rs:153:24: 153:32 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:153:24: 153:55 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/multiset.rs:153:24: 153:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.singleton.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/multiset.rs:153:44: 153:45 (#0)" (> Var "v~2") (Typ TypParam "V")))
           ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
          ) (@@ "pervasive/multiset.rs:153:53: 153:54 (#0)" (> Var "w~4") (Typ TypParam "V")))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/multiset.rs:153:59: 153:60 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:160:1: 160:75 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_multiset_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:160:36: 160:51 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:160:53: 160:68 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:160:70: 160:74 (#0)" (Param :name "v~6" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:162:1: 162:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:161:13: 161:15 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:161:13: 161:32 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/multiset.rs:161:13: 161:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.add.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/multiset.rs:161:13: 161:15 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
           (@@ "pervasive/multiset.rs:161:20: 161:22 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
        ) (@@ "pervasive/multiset.rs:161:30: 161:31 (#0)" (> Var "v~6") (Typ TypParam "V")))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:161:36: 161:38 (#0)" (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate true) (@@ "pervasive/multiset.rs:161:36: 161:38 (#0)"
        (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/multiset.rs:161:36: 161:47 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:161:36: 161:38 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
            (@@ "pervasive/multiset.rs:161:45: 161:46 (#0)" (> Var "v~6") (Typ TypParam "V")))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/multiset.rs:161:50: 161:61 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:161:50: 161:52 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
            (@@ "pervasive/multiset.rs:161:59: 161:60 (#0)" (> Var "v~6") (Typ TypParam "V")))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:168:1: 168:75 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_multiset_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:168:36: 168:51 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:168:53: 168:68 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:168:70: 168:74 (#0)" (Param :name "v~6" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:171:1: 171:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:169:13: 169:15 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:169:13: 169:32 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/multiset.rs:169:13: 169:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.sub.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/multiset.rs:169:13: 169:15 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
           (@@ "pervasive/multiset.rs:169:20: 169:22 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
        ) (@@ "pervasive/multiset.rs:169:30: 169:31 (#0)" (> Var "v~6") (Typ TypParam "V")))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:170:9: 170:79 (#0)" (> If (@@ "pervasive/multiset.rs:170:12: 170:14 (#0)" (> Binary (BinaryOp Inequality
          (InequalityOp Ge)
         ) (@@ "pervasive/multiset.rs:170:12: 170:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:170:12: 170:14 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
            (@@ "pervasive/multiset.rs:170:21: 170:22 (#0)" (> Var "v~6") (Typ TypParam "V")))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/multiset.rs:170:27: 170:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:170:27: 170:29 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
            (@@ "pervasive/multiset.rs:170:36: 170:37 (#0)" (> Var "v~6") (Typ TypParam "V")))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Bool)
       ) (@@ "pervasive/multiset.rs:170:39: 170:68 (#0)" (> Block () (@@ "pervasive/multiset.rs:170:41: 170:43 (#0)" (> Binary (BinaryOp
            Arith (ArithOp Sub) None
           ) (@@ "pervasive/multiset.rs:170:41: 170:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
              ((Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/multiset.rs:170:41: 170:43 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
              (@@ "pervasive/multiset.rs:170:50: 170:51 (#0)" (> Var "v~6") (Typ TypParam "V")))
            ) (Typ Int (IntRange Nat))
           ) (@@ "pervasive/multiset.rs:170:55: 170:66 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
              ((Typ TypParam "V")) () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/multiset.rs:170:55: 170:57 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
              (@@ "pervasive/multiset.rs:170:64: 170:65 (#0)" (> Var "v~6") (Typ TypParam "V")))
            ) (Typ Int (IntRange Nat)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/multiset.rs:170:74: 170:79 (#0)" (> Block () (@@ "pervasive/multiset.rs:170:76: 170:77 (#0)" (> Const (Constant
            Int 0)
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:177:1: 177:75 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_multiset_ext_equal.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:177:42: 177:57 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:177:59: 177:74 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:179:1: 179:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:178:13: 178:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:178:24: 178:35 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:178:24: 178:35 (#0)" (> BinaryOpr (BinaryOpr
          ExtEq false (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
         ) (@@ "pervasive/multiset.rs:178:25: 178:27 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
         (@@ "pervasive/multiset.rs:178:32: 178:34 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/multiset.rs:178:41: 178:83 (#0)" (> Quant (Forall :boxed_params true) ((-> v~32 (Typ TypParam "V"))) (@@ "pervasive/multiset.rs:178:56: 178:58 (#0)"
        (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:178:56: 178:67 (#0)" (> Call (CallTarget Fun (CallTargetKind Static)
            (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:178:56: 178:58 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
            (@@ "pervasive/multiset.rs:178:65: 178:66 (#0)" (> Var "v~32") (Typ TypParam "V")))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/multiset.rs:178:71: 178:82 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:178:71: 178:73 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
            (@@ "pervasive/multiset.rs:178:80: 178:81 (#0)" (> Var "v~32") (Typ TypParam "V")))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:183:1: 183:80 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_multiset_ext_equal_deep.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:183:47: 183:62 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:183:64: 183:79 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:185:1: 185:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:184:13: 184:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:184:24: 184:36 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:184:24: 184:36 (#0)" (> BinaryOpr (BinaryOpr
          ExtEq true (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
         ) (@@ "pervasive/multiset.rs:184:25: 184:27 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
         (@@ "pervasive/multiset.rs:184:33: 184:35 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/multiset.rs:184:42: 184:44 (#0)" (> BinaryOpr (BinaryOpr ExtEq false (Typ Datatype "vstd!multiset.Multiset."
         ((Typ TypParam "V")))
       ) (@@ "pervasive/multiset.rs:184:42: 184:44 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
       (@@ "pervasive/multiset.rs:184:49: 184:51 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:191:1: 191:34 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_len_empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/multiset.rs:193:1: 193:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:192:13: 192:54 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:192:13: 192:54 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:192:13: 192:54 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:192:25: 192:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.empty.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ()
           ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:192:58: 192:59 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:197:1: 197:42 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_len_singleton.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:197:37: 197:41 (#0)" (Param :name "v~2" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:199:1: 199:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:198:13: 198:59 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:198:13: 198:59 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:198:13: 198:59 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:198:25: 198:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.singleton.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/multiset.rs:198:50: 198:51 (#0)" (> Var "v~2") (Typ TypParam "V")))
           ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:198:63: 198:64 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:203:1: 203:64 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_len_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:203:31: 203:46 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:203:48: 203:63 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:205:1: 205:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:204:13: 204:42 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:204:13: 204:42 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:204:13: 204:42 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:204:25: 204:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.add.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/multiset.rs:204:25: 204:27 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
             (@@ "pervasive/multiset.rs:204:32: 204:34 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
           ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:204:46: 204:48 (#0)" (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate true) (@@ "pervasive/multiset.rs:204:46: 204:48 (#0)"
        (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "pervasive/multiset.rs:204:46: 204:54 (#0)" (> Call (CallTarget Fun (CallTargetKind
             Static
            ) (Fun :path "vstd!multiset.impl&%0.len.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:204:46: 204:48 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
          ) (Typ Int (IntRange Nat))
         ) (@@ "pervasive/multiset.rs:204:57: 204:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:204:57: 204:59 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:210:1: 210:64 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_len_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:210:31: 210:46 (#0)" (Param :name "m1~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:210:48: 210:63 (#0)" (Param :name "m2~4" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:213:1: 213:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/multiset.rs:211:14: 211:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.le.")
      ((Typ TypParam "V")) () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/multiset.rs:211:14: 211:16 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
      (@@ "pervasive/multiset.rs:211:20: 211:22 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/multiset.rs:212:13: 212:42 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:212:13: 212:42 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:212:13: 212:42 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:212:25: 212:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.sub.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/multiset.rs:212:25: 212:27 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
             (@@ "pervasive/multiset.rs:212:32: 212:34 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
           ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:212:46: 212:48 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/multiset.rs:212:46: 212:54 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.") ((Typ TypParam "V")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/multiset.rs:212:46: 212:48 (#0)" (> Var "m1~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/multiset.rs:212:57: 212:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:212:57: 212:59 (#0)" (> Var "m2~4") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:217:1: 217:57 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_count_le_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:217:36: 217:50 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:217:52: 217:56 (#0)" (Param :name "v~4" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:219:1: 219:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:218:13: 218:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/multiset.rs:218:24: 218:34 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:218:24: 218:34 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:218:24: 218:25 (#0)" (> Var "m~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
          (@@ "pervasive/multiset.rs:218:32: 218:33 (#0)" (> Var "v~4") (Typ TypParam "V")))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:218:49: 218:56 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:218:49: 218:56 (#0)"
        (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.") ((Typ TypParam "V")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/multiset.rs:218:49: 218:50 (#0)" (> Var "m~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:225:1: 225:79 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_filter_count.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:225:36: 225:50 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:225:52: 225:61 (#0)" (Param :name "f~4" :typ (Typ Lambda ((Typ TypParam "V")) (Typ Bool)) :mode Spec
     :is_mut false :unwrapped_info None))
   (@ "pervasive/multiset.rs:225:74: 225:78 (#0)" (Param :name "v~6" :typ (Typ TypParam "V") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/multiset.rs:228:1: 228:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/multiset.rs:226:13: 226:46 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:226:13: 226:46 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:226:13: 226:46 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:226:25: 226:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.filter.")
             ((Typ TypParam "V") (Typ Lambda ((Typ TypParam "V")) (Typ Bool))) ((tuple "impl%1" "builtin!impl&%49.")) (AutospecUsage IfMarked)
            ) ((@@ "pervasive/multiset.rs:226:25: 226:26 (#0)" (> Var "m~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
             (@@ "pervasive/multiset.rs:226:34: 226:35 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "V")) (Typ Bool))))
           ) (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))
          ) (@@ "pervasive/multiset.rs:226:43: 226:44 (#0)" (> Var "v~6") (Typ TypParam "V")))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:227:9: 227:42 (#0)" (> If (@@ "pervasive/multiset.rs:227:12: 227:16 (#0)" (> Call (CallTarget FnSpec
          (@@ "pervasive/multiset.rs:227:12: 227:13 (#0)" (> Var "f~4") (Typ Lambda ((Typ TypParam "V")) (Typ Bool)))
         ) ((@@ "pervasive/multiset.rs:227:14: 227:15 (#0)" (> Var "v~6") (Typ TypParam "V")))
        ) (Typ Bool)
       ) (@@ "pervasive/multiset.rs:227:17: 227:31 (#0)" (> Block () (@@ "pervasive/multiset.rs:227:19: 227:29 (#0)" (> Call (CallTarget
            Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:227:19: 227:20 (#0)" (> Var "m~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
            (@@ "pervasive/multiset.rs:227:27: 227:28 (#0)" (> Var "v~6") (Typ TypParam "V")))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/multiset.rs:227:37: 227:42 (#0)" (> Block () (@@ "pervasive/multiset.rs:227:39: 227:40 (#0)" (> Const (Constant
            Int 0)
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/multiset.rs:234:1: 234:51 (#0)" (Function
  :name (Fun :path "vstd!multiset.axiom_choose_count.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!multiset." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/multiset.rs:234:36: 234:50 (#0)" (Param :name "m~2" :typ (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam
        "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/multiset.rs:239:1: 239:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/multiset.rs:236:9: 236:10 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/multiset.rs:236:9: 236:10 (#0)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/multiset.rs:236:20: 236:27 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None))
         (@@ "pervasive/multiset.rs:236:20: 236:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.len.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/multiset.rs:236:20: 236:21 (#0)" (> Var "m~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
          ) (Typ Int (IntRange Nat)))
        ) (Typ Int (IntRange Nat))
       ) (@@ "pervasive/multiset.rs:236:31: 236:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/multiset.rs:238:9: 238:10 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/multiset.rs:238:20: 238:39 (#0)"
      (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/multiset.rs:238:20: 238:39 (#0)" (> Call (CallTarget
          Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.count.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/multiset.rs:238:20: 238:21 (#0)" (> Var "m~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V"))))
          (@@ "pervasive/multiset.rs:238:28: 238:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!multiset.impl&%0.choose.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/multiset.rs:238:28: 238:29 (#0)" (> Var "m~2") (Typ Datatype "vstd!multiset.Multiset." ((Typ TypParam "V")))))
           ) (Typ TypParam "V")))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/multiset.rs:238:42: 238:43 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/function.rs:20:3: 20:69 (#0)" (Function
  :name (Fun :path "vstd!function.fun_ext.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!function." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/function.rs:20:30: 20:40 (#0)" (Param :name "f1~2" :typ (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B"))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/function.rs:20:50: 20:60 (#0)" (Param :name "f2~4" :typ (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B"))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/function.rs:23:3: 23:3 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/function.rs:21:14: 21:20 (#0)" (> Quant (Forall :boxed_params true) ((-> x~18 (Typ TypParam "A"))) (@@ "pervasive/function.rs:21:14: 21:20 (#0)"
      (> WithTriggers :triggers (((@@ "pervasive/function.rs:21:39: 21:44 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:21:39: 21:41 (#0)"
             (> Var "f1~2") (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:21:42: 21:43 (#0)" (> Var "x~18") (Typ TypParam "A")))
          ) (Typ TypParam "B")))
       ) :body (@@ "pervasive/function.rs:21:46: 21:48 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:21:46: 21:51 (#0)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:21:46: 21:48 (#0)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A")) (Typ
               TypParam "B")))
           ) ((@@ "pervasive/function.rs:21:49: 21:50 (#0)" (> Var "x~18") (Typ TypParam "A")))
          ) (Typ TypParam "B")
         ) (@@ "pervasive/function.rs:21:55: 21:60 (#0)" (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:21:55: 21:57 (#0)" (> Var
              "f2~4"
             ) (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:21:58: 21:59 (#0)" (> Var "x~18") (Typ TypParam "A")))
          ) (Typ TypParam "B"))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/function.rs:22:13: 22:15 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:22:13: 22:15 (#0)" (> Var
       "f1~2"
      ) (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B"))
     ) (@@ "pervasive/function.rs:22:19: 22:21 (#0)" (> Var "f2~4") (Typ Lambda ((Typ TypParam "A")) (Typ TypParam "B")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/function.rs:37:7: 37:97 (#554)" (Function
  :name (Fun :path "vstd!function.fun_ext_1.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!function." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A1" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/function.rs:37:42: 37:52 (#554)" (Param :name "f1~2" :typ (Typ Lambda ((Typ TypParam "A1")) (Typ TypParam "B"))
     :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/function.rs:37:70: 37:80 (#554)" (Param :name "f2~4" :typ (Typ Lambda ((Typ TypParam "A1")) (Typ TypParam "B"))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/function.rs:40:7: 40:7 (#554)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/function.rs:38:18: 38:24 (#554)" (> Quant (Forall :boxed_params true) ((-> x1~18 (Typ TypParam "A1"))) (@@ "pervasive/function.rs:38:18: 38:24 (#554)"
      (> WithTriggers :triggers (((@@ "pervasive/function.rs:38:50: 38:61 (#554)" (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:50: 38:52 (#554)"
             (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1")) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:47:32: 47:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")))
          ) (Typ TypParam "B")))
       ) :body (@@ "pervasive/function.rs:38:63: 38:65 (#554)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:38:63: 38:74 (#554)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:63: 38:65 (#554)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1")) (
               Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:47:32: 47:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")))
          ) (Typ TypParam "B")
         ) (@@ "pervasive/function.rs:38:78: 38:89 (#554)" (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:78: 38:80 (#554)"
             (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1")) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:47:32: 47:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")))
          ) (Typ TypParam "B"))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/function.rs:39:17: 39:19 (#554)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:39:17: 39:19 (#554)"
      (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1")) (Typ TypParam "B"))
     ) (@@ "pervasive/function.rs:39:23: 39:25 (#554)" (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1")) (Typ TypParam "B")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/function.rs:37:7: 37:97 (#559)" (Function
  :name (Fun :path "vstd!function.fun_ext_2.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!function." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A1" (GenericBound Traits ()))
   (tuple "A2" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/function.rs:37:42: 37:52 (#559)" (Param :name "f1~2" :typ (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2"))
      (Typ TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/function.rs:37:70: 37:80 (#559)" (Param :name "f2~4" :typ (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2"))
      (Typ TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/function.rs:40:7: 40:7 (#559)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/function.rs:38:18: 38:24 (#559)" (> Quant (Forall :boxed_params true) ((-> x1~18 (Typ TypParam "A1")) (-> x2~20
       (Typ TypParam "A2"))
     ) (@@ "pervasive/function.rs:38:18: 38:24 (#559)" (> WithTriggers :triggers (((@@ "pervasive/function.rs:38:50: 38:61 (#559)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:50: 38:52 (#559)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ
                TypParam "A2")
              ) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:48:32: 48:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:48:40: 48:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")))
          ) (Typ TypParam "B")))
       ) :body (@@ "pervasive/function.rs:38:63: 38:65 (#559)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:38:63: 38:74 (#559)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:63: 38:65 (#559)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ
                TypParam "A2")
              ) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:48:32: 48:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:48:40: 48:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")))
          ) (Typ TypParam "B")
         ) (@@ "pervasive/function.rs:38:78: 38:89 (#559)" (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:78: 38:80 (#559)"
             (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2")) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:48:32: 48:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:48:40: 48:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")))
          ) (Typ TypParam "B"))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/function.rs:39:17: 39:19 (#559)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:39:17: 39:19 (#559)"
      (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2")) (Typ TypParam "B"))
     ) (@@ "pervasive/function.rs:39:23: 39:25 (#559)" (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2")) (Typ
        TypParam "B")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/function.rs:37:7: 37:97 (#564)" (Function
  :name (Fun :path "vstd!function.fun_ext_3.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!function." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A1" (GenericBound Traits ()))
   (tuple "A2" (GenericBound Traits ()))
   (tuple "A3" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/function.rs:37:42: 37:52 (#564)" (Param :name "f1~2" :typ (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2")
       (Typ TypParam "A3")
      ) (Typ TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/function.rs:37:70: 37:80 (#564)" (Param :name "f2~4" :typ (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2")
       (Typ TypParam "A3")
      ) (Typ TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/function.rs:40:7: 40:7 (#564)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/function.rs:38:18: 38:24 (#564)" (> Quant (Forall :boxed_params true) ((-> x1~18 (Typ TypParam "A1")) (-> x2~20
       (Typ TypParam "A2")
      ) (-> x3~22 (Typ TypParam "A3"))
     ) (@@ "pervasive/function.rs:38:18: 38:24 (#564)" (> WithTriggers :triggers (((@@ "pervasive/function.rs:38:50: 38:61 (#564)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:50: 38:52 (#564)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ
                TypParam "A2"
               ) (Typ TypParam "A3")
              ) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:49:32: 49:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:49:40: 49:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")
            ) (@@ "pervasive/function.rs:49:48: 49:50 (#0)" (> Var "x3~22") (Typ TypParam "A3")))
          ) (Typ TypParam "B")))
       ) :body (@@ "pervasive/function.rs:38:63: 38:65 (#564)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:38:63: 38:74 (#564)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:63: 38:65 (#564)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ
                TypParam "A2"
               ) (Typ TypParam "A3")
              ) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:49:32: 49:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:49:40: 49:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")
            ) (@@ "pervasive/function.rs:49:48: 49:50 (#0)" (> Var "x3~22") (Typ TypParam "A3")))
          ) (Typ TypParam "B")
         ) (@@ "pervasive/function.rs:38:78: 38:89 (#564)" (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:78: 38:80 (#564)"
             (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam "A3")) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:49:32: 49:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:49:40: 49:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")
            ) (@@ "pervasive/function.rs:49:48: 49:50 (#0)" (> Var "x3~22") (Typ TypParam "A3")))
          ) (Typ TypParam "B"))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/function.rs:39:17: 39:19 (#564)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:39:17: 39:19 (#564)"
      (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam "A3")) (Typ TypParam "B"))
     ) (@@ "pervasive/function.rs:39:23: 39:25 (#564)" (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam
         "A3")
       ) (Typ TypParam "B")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/function.rs:37:7: 37:97 (#569)" (Function
  :name (Fun :path "vstd!function.fun_ext_4.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!function." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A1" (GenericBound Traits ()))
   (tuple "A2" (GenericBound Traits ()))
   (tuple "A3" (GenericBound Traits ()))
   (tuple "A4" (GenericBound Traits ()))
   (tuple "B" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/function.rs:37:42: 37:52 (#569)" (Param :name "f1~2" :typ (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2")
       (Typ TypParam "A3") (Typ TypParam "A4")
      ) (Typ TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/function.rs:37:70: 37:80 (#569)" (Param :name "f2~4" :typ (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2")
       (Typ TypParam "A3") (Typ TypParam "A4")
      ) (Typ TypParam "B")
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/function.rs:40:7: 40:7 (#569)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/function.rs:38:18: 38:24 (#569)" (> Quant (Forall :boxed_params true) ((-> x1~18 (Typ TypParam "A1")) (-> x2~20
       (Typ TypParam "A2")
      ) (-> x3~22 (Typ TypParam "A3")) (-> x4~24 (Typ TypParam "A4"))
     ) (@@ "pervasive/function.rs:38:18: 38:24 (#569)" (> WithTriggers :triggers (((@@ "pervasive/function.rs:38:50: 38:61 (#569)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:50: 38:52 (#569)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ
                TypParam "A2"
               ) (Typ TypParam "A3") (Typ TypParam "A4")
              ) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:50:32: 50:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:50:40: 50:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")
            ) (@@ "pervasive/function.rs:50:48: 50:50 (#0)" (> Var "x3~22") (Typ TypParam "A3")) (@@ "pervasive/function.rs:50:56: 50:58 (#0)"
             (> Var "x4~24") (Typ TypParam "A4")))
          ) (Typ TypParam "B")))
       ) :body (@@ "pervasive/function.rs:38:63: 38:65 (#569)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:38:63: 38:74 (#569)"
          (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:63: 38:65 (#569)" (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ
                TypParam "A2"
               ) (Typ TypParam "A3") (Typ TypParam "A4")
              ) (Typ TypParam "B")))
           ) ((@@ "pervasive/function.rs:50:32: 50:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:50:40: 50:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")
            ) (@@ "pervasive/function.rs:50:48: 50:50 (#0)" (> Var "x3~22") (Typ TypParam "A3")) (@@ "pervasive/function.rs:50:56: 50:58 (#0)"
             (> Var "x4~24") (Typ TypParam "A4")))
          ) (Typ TypParam "B")
         ) (@@ "pervasive/function.rs:38:78: 38:89 (#569)" (> Call (CallTarget FnSpec (@@ "pervasive/function.rs:38:78: 38:80 (#569)"
             (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam "A3") (Typ TypParam "A4")) (Typ TypParam
               "B")))
           ) ((@@ "pervasive/function.rs:50:32: 50:34 (#0)" (> Var "x1~18") (Typ TypParam "A1")) (@@ "pervasive/function.rs:50:40: 50:42 (#0)"
             (> Var "x2~20") (Typ TypParam "A2")
            ) (@@ "pervasive/function.rs:50:48: 50:50 (#0)" (> Var "x3~22") (Typ TypParam "A3")) (@@ "pervasive/function.rs:50:56: 50:58 (#0)"
             (> Var "x4~24") (Typ TypParam "A4")))
          ) (Typ TypParam "B"))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/function.rs:39:17: 39:19 (#569)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/function.rs:39:17: 39:19 (#569)"
      (> Var "f1~2") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam "A3") (Typ TypParam "A4")) (Typ TypParam
        "B"))
     ) (@@ "pervasive/function.rs:39:23: 39:25 (#569)" (> Var "f2~4") (Typ Lambda ((Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam
         "A3"
        ) (Typ TypParam "A4")
       ) (Typ TypParam "B")))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:26:1: 26:30 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_safety.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:26:22: 26:29 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:26:31: 26:31 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:26:42: 26:43 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:26:54: 26:55 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove assertion safety condition" :autospec None :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:26:31: 26:59 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:30:1: 30:35 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_let_pattern.") :proxy None :kind (FunctionKind Static) :visibility (
   Visibility :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:30:27: 30:34 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:30:36: 30:36 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:30:47: 30:48 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:30:59: 30:60 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove safety condition that the pattern matches" :autospec None :bit_vector false :atomic
   false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:30:36: 30:64 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:36:1: 36:34 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_add_option.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:36:26: 36:33 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:36:35: 36:35 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:36:46: 36:47 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:36:58: 36:59 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: to add a value Some(_), field must be None before the update"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:36:35: 36:63 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:40:1: 40:31 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_add_set.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:40:23: 40:30 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:40:32: 40:32 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:40:43: 40:44 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:40:55: 40:56 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: to add a singleton set, the value must not be in the set before the update"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:40:32: 40:60 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:44:1: 44:32 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_add_bool.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:44:24: 44:31 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:44:33: 44:33 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:44:44: 44:45 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:44:56: 44:57 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: to add a value `true`, field must be `false` before the update"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:44:33: 44:61 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:48:1: 48:31 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_add_map.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:48:23: 48:30 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:48:32: 48:32 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:48:43: 48:44 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:48:55: 48:56 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the given key must be absent from the map before the update"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:48:32: 48:60 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:52:1: 52:42 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_add_persistent_map.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:52:34: 52:41 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:52:43: 52:43 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:52:54: 52:55 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:52:66: 52:67 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: if the key is already in the map, its existing value must agree with the provided value"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:52:43: 52:71 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:56:1: 56:45 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_add_persistent_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:56:37: 56:44 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:56:46: 56:46 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:56:57: 56:58 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:56:69: 56:70 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: if the previous value is Some(_), then this existing value must agree with the newly provided value"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:56:46: 56:74 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:60:1: 60:39 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_withdraw_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:60:31: 60:38 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:60:40: 60:40 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:60:51: 60:52 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:60:63: 60:64 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the given value to be withdrawn must be stored before the withdraw"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:60:40: 60:68 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:64:1: 64:38 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_deposit_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:64:30: 64:37 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:64:39: 64:39 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:64:50: 64:51 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:64:62: 64:63 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: to deposit a value into Some(_), the field must be None before the deposit"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:64:39: 64:67 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:68:1: 68:36 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_guard_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:68:28: 68:35 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:68:37: 68:37 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:68:48: 68:49 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:68:60: 68:61 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the value being guarded must be stored" :autospec None
   :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover
   false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:68:37: 68:65 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:72:1: 72:36 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_withdraw_map.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:72:28: 72:35 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:72:37: 72:37 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:72:48: 72:49 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:72:60: 72:61 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the value to be withdrawn must be stored at the given key before the withdraw"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:72:37: 72:65 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:76:1: 76:35 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_deposit_map.") :proxy None :kind (FunctionKind Static) :visibility (
   Visibility :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:76:27: 76:34 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:76:36: 76:36 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:76:47: 76:48 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:76:59: 76:60 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the given key must be absent from the map before the deposit"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:76:36: 76:64 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:80:1: 80:33 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_guard_map.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:80:25: 80:32 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:80:34: 80:34 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:80:45: 80:46 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:80:57: 80:58 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the value being guarded must be stored at the given key"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:80:34: 80:62 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:86:1: 86:42 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_add_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:86:34: 86:41 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:86:43: 86:43 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:86:54: 86:55 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:86:66: 86:67 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the optional values being composed cannot both be Some(_)"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:86:43: 86:71 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:90:1: 90:39 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_add_set.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:90:31: 90:38 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:90:40: 90:40 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:90:51: 90:52 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:90:63: 90:64 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the sets being composed must be disjoint" :autospec None
   :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover
   false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:90:40: 90:68 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:94:1: 94:40 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_add_bool.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:94:32: 94:39 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:94:41: 94:41 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:94:52: 94:53 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:94:64: 94:65 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the boolean values being composed cannot both be `true`"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:94:41: 94:69 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:98:1: 98:39 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_add_map.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:98:31: 98:38 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:98:40: 98:40 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut
    false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:98:51: 98:52 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:98:63: 98:64 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the key domains of the maps being composed must be disjoint"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:98:40: 98:68 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:102:1: 102:50 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_add_persistent_map.") :proxy None :kind (FunctionKind Static)
  :visibility (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds
  () :params (
   (@ "pervasive/state_machine_internal.rs:102:42: 102:49 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:102:51: 102:51 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:102:62: 102:63 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:102:74: 102:75 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the maps being composed must agree on their values for any key in both domains"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:102:51: 102:79 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:106:1: 106:53 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_add_persistent_option.") :proxy None :kind (FunctionKind Static)
  :visibility (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds
  () :params (
   (@ "pervasive/state_machine_internal.rs:106:45: 106:52 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:106:54: 106:54 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:106:65: 106:66 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:106:77: 106:78 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: if the previous value and the newly added values are both Some(_), then their values must agree"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:106:54: 106:82 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:110:1: 110:47 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_withdraw_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:110:39: 110:46 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:110:48: 110:48 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:110:59: 110:60 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:110:71: 110:72 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the optional value to be withdrawn must be stored before the withdraw"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:110:48: 110:76 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:114:1: 114:46 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_deposit_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:114:38: 114:45 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:114:47: 114:47 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:114:58: 114:59 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:114:70: 114:71 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the optional values being composed cannot both be Some(_)"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:114:47: 114:75 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:118:1: 118:44 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_guard_option.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:118:36: 118:43 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:118:45: 118:45 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:118:56: 118:57 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:118:68: 118:69 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the value being guarded must be stored" :autospec None
   :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover
   false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:118:45: 118:73 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:122:1: 122:44 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_withdraw_map.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:122:36: 122:43 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:122:45: 122:45 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:122:56: 122:57 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:122:68: 122:69 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the map being withdrawn must be a submap of the stored map"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:122:45: 122:73 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:126:1: 126:43 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_deposit_map.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:126:35: 126:42 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:126:44: 126:44 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:126:55: 126:56 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:126:67: 126:68 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the key domains of the maps being composed must be disjoint"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:126:44: 126:72 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:130:1: 130:41 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.assert_general_guard_map.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Proof :fuel 1 :typ_bounds () :params
  (
   (@ "pervasive/state_machine_internal.rs:130:33: 130:40 (#0)" (Param :name "b~2" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/state_machine_internal.rs:130:42: 130:42 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:130:53: 130:54 (#0)" (> Var "b~2") (Typ Bool))
  ) :ensure (
   (@@ "pervasive/state_machine_internal.rs:130:65: 130:66 (#0)" (> Var "b~2") (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err "unable to prove inherent safety condition: the map being guarded must be a submap of the stored map"
   :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends false :nonlinear
   false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:130:42: 130:70 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies
  ()))

(@ "pervasive/state_machine_internal.rs:149:5: 149:65 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.impl&%0.update_at_index.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/state_machine_internal.rs:149:38: 149:42 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
        "A"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:149:44: 149:50 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:149:52: 149:56 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Spec :is_mut
     false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:149:61: 149:65 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq."
     ((Typ TypParam "A"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/state_machine_internal.rs:151:13: 151:14 (#0)" (> Multi (MultiOp Chained ((InequalityOp Le) (InequalityOp Lt)))
     ((@@ "pervasive/state_machine_internal.rs:151:13: 151:14 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat))) (@@ "pervasive/state_machine_internal.rs:151:18: 151:19 (#0)"
       (> Var "i~4") (Typ Int (IntRange Int))
      ) (@@ "pervasive/state_machine_internal.rs:151:22: 151:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
         ((Typ TypParam "A")) () (AutospecUsage IfMarked)
        ) ((@@ "pervasive/state_machine_internal.rs:151:22: 151:26 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam
             "A")))))
       ) (Typ Int (IntRange Nat))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const
  false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:152:5: 155:6 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:154:9: 154:26 (#0)"
     (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
      ((@@ "pervasive/state_machine_internal.rs:154:9: 154:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
       (@@ "pervasive/state_machine_internal.rs:154:21: 154:22 (#0)" (> Var "i~4") (Typ Int (IntRange Int))) (@@ "pervasive/state_machine_internal.rs:154:24: 154:25 (#0)"
        (> Var "a~6") (Typ TypParam "A")))
     ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:163:5: 163:63 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.impl&%1.update_at_index.") :proxy None :kind (FunctionKind Static) :visibility
  (Visibility :restricted_to None) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds (
   (tuple "K" (GenericBound Traits ()))
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/state_machine_internal.rs:163:38: 163:42 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!map.Map." ((Typ TypParam
        "K"
       ) (Typ TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:163:44: 163:48 (#0)" (Param :name "k~4" :typ (Typ TypParam "K") :mode Spec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:163:50: 163:54 (#0)" (Param :name "v~6" :typ (Typ TypParam "V") :mode Spec :is_mut
     false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:163:59: 163:63 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!map.Map."
     ((Typ TypParam "K") (Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:163:64: 165:6 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:164:9: 164:26 (#0)"
     (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!map.impl&%0.insert.") ((Typ TypParam "K") (Typ TypParam "V"))
       () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/state_machine_internal.rs:164:9: 164:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!map.Map." ((Typ TypParam
           "K"
          ) (Typ TypParam "V")))
       ) (@@ "pervasive/state_machine_internal.rs:164:21: 164:22 (#0)" (> Var "k~4") (Typ TypParam "K")) (@@ "pervasive/state_machine_internal.rs:164:24: 164:25 (#0)"
        (> Var "v~6") (Typ TypParam "V")))
     ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V"))))
   ) (Typ Datatype "vstd!map.Map." ((Typ TypParam "K") (Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:142:1: 142:48 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.nat_max.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/state_machine_internal.rs:142:26: 142:32 (#0)" (Param :name "a~2" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut
     false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:142:34: 142:40 (#0)" (Param :name "b~4" :typ (Typ Int (IntRange Nat)) :mode Spec :is_mut
     false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:142:45: 142:48 (#0)" (Param :name "%return" :typ (Typ Int (IntRange Nat)) :mode
    Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:142:49: 144:2 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:143:5: 143:30 (#0)"
     (> If (@@ "pervasive/state_machine_internal.rs:143:8: 143:9 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/state_machine_internal.rs:143:8: 143:9 (#0)"
         (> Var "a~2") (Typ Int (IntRange Nat))
        ) (@@ "pervasive/state_machine_internal.rs:143:12: 143:13 (#0)" (> Var "b~4") (Typ Int (IntRange Nat)))
       ) (Typ Bool)
      ) (@@ "pervasive/state_machine_internal.rs:143:14: 143:19 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:143:16: 143:17 (#0)"
         (> Var "a~2") (Typ Int (IntRange Nat)))
       ) (Typ Int (IntRange Nat))
      ) (@@ "pervasive/state_machine_internal.rs:143:25: 143:30 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:143:27: 143:28 (#0)"
         (> Var "b~4") (Typ Int (IntRange Nat)))
       ) (Typ Int (IntRange Nat)))
     ) (Typ Int (IntRange Nat)))
   ) (Typ Int (IntRange Nat))
  ) :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:170:1: 170:54 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.opt_is_none.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/state_machine_internal.rs:170:33: 170:45 (#0)" (Param :name "a~2" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:170:50: 170:54 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:170:55: 172:2 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:171:5: 171:16 (#0)"
     (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_None.") ((Typ TypParam "V"))
         ())
       ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_None.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
        (Typ TypParam "V")
       ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
      ) ((@@ "pervasive/state_machine_internal.rs:171:5: 171:6 (#0)" (> Var "a~2") (Typ Datatype "core!option.Option." ((Typ TypParam
           "V")))))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:176:1: 176:63 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.opt_ge.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/state_machine_internal.rs:176:28: 176:40 (#0)" (Param :name "a~2" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:176:42: 176:54 (#0)" (Param :name "b~4" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:176:59: 176:63 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:176:64: 178:2 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:177:5: 177:6 (#0)"
     (> Binary (BinaryOp Implies) (@@ "pervasive/state_machine_internal.rs:177:5: 177:16 (#0)" (> Call (CallTarget Fun (CallTargetKind
          Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.") ((Typ TypParam "V")) ())
         ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
          (Typ TypParam "V")
         ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/state_machine_internal.rs:177:5: 177:6 (#0)" (> Var "b~4") (Typ Datatype "core!option.Option." ((Typ TypParam
             "V")))))
       ) (Typ Bool)
      ) (@@ "pervasive/state_machine_internal.rs:177:21: 177:22 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/state_machine_internal.rs:177:21: 177:22 (#0)"
         (> Var "a~2") (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
        ) (@@ "pervasive/state_machine_internal.rs:177:27: 177:28 (#0)" (> Var "b~4") (Typ Datatype "core!option.Option." ((Typ TypParam
            "V"))))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:182:1: 182:69 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.opt_add.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/state_machine_internal.rs:182:29: 182:41 (#0)" (Param :name "a~2" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:182:43: 182:55 (#0)" (Param :name "b~4" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:182:60: 182:69 (#0)" (Param :name "%return" :typ (Typ Datatype "core!option.Option."
     ((Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:182:70: 184:2 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:183:5: 183:36 (#0)"
     (> If (@@ "pervasive/state_machine_internal.rs:183:8: 183:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path
            "vstd!std_specs.option.impl&%0.is_Some."
           ) ((Typ TypParam "V")) ())
         ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
          (Typ TypParam "V")
         ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/state_machine_internal.rs:183:8: 183:9 (#0)" (> Var "b~4") (Typ Datatype "core!option.Option." ((Typ TypParam
             "V")))))
       ) (Typ Bool)
      ) (@@ "pervasive/state_machine_internal.rs:183:20: 183:25 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:183:22: 183:23 (#0)"
         (> Var "b~4") (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
      ) (@@ "pervasive/state_machine_internal.rs:183:31: 183:36 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:183:33: 183:34 (#0)"
         (> Var "a~2") (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
     ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
   ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:188:1: 188:66 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.opt_agree.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/state_machine_internal.rs:188:31: 188:43 (#0)" (Param :name "a~2" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:188:45: 188:57 (#0)" (Param :name "b~4" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:188:62: 188:66 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:188:67: 190:2 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:189:5: 189:6 (#0)"
     (> Binary (BinaryOp Implies) (@@ "pervasive/state_machine_internal.rs:189:5: 189:31 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/state_machine_internal.rs:189:5: 189:16 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.") ((Typ TypParam "V"))
             ())
           ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
            (Typ TypParam "V")
           ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/state_machine_internal.rs:189:5: 189:6 (#0)" (> Var "a~2") (Typ Datatype "core!option.Option." ((Typ TypParam
               "V")))))
         ) (Typ Bool)
        ) (@@ "pervasive/state_machine_internal.rs:189:20: 189:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path
              "vstd!std_specs.option.impl&%0.is_Some."
             ) ((Typ TypParam "V")) ())
           ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
            (Typ TypParam "V")
           ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/state_machine_internal.rs:189:20: 189:21 (#0)" (> Var "b~4") (Typ Datatype "core!option.Option." ((Typ TypParam
               "V")))))
         ) (Typ Bool))
       ) (Typ Bool)
      ) (@@ "pervasive/state_machine_internal.rs:189:36: 189:37 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/state_machine_internal.rs:189:36: 189:50 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.") ((Typ TypParam "V"))
             ())
           ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
            (Typ TypParam "V")
           ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/state_machine_internal.rs:189:36: 189:37 (#0)" (> Var "a~2") (Typ Datatype "core!option.Option." ((Typ TypParam
               "V")))))
         ) (Typ TypParam "V")
        ) (@@ "pervasive/state_machine_internal.rs:189:55: 189:69 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path
              "vstd!std_specs.option.impl&%0.get_Some_0."
             ) ((Typ TypParam "V")) ())
           ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
            (Typ TypParam "V")
           ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
          ) ((@@ "pervasive/state_machine_internal.rs:189:55: 189:56 (#0)" (> Var "b~4") (Typ Datatype "core!option.Option." ((Typ TypParam
               "V")))))
         ) (Typ TypParam "V"))
       ) (Typ Bool))
     ) (Typ Bool))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/state_machine_internal.rs:194:1: 194:69 (#0)" (Function
  :name (Fun :path "vstd!state_machine_internal.opt_sub.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!state_machine_internal." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/state_machine_internal.rs:194:29: 194:41 (#0)" (Param :name "a~2" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/state_machine_internal.rs:194:43: 194:55 (#0)" (Param :name "b~4" :typ (Typ Datatype "core!option.Option." ((Typ
        TypParam "V"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/state_machine_internal.rs:194:60: 194:69 (#0)" (Param :name "%return" :typ (Typ Datatype "core!option.Option."
     ((Typ TypParam "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/state_machine_internal.rs:194:70: 196:2 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:195:5: 195:47 (#0)"
     (> If (@@ "pervasive/state_machine_internal.rs:195:8: 195:19 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path
            "vstd!std_specs.option.impl&%0.is_Some."
           ) ((Typ TypParam "V")) ())
         ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
          (Typ TypParam "V")
         ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
        ) ((@@ "pervasive/state_machine_internal.rs:195:8: 195:9 (#0)" (> Var "b~4") (Typ Datatype "core!option.Option." ((Typ TypParam
             "V")))))
       ) (Typ Bool)
      ) (@@ "pervasive/state_machine_internal.rs:195:20: 195:36 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:195:22: 195:34 (#0)"
         (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
      ) (@@ "pervasive/state_machine_internal.rs:195:42: 195:47 (#0)" (> Block () (@@ "pervasive/state_machine_internal.rs:195:44: 195:45 (#0)"
         (> Var "a~2") (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
     ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
   ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
  ) :extra_dependencies ()))

(@ "pervasive/thread.rs:26:5: 26:51 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%0.predicate.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Ret" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:26:27: 26:32 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.JoinHandle."
       ((Typ TypParam "Ret")))
     ) :mode Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/thread.rs:26:34: 26:42 (#0)" (Param :name "ret~4" :typ (Typ TypParam "Ret") :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/thread.rs:26:47: 26:51 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:31:5: 31:52 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%0.join.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Exec :fuel 1 :typ_bounds (
   (tuple "Ret" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:31:17: 31:21 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!thread.JoinHandle." ((Typ TypParam "Ret")))
     :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:31:37: 31:52 (#0)" (Param :name "r_result~10" :typ (Typ Datatype "core!result.Result." ((Typ TypParam
       "Ret"
      ) (Typ Tuple ()))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/thread.rs:32:17: 35:10 (#0)" (> Match (@@ "pervasive/thread.rs:32:23: 32:31 (#0)" (> Var "r_result~10") (Typ Datatype
       "core!result.Result." ((Typ TypParam "Ret") (Typ Tuple ())))
     ) ((@ "pervasive/thread.rs:33:13: 33:47 (#0)" (Arm :pattern (@@ "pervasive/thread.rs:33:13: 33:26 (#0)" (Pattern Constructor "core!result.Result."
          "Ok" ((-> _0 (@@ "pervasive/thread.rs:33:24: 33:25 (#0)" (Pattern Var :name "r~17" :mutable false) (Typ TypParam "Ret"))))
         ) (Typ Datatype "core!result.Result." ((Typ TypParam "Ret") (Typ Tuple ())))
        ) :guard (@@ "pervasive/thread.rs:32:17: 35:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/thread.rs:33:30: 33:47 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%0.predicate.") ((Typ TypParam "Ret")) () (AutospecUsage
            IfMarked)
          ) ((@@ "pervasive/thread.rs:33:30: 33:34 (#0)" (> Var "self~2") (Typ Datatype "vstd!thread.JoinHandle." ((Typ TypParam "Ret"))))
           (@@ "pervasive/thread.rs:33:45: 33:46 (#0)" (> Var "r~17") (Typ TypParam "Ret")))
         ) (Typ Bool)))
      ) (@ "pervasive/thread.rs:34:13: 34:35 (#0)" (Arm :pattern (@@ "pervasive/thread.rs:34:13: 34:27 (#0)" (Pattern Constructor "core!result.Result."
          "Err" ((-> _0 (@@ "pervasive/thread.rs:34:25: 34:26 (#0)" (Pattern Wildcard false) (Typ Tuple ()))))
         ) (Typ Datatype "core!result.Result." ((Typ TypParam "Ret") (Typ Tuple ())))
        ) :guard (@@ "pervasive/thread.rs:32:17: 35:10 (#0)" (> Const (Constant Bool true)) (Typ Bool)) :body (@@ "pervasive/thread.rs:34:31: 34:35 (#0)"
         (> Const (Constant Bool true)) (Typ Bool)))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:149:5: 149:40 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%3.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/thread.rs:149:22: 149:27 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.IsThread."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:149:32: 149:40 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!thread.ThreadId." ()) :mode
    Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:155:5: 155:63 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%3.agrees.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/thread.rs:155:33: 155:37 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!thread.IsThread." ()) :mode Proof
     :is_mut false :unwrapped_info None))
   (@ "pervasive/thread.rs:155:39: 155:62 (#0)" (Param :name "other~4" :typ (Typ Datatype "vstd!thread.IsThread." ()) :mode Proof
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:157:5: 157:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/thread.rs:156:17: 156:21 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:156:17: 156:22 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%3.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/thread.rs:156:17: 156:21 (#0)"
         (> Var "self~2") (Typ Datatype "vstd!thread.IsThread." ())))
      ) (Typ Datatype "vstd!thread.ThreadId." ())
     ) (@@ "pervasive/thread.rs:156:26: 156:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%3.view.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/thread.rs:156:26: 156:31 (#0)" (> Var "other~4") (Typ Datatype "vstd!thread.IsThread." ())))
      ) (Typ Datatype "vstd!thread.ThreadId." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:207:5: 207:33 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%5.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:207:22: 207:27 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.ThreadShareable."
       ((Typ TypParam "V")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:207:32: 207:33 (#0)" (Param :name "%return" :typ (Typ TypParam "V") :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:208:5: 208:38 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%5.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:208:20: 208:25 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.ThreadShareable."
       ((Typ TypParam "V")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:208:30: 208:38 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!thread.ThreadId." ()) :mode
    Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:213:5: 213:84 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%5.into.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:213:31: 213:35 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!thread.ThreadShareable." ((Typ TypParam
        "V"))
     ) :mode Proof :is_mut false :unwrapped_info None))
   (@ "pervasive/thread.rs:213:37: 213:64 (#0)" (Param :name "is_thread~4" :typ (Typ Datatype "vstd!thread.IsThread." ()) :mode
     Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:213:83: 213:84 (#0)" (Param :name "res~32" :typ (Typ TypParam "V") :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/thread.rs:214:18: 214:22 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:214:18: 214:27 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%5.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/thread.rs:214:18: 214:22 (#0)" (> Var "self~2") (Typ Datatype "vstd!thread.ThreadShareable." ((Typ TypParam "V")))))
      ) (Typ Datatype "vstd!thread.ThreadId." ())
     ) (@@ "pervasive/thread.rs:214:31: 214:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%3.view.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/thread.rs:214:31: 214:40 (#0)" (> Var "is_thread~4") (Typ Datatype "vstd!thread.IsThread." ())))
      ) (Typ Datatype "vstd!thread.ThreadId." ()))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/thread.rs:215:17: 215:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:215:17: 215:20 (#0)" (> Var
       "res~32"
      ) (Typ TypParam "V")
     ) (@@ "pervasive/thread.rs:215:24: 215:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%5.view.")
        ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/thread.rs:215:24: 215:28 (#0)" (> Var "self~2") (Typ Datatype "vstd!thread.ThreadShareable." ((Typ TypParam
            "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:221:5: 221:88 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%5.borrow.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:221:33: 221:38 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.ThreadShareable."
       ((Typ TypParam "V")))
     ) :mode Proof :is_mut false :unwrapped_info None))
   (@ "pervasive/thread.rs:221:40: 221:67 (#0)" (Param :name "is_thread~4" :typ (Typ Datatype "vstd!thread.IsThread." ()) :mode
     Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:221:86: 221:88 (#0)" (Param :name "res~32" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
      "V")
    ) :mode Proof :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/thread.rs:222:18: 222:22 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:222:18: 222:27 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%5.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/thread.rs:222:18: 222:22 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.ThreadShareable."
           ((Typ TypParam "V"))))))
      ) (Typ Datatype "vstd!thread.ThreadId." ())
     ) (@@ "pervasive/thread.rs:222:31: 222:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%3.view.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/thread.rs:222:31: 222:40 (#0)" (> Var "is_thread~4") (Typ Datatype "vstd!thread.IsThread." ())))
      ) (Typ Datatype "vstd!thread.ThreadId." ()))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/thread.rs:223:17: 223:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:223:18: 223:21 (#0)" (> Var
       "res~32"
      ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
     ) (@@ "pervasive/thread.rs:223:25: 223:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%5.view.")
        ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/thread.rs:223:25: 223:29 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.ThreadShareable."
           ((Typ TypParam "V"))))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:233:5: 233:60 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%6.send_into.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:233:36: 233:40 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!thread.ThreadShareable." ((Typ TypParam
        "V"))
     ) :mode Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:233:59: 233:60 (#0)" (Param :name "res~10" :typ (Typ TypParam "V") :mode Proof :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/thread.rs:234:17: 234:20 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:234:17: 234:20 (#0)" (> Var
       "res~10"
      ) (Typ TypParam "V")
     ) (@@ "pervasive/thread.rs:234:24: 234:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%5.view.")
        ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/thread.rs:234:24: 234:28 (#0)" (> Var "self~2") (Typ Datatype "vstd!thread.ThreadShareable." ((Typ TypParam
            "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:244:5: 244:64 (#0)" (Function
  :name (Fun :path "vstd!thread.impl&%7.sync_borrow.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:244:38: 244:43 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.ThreadShareable."
       ((Typ TypParam "V")))
     ) :mode Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/thread.rs:244:62: 244:64 (#0)" (Param :name "res~10" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam
      "V")
    ) :mode Proof :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/thread.rs:245:17: 245:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:245:18: 245:21 (#0)" (> Var
       "res~10"
      ) (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
     ) (@@ "pervasive/thread.rs:245:25: 245:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%5.view.")
        ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/thread.rs:245:25: 245:29 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!thread.ThreadShareable."
           ((Typ TypParam "V"))))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:106:1: 109:31 (#0)" (Function
  :name (Fun :path "vstd!thread.spawn.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!thread." :mode Exec :fuel 1 :typ_bounds (
   (tuple "F" (GenericBound Traits ()))
   (tuple "Ret" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/thread.rs:106:22: 106:26 (#0)" (Param :name "f~2" :typ (Typ TypParam "F") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/thread.rs:106:40: 106:55 (#0)" (Param :name "handle~22" :typ (Typ Datatype "vstd!thread.JoinHandle." ((Typ
       TypParam "Ret"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/thread.rs:110:14: 110:28 (#0)" (> Call (CallTarget BuiltinSpecFun (BuiltinSpecFun ClosureReq) ((Typ TypParam "F")
       (Typ Tuple ()))
     ) ((@@ "pervasive/thread.rs:110:14: 110:15 (#0)" (> Var "f~2") (Typ TypParam "F")) (@@ "pervasive/thread.rs:110:25: 110:27 (#0)"
       (> Tuple ()) (Typ Tuple ())))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/thread.rs:111:13: 111:19 (#0)" (> Quant (Forall :boxed_params true) ((-> ret~31 (Typ TypParam "Ret"))) (@@ "pervasive/thread.rs:111:31: 111:32 (#0)"
      (> Binary (BinaryOp Implies) (@@ "pervasive/thread.rs:111:42: 111:63 (#0)" (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger
           None)
         ) (@@ "pervasive/thread.rs:111:42: 111:63 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%0.predicate.")
            ((Typ TypParam "Ret")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/thread.rs:111:42: 111:48 (#0)" (> Var "handle~22") (Typ Datatype "vstd!thread.JoinHandle." ((Typ TypParam "Ret"))))
            (@@ "pervasive/thread.rs:111:59: 111:62 (#0)" (> Var "ret~31") (Typ TypParam "Ret")))
          ) (Typ Bool))
        ) (Typ Bool)
       ) (@@ "pervasive/thread.rs:111:68: 111:86 (#0)" (> Call (CallTarget BuiltinSpecFun (BuiltinSpecFun ClosureEns) ((Typ TypParam
            "F"
           ) (Typ Tuple ()))
         ) ((@@ "pervasive/thread.rs:111:68: 111:69 (#0)" (> Var "f~2") (Typ TypParam "F")) (@@ "pervasive/thread.rs:111:78: 111:80 (#0)"
           (> Tuple ()) (Typ Tuple ())
          ) (@@ "pervasive/thread.rs:111:82: 111:85 (#0)" (> Var "ret~31") (Typ TypParam "Ret")))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:174:1: 174:58 (#0)" (Function
  :name (Fun :path "vstd!thread.thread_id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Exec :fuel 1 :typ_bounds () :params () :ret (@ "pervasive/thread.rs:174:29: 174:58 (#0)"
   (Param :name "res~8" :typ (Typ Tuple ((Typ Datatype "vstd!thread.ThreadId." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
        "vstd!thread.IsThread." ())))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/thread.rs:175:13: 175:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/thread.rs:175:13: 175:20 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!thread.impl&%3.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/thread.rs:175:13: 175:19 (#0)"
         (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind (ModeCoercion Other)) (@@ "pervasive/thread.rs:175:13: 175:18 (#0)"
           (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/thread.rs:175:13: 175:16 (#0)" (> Var "res~8") (Typ
              Tuple ((Typ Datatype "vstd!thread.ThreadId." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!thread.IsThread."
                 ())))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!thread.IsThread." ())))
         ) (Typ Datatype "vstd!thread.IsThread." ())))
      ) (Typ Datatype "vstd!thread.ThreadId." ())
     ) (@@ "pervasive/thread.rs:175:24: 175:29 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/thread.rs:175:24: 175:27 (#0)"
        (> Var "res~8") (Typ Tuple ((Typ Datatype "vstd!thread.ThreadId." ()) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!thread.IsThread."
            ())))))
      ) (Typ Datatype "vstd!thread.ThreadId." ()))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/thread.rs:185:1: 185:57 (#0)" (Function
  :name (Fun :path "vstd!thread.ghost_thread_id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!thread." :mode Proof :fuel 1 :typ_bounds () :params () :ret (@ "pervasive/thread.rs:185:49: 185:57 (#0)"
   (Param :name "%return" :typ (Typ Datatype "vstd!thread.IsThread." ()) :mode Proof :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:169:5: 169:46 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%0.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:169:22: 169:26 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/ptr.rs:169:31: 169:46 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam
       "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:177:5: 177:43 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%0.is_nonnull.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:177:37: 177:42 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PointsTo."
       ((Typ TypParam "V")))
     ) :mode Proof :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/ptr.rs:179:5: 179:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/ptr.rs:178:17: 178:21 (#0)" (> Unary (UnaryOp Not) (@@ "pervasive/ptr.rs:178:17: 178:21 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/ptr.rs:178:17: 178:27 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
           "PointsToData" :field "pptr" :get_variant false)
         ) (@@ "pervasive/ptr.rs:178:17: 178:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/ptr.rs:178:17: 178:21 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PointsTo."
               ((Typ TypParam "V"))))))
          ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/ptr.rs:178:31: 178:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:184:5: 184:50 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%0.leak_contents.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Proof :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:184:40: 184:49 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
     :mode Proof :is_mut true :unwrapped_info None))
  ) :ret (@ "pervasive/ptr.rs:186:5: 186:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/ptr.rs:185:17: 185:71 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/ptr.rs:185:17: 185:21 (#0)" (> Binary (BinaryOp
        Eq Spec
       ) (@@ "pervasive/ptr.rs:185:17: 185:27 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
           "PointsToData" :field "pptr" :get_variant false)
         ) (@@ "pervasive/ptr.rs:185:17: 185:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/ptr.rs:185:17: 185:21 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
               ((Typ TypParam "V"))))))
          ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
        ) (Typ Int (IntRange Int))
       ) (@@ "pervasive/ptr.rs:185:31: 185:46 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
           "PointsToData" :field "pptr" :get_variant false)
         ) (@@ "pervasive/ptr.rs:185:31: 185:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
            ((Typ TypParam "V")) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/ptr.rs:185:31: 185:40 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
               "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
          ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool)
     ) (@@ "pervasive/ptr.rs:185:50: 185:71 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_None.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_None.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:185:50: 185:61 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/ptr.rs:185:50: 185:55 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/ptr.rs:185:50: 185:54 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
                ((Typ TypParam "V"))))))
           ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:197:5: 197:40 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.to_usize.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:197:21: 197:26 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/ptr.rs:197:35: 197:40 (#0)" (Param :name "u~10" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/ptr.rs:199:13: 199:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:199:13: 199:14 (#0)" (> Var "u~10")
      (Typ Int (IntRange USize))
     ) (@@ "pervasive/ptr.rs:199:25: 199:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.")
        ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:199:25: 199:29 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
           ((Typ TypParam "V"))))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:206:5: 206:33 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.id.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!ptr." :mode Spec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:206:20: 206:25 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/ptr.rs:206:30: 206:33 (#0)" (Param :name "%return" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:222:5: 222:44 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.from_usize.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:222:23: 222:31 (#0)" (Param :name "u~2" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/ptr.rs:222:40: 222:44 (#0)" (Param :name "p~10" :typ (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))
    :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/ptr.rs:223:17: 223:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:223:17: 223:23 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:223:17: 223:18 (#0)" (> Var "p~10") (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:223:27: 223:28 (#0)" (> Var "u~2") (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:233:5: 233:59 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/ptr.rs:233:28: 233:59 (#0)" (Param :name "pt~8" :typ (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V"))
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/ptr.rs:234:17: 234:19 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:234:17: 234:23 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:234:17: 234:22 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/ptr.rs:234:17: 234:21 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/ptr.rs:234:17: 234:19 (#0)"
             (> Var "pt~8") (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!ptr.PointsTo." ((Typ TypParam "V")))))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
      ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V")))
     ) (@@ "pervasive/ptr.rs:234:28: 234:82 (#0)" (> Ctor "vstd!ptr.PointsToData." "PointsToData" ((-> pptr (@@ "pervasive/ptr.rs:234:49: 234:58 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/ptr.rs:234:49: 234:53 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/ptr.rs:234:49: 234:51 (#0)"
               (> Var "pt~8") (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!ptr.PointsTo." ((Typ TypParam "V")))))))
             ) (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/ptr.rs:234:67: 234:79 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
           ((Typ TypParam "V")))))
       ) None
      ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:252:5: 252:40 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.clone.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:252:18: 252:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/ptr.rs:252:33: 252:40 (#0)" (Param :name "pt~10" :typ (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))
    :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/ptr.rs:253:17: 253:19 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:253:17: 253:24 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:253:17: 253:19 (#0)" (> Var "pt~10") (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:253:29: 253:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.")
        ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:253:29: 253:33 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
           ((Typ TypParam "V"))))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:267:5: 267:70 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.put.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:267:16: 267:21 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Param :name "perm~9" :typ (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/ptr.rs:267:65: 267:69 (#0)" (Param :name "v~6" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/ptr.rs:275:5: 275:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/ptr.rs:269:13: 269:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:269:13: 269:22 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:269:13: 269:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
           ((Typ TypParam "V"))))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:269:27: 269:42 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:269:27: 269:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:269:27: 269:36 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:270:13: 270:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:270:13: 270:29 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/ptr.rs:270:13: 270:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:270:13: 270:22 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/ptr.rs:270:34: 270:46 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
       ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/ptr.rs:272:13: 272:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:272:13: 272:23 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "pptr" :get_variant false)) (
        @@ "pervasive/ptr.rs:272:13: 272:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:272:13: 272:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:272:28: 272:43 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:272:28: 272:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:272:28: 272:37 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:273:13: 273:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:273:13: 273:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/ptr.rs:273:13: 273:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:273:13: 273:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/ptr.rs:273:29: 273:44 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/ptr.rs:273:42: 273:43 (#0)"
          (> Var "v~6") (Typ TypParam "V")))
       ) None
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:291:5: 291:74 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.take.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:291:17: 291:22 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Param :name "perm~7" :typ (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/ptr.rs:291:73: 291:74 (#0)" (Param :name "v~59" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/ptr.rs:293:13: 293:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:293:13: 293:22 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:293:13: 293:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
           ((Typ TypParam "V"))))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:293:27: 293:42 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:293:27: 293:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:293:27: 293:36 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:294:13: 294:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/ptr.rs:294:13: 294:29 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/ptr.rs:294:13: 294:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/ptr.rs:294:13: 294:22 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
         ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/ptr.rs:296:13: 296:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:296:13: 296:23 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "pptr" :get_variant false)) (
        @@ "pervasive/ptr.rs:296:13: 296:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:296:13: 296:17 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:296:28: 296:43 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:296:28: 296:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:296:28: 296:37 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:297:13: 297:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:297:13: 297:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/ptr.rs:297:13: 297:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:297:13: 297:17 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/ptr.rs:297:29: 297:41 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
       ((Typ TypParam "V"))))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:298:13: 298:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:298:13: 298:14 (#0)" (> Var "v~59")
      (Typ TypParam "V")
     ) (@@ "pervasive/ptr.rs:298:19: 298:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:298:19: 298:35 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/ptr.rs:298:19: 298:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/ptr.rs:298:19: 298:28 (#0)" (> VarAt "perm~7" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
           ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:313:5: 313:90 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.replace.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:313:20: 313:25 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Param :name "perm~9" :typ (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
     :mode Exec :is_mut true :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
   (@ "pervasive/ptr.rs:313:69: 313:76 (#0)" (Param :name "in_v~6" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/ptr.rs:313:89: 313:90 (#0)" (Param :name "out_v~61" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/ptr.rs:315:13: 315:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:315:13: 315:22 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:315:13: 315:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
           ((Typ TypParam "V"))))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:315:27: 315:42 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:315:27: 315:37 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:315:27: 315:36 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:316:13: 316:39 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/ptr.rs:316:13: 316:29 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/ptr.rs:316:13: 316:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/ptr.rs:316:13: 316:22 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
         ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/ptr.rs:318:13: 318:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:318:13: 318:23 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "pptr" :get_variant false)) (
        @@ "pervasive/ptr.rs:318:13: 318:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:318:13: 318:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:318:28: 318:43 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:318:28: 318:38 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:318:28: 318:37 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:319:13: 319:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:319:13: 319:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/ptr.rs:319:13: 319:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:319:13: 319:17 (#0)" (> Var "perm~9") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!ptr.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/ptr.rs:319:29: 319:47 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/ptr.rs:319:42: 319:46 (#0)"
          (> Var "in_v~6") (Typ TypParam "V")))
       ) None
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V"))))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:320:13: 320:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:320:13: 320:18 (#0)" (> Var "out_v~61")
      (Typ TypParam "V")
     ) (@@ "pervasive/ptr.rs:320:23: 320:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:320:23: 320:39 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/ptr.rs:320:23: 320:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/ptr.rs:320:23: 320:32 (#0)" (> VarAt "perm~9" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
           ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:337:5: 337:83 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.borrow.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:337:23: 337:28 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Decorate (TypDecoration
        Ref
       ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/ptr.rs:337:78: 337:83 (#0)" (Param :name "v~53" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
    :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/ptr.rs:339:13: 339:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:339:13: 339:22 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:339:13: 339:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
           ((Typ TypParam "V"))))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:339:27: 339:37 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:339:27: 339:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:339:27: 339:31 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PointsTo."
             ((Typ TypParam "V"))))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:340:13: 340:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/ptr.rs:340:13: 340:24 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/ptr.rs:340:13: 340:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/ptr.rs:340:13: 340:17 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PointsTo."
              ((Typ TypParam "V"))))))
         ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/ptr.rs:341:17: 341:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:341:18: 341:19 (#0)" (> Var "v~53")
      (Typ Decorate (TypDecoration Ref) (Typ TypParam "V"))
     ) (@@ "pervasive/ptr.rs:341:24: 341:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:341:24: 341:35 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/ptr.rs:341:24: 341:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/ptr.rs:341:24: 341:28 (#0)" (> Var "perm~7") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PointsTo."
                ((Typ TypParam "V"))))))
           ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:357:5: 357:63 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.dispose.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:357:20: 357:25 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/ptr.rs:362:5: 362:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/ptr.rs:359:13: 359:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:359:13: 359:22 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:359:13: 359:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!ptr.PPtr."
           ((Typ TypParam "V"))))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:359:27: 359:37 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:359:27: 359:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:359:27: 359:31 (#0)" (> Var "perm~7") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:360:13: 360:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:360:13: 360:24 (#0)" (> UnaryOpr
       (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant "PointsToData" :field "value" :get_variant false))
       (@@ "pervasive/ptr.rs:360:13: 360:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:360:13: 360:17 (#0)" (> Var "perm~7") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))
     ) (@@ "pervasive/ptr.rs:360:29: 360:41 (#0)" (> Ctor "core!option.Option." "None" () None) (Typ Datatype "core!option.Option."
       ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens
   ()
  ) :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/ptr.rs:378:5: 378:74 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.into_inner.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:378:23: 378:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Param :name "perm~7" :typ (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo."
       ((Typ TypParam "V")))
     ) :mode Exec :is_mut false :unwrapped_info (tuple Proof "verus_tmp_perm~4")))
  ) :ret (@ "pervasive/ptr.rs:378:73: 378:74 (#0)" (Param :name "v~53" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/ptr.rs:380:13: 380:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:380:13: 380:22 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:380:13: 380:17 (#0)" (> Var "self~2") (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))))
      ) (Typ Int (IntRange Int))
     ) (@@ "pervasive/ptr.rs:380:27: 380:37 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
         "PointsToData" :field "pptr" :get_variant false)
       ) (@@ "pervasive/ptr.rs:380:27: 380:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
          ((Typ TypParam "V")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/ptr.rs:380:27: 380:31 (#0)" (> Var "perm~7") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
        ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
      ) (Typ Int (IntRange Int)))
    ) (Typ Bool))
   (@@ "pervasive/ptr.rs:381:13: 381:34 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.is_Some.")
        ((Typ TypParam "V")) ())
      ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.is_Some.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
       (Typ TypParam "V")
      ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
     ) ((@@ "pervasive/ptr.rs:381:13: 381:24 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
          "PointsToData" :field "value" :get_variant false)
        ) (@@ "pervasive/ptr.rs:381:13: 381:18 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
           ((Typ TypParam "V")) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/ptr.rs:381:13: 381:17 (#0)" (> Var "perm~7") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
       ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/ptr.rs:383:13: 383:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:383:13: 383:14 (#0)" (> Var "v~53")
      (Typ TypParam "V")
     ) (@@ "pervasive/ptr.rs:383:19: 383:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.option.impl&%0.get_Some_0.")
          ((Typ TypParam "V")) ())
        ) (Fun :path "vstd!std_specs.option.OptionAdditionalFns.get_Some_0.") ((Typ Datatype "core!option.Option." ((Typ TypParam "V")))
         (Typ TypParam "V")
        ) ((tuple "Self%" "vstd!std_specs.option.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:383:19: 383:30 (#0)" (> UnaryOpr (UnaryOpr Field (FieldOpr :datatype "vstd!ptr.PointsToData." :variant
            "PointsToData" :field "value" :get_variant false)
          ) (@@ "pervasive/ptr.rs:383:19: 383:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.")
             ((Typ TypParam "V")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/ptr.rs:383:19: 383:23 (#0)" (> Var "perm~7") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
           ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
         ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
      ) (Typ TypParam "V"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec InvariantOpens ()) :is_const
  false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/ptr.rs:385:5: 390:6 (#0)" (> Block (
     (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Stmt Decl :pattern (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Pattern Var :name "verus_tmp~80"
         :mutable false
        ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
       ) :mode Proof :init None))
     (@ "pervasive/ptr.rs:386:9: 386:12 (#0)" (Stmt Expr (@@ "pervasive/ptr.rs:386:9: 386:12 (#0)" (> Ghost :alloc_wrapper false :tracked
         false :expr (@@ "pervasive/ptr.rs:386:9: 386:12 (#0)" (> Block () (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> Assign :init_not_mut
             true :lhs (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> VarLoc "verus_tmp~80") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam
                 "V")))
             ) :rhs (@@ "pervasive/ptr.rs:386:32: 386:36 (#0)" (> Var "perm~7") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
            ) (Typ Tuple ()))
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/ptr.rs:386:21: 386:29 (#0)" (Stmt Decl :pattern (@@ "pervasive/ptr.rs:386:21: 386:29 (#0)" (Pattern Var :name "perm~91"
         :mutable true
        ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
       ) :mode Proof :init None))
     (@ "pervasive/ptr.rs:386:9: 386:12 (#0)" (Stmt Expr (@@ "pervasive/ptr.rs:386:9: 386:12 (#0)" (> Ghost :alloc_wrapper false :tracked
         false :expr (@@ "pervasive/ptr.rs:386:9: 386:12 (#0)" (> Block (
            (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Stmt Decl :pattern (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Pattern Var :name "verus_tmp_perm~97"
                :mutable true
               ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
              ) :mode Proof :init (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> Var "verus_tmp~80") (Typ Datatype "vstd!ptr.PointsTo." ((Typ
                  TypParam "V"))))))
            (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Stmt Expr (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> Assign :init_not_mut false :lhs
                (@@ "pervasive/ptr.rs:386:25: 386:29 (#0)" (> VarLoc "perm~91") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
                :rhs (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> Var "verus_tmp_perm~97") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam
                    "V"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/ptr.rs:387:13: 387:14 (#0)" (Stmt Decl :pattern (@@ "pervasive/ptr.rs:387:13: 387:14 (#0)" (Pattern Var :name "v~120"
         :mutable false
        ) (Typ TypParam "V")
       ) :mode Exec :init (@@ "pervasive/ptr.rs:387:17: 387:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.take.")
          ((Typ TypParam "V")) () (AutospecUsage Final)
         ) ((@@ "pervasive/ptr.rs:387:17: 387:21 (#0)" (> Var "self~2") (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))) (@@ "pervasive/ptr.rs:387:35: 387:44 (#0)"
           (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/ptr.rs:387:35: 387:44 (#0)" (> Loc (@@ "pervasive/ptr.rs:387:40: 387:44 (#0)"
               (> VarLoc "perm~91") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
             ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
           ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
        ) (Typ TypParam "V"))))
     (@ "pervasive/ptr.rs:388:9: 388:36 (#0)" (Stmt Expr (@@ "pervasive/ptr.rs:388:9: 388:36 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!ptr.impl&%1.dispose.") ((Typ TypParam "V")) () (AutospecUsage Final)
         ) ((@@ "pervasive/ptr.rs:388:9: 388:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))) (@@ "pervasive/ptr.rs:388:30: 388:34 (#0)"
           (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/ptr.rs:388:30: 388:34 (#0)" (> Var "perm~91") (Typ Datatype
              "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
           ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/ptr.rs:389:9: 389:10 (#0)" (> Var "v~120") (Typ TypParam "V"))
   ) (Typ TypParam "V")
  ) :extra_dependencies ()))

(@ "pervasive/ptr.rs:396:5: 396:61 (#0)" (Function
  :name (Fun :path "vstd!ptr.impl&%1.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!ptr." :mode Exec :fuel 1 :typ_bounds (
   (tuple "V" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/ptr.rs:396:16: 396:20 (#0)" (Param :name "v~2" :typ (Typ TypParam "V") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/ptr.rs:396:30: 396:61 (#0)" (Param :name "pt~10" :typ (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam
         "V"))
      ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/ptr.rs:398:13: 398:81 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/ptr.rs:398:14: 398:20 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%0.view.") ((Typ TypParam "V")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/ptr.rs:398:14: 398:19 (#0)" (> Unary (UnaryOp CoerceMode :op_mode Spec :from_mode Spec :to_mode Spec :kind
           (ModeCoercion Other)
          ) (@@ "pervasive/ptr.rs:398:14: 398:18 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/ptr.rs:398:14: 398:16 (#0)"
             (> Var "pt~10") (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                 "vstd!ptr.PointsTo." ((Typ TypParam "V")))))))
           ) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
         ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
      ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V")))
     ) (@@ "pervasive/ptr.rs:398:25: 398:80 (#0)" (> Ctor "vstd!ptr.PointsToData." "PointsToData" ((-> pptr (@@ "pervasive/ptr.rs:398:45: 398:54 (#0)"
          (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.id.") ((Typ TypParam "V")) () (AutospecUsage IfMarked))
           ((@@ "pervasive/ptr.rs:398:45: 398:49 (#0)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/ptr.rs:398:45: 398:47 (#0)"
               (> Var "pt~10") (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype
                   "vstd!ptr.PointsTo." ((Typ TypParam "V")))))))
             ) (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))))
          ) (Typ Int (IntRange Int)))
        ) (-> value (@@ "pervasive/ptr.rs:398:63: 398:78 (#0)" (> Ctor "core!option.Option." "Some" ((-> _0 (@@ "pervasive/ptr.rs:398:76: 398:77 (#0)"
              (> Var "v~2") (Typ TypParam "V")))
           ) None
          ) (Typ Datatype "core!option.Option." ((Typ TypParam "V")))))
       ) None
      ) (Typ Datatype "vstd!ptr.PointsToData." ((Typ TypParam "V"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/ptr.rs:399:5: 403:6 (#0)" (> Block (
     (@ "pervasive/ptr.rs:400:13: 400:32 (#0)" (Stmt Decl :pattern (@@ "pervasive/ptr.rs:400:13: 400:32 (#0)" (Pattern Tuple ((@@ "pervasive/ptr.rs:400:14: 400:15 (#0)"
           (Pattern Var :name "p~58" :mutable false) (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))
          ) (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Pattern Var :name "verus_tmp_t~59" :mutable false) (Typ Decorate (TypDecoration
             Tracked
            ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))))
        ) (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo."
            ((Typ TypParam "V"))))))
       ) :mode Exec :init (@@ "pervasive/ptr.rs:400:35: 400:48 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!ptr.impl&%1.empty.")
          ((Typ TypParam "V")) () (AutospecUsage Final)
         ) ()
        ) (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo."
            ((Typ TypParam "V")))))))))
     (@ "pervasive/ptr.rs:400:25: 400:30 (#0)" (Stmt Decl :pattern (@@ "pervasive/ptr.rs:400:25: 400:30 (#0)" (Pattern Var :name "t~63"
         :mutable true
        ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
       ) :mode Proof :init None))
     (@ "pervasive/ptr.rs:400:9: 400:12 (#0)" (Stmt Expr (@@ "pervasive/ptr.rs:400:9: 400:12 (#0)" (> Ghost :alloc_wrapper false :tracked
         false :expr (@@ "pervasive/ptr.rs:400:9: 400:12 (#0)" (> Block (
            (@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (Stmt Expr (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> Assign :init_not_mut false :lhs
                (@@ "pervasive/ptr.rs:400:29: 400:30 (#0)" (> VarLoc "t~63") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))) :rhs
                (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> Unary (UnaryOp CoerceMode :op_mode Proof :from_mode Proof :to_mode Proof :kind
                   (ModeCoercion Other)
                  ) (@@ "pervasive/ptr.rs:13:1: 406:2 (#598)" (> Var "verus_tmp_t~59") (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo."
                     ((Typ TypParam "V")))))
                 ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
               ) (Typ Tuple ()))))
           ) None
          ) (Typ Tuple ()))
        ) (Typ Tuple ()))))
     (@ "pervasive/ptr.rs:401:9: 401:34 (#0)" (Stmt Expr (@@ "pervasive/ptr.rs:401:9: 401:34 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!ptr.impl&%1.put.") ((Typ TypParam "V")) () (AutospecUsage Final)
         ) ((@@ "pervasive/ptr.rs:401:9: 401:10 (#0)" (> Var "p~58") (Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V")))) (@@ "pervasive/ptr.rs:401:23: 401:29 (#0)"
           (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/ptr.rs:401:23: 401:29 (#0)" (> Loc (@@ "pervasive/ptr.rs:401:28: 401:29 (#0)"
               (> VarLoc "t~63") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
             ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
           ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))
          ) (@@ "pervasive/ptr.rs:401:32: 401:33 (#0)" (> Var "v~2") (Typ TypParam "V")))
        ) (Typ Tuple ()))))
    ) (@@ "pervasive/ptr.rs:402:9: 402:24 (#0)" (> Tuple ((@@ "pervasive/ptr.rs:402:10: 402:11 (#0)" (> Var "p~58") (Typ Datatype
         "vstd!ptr.PPtr." ((Typ TypParam "V")))
       ) (@@ "pervasive/ptr.rs:402:21: 402:22 (#0)" (> Ghost :alloc_wrapper true :tracked true :expr (@@ "pervasive/ptr.rs:402:21: 402:22 (#0)"
          (> Var "t~63") (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V"))))
        ) (Typ Datatype "vstd!ptr.PointsTo." ((Typ TypParam "V")))))
     ) (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo."
         ((Typ TypParam "V")))))))
   ) (Typ Tuple ((Typ Datatype "vstd!ptr.PPtr." ((Typ TypParam "V"))) (Typ Decorate (TypDecoration Tracked) (Typ Datatype "vstd!ptr.PointsTo."
       ((Typ TypParam "V"))))))
  ) :extra_dependencies ()))

(@ "pervasive/string.rs:34:5: 34:41 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:34:22: 34:27 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:34:32: 34:41 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ Char))) :mode
    Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:36:5: 36:40 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.is_ascii.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:36:26: 36:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:36:36: 36:40 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:43:5: 43:43 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.unicode_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:43:24: 43:29 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:43:38: 43:43 (#0)" (Param :name "l~10" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:45:13: 45:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:45:13: 45:14 (#0)" (> Var "l~10")
      (Typ Int (IntRange USize))
     ) (@@ "pervasive/string.rs:45:25: 45:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:45:25: 45:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:45:25: 45:29 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:51:5: 51:49 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.get_char.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:51:21: 51:26 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/string.rs:51:28: 51:36 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:51:45: 51:49 (#0)" (Param :name "c~29" :typ (Typ Char) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/string.rs:52:18: 52:19 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/string.rs:52:18: 52:19 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/string.rs:52:22: 52:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:52:22: 52:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:52:22: 52:26 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/string.rs:54:13: 54:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:54:13: 54:34 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.") ((Typ Char)) () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:54:13: 54:18 (#0)"
         (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.") () () (AutospecUsage IfMarked)) ((@@
            "pervasive/string.rs:54:13: 54:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
        ) (@@ "pervasive/string.rs:54:25: 54:26 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ Char)
     ) (@@ "pervasive/string.rs:54:38: 54:39 (#0)" (> Var "c~29") (Typ Char))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:55:13: 55:17 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/string.rs:55:13: 55:28 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:55:13: 55:17 (#0)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:55:33: 55:39 (#0)" (> Quant (Forall :boxed_params true) ((-> i~70 (Typ Int (IntRange Int)))) (@@
        "pervasive/string.rs:55:48: 55:49 (#0)" (> Binary (BinaryOp Implies) (@@ "pervasive/string.rs:55:48: 55:49 (#0)" (> Binary (
            BinaryOp Inequality (InequalityOp Lt)
           ) (@@ "pervasive/string.rs:55:48: 55:49 (#0)" (> Var "i~70") (Typ Int (IntRange Int))) (@@ "pervasive/string.rs:55:52: 55:63 (#0)"
            (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.") ((Typ Char)) () (AutospecUsage IfMarked))
             ((@@ "pervasive/string.rs:55:52: 55:57 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
                 () () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/string.rs:55:52: 55:56 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
               ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
            ) (Typ Int (IntRange Nat)))
          ) (Typ Bool)
         ) (@@ "pervasive/string.rs:55:68: 55:91 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/string.rs:55:68: 55:91 (#0)"
            (> Unary (UnaryOp Clip :range (IntRange Nat) :truncate false) (@@ "pervasive/string.rs:55:68: 55:91 (#0)" (> Unary (UnaryOp CharToInt)
               (@@ "pervasive/string.rs:55:69: 55:83 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                  ((Typ Char)) () (AutospecUsage IfMarked)
                 ) ((@@ "pervasive/string.rs:55:69: 55:74 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
                     () () (AutospecUsage IfMarked)
                    ) ((@@ "pervasive/string.rs:55:69: 55:73 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
                   ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
                  ) (@@ "pervasive/string.rs:55:81: 55:82 (#0)" (> Var "i~70") (Typ Int (IntRange Int))))
                ) (Typ Char))
              ) (Typ Int (IntRange Nat)))
            ) (Typ Int (IntRange Nat))
           ) (@@ "pervasive/string.rs:55:94: 55:97 (#0)" (> Const (Constant Int 256)) (Typ Int (IntRange Nat)))
          ) (Typ Bool))
        ) (Typ Bool))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:61:5: 61:80 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.substring_ascii.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:61:28: 61:33 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/string.rs:61:35: 61:46 (#0)" (Param :name "from~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/string.rs:61:48: 61:57 (#0)" (Param :name "to~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:61:68: 61:80 (#0)" (Param :name "ret~45" :typ (Typ StrSlice) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/string.rs:63:13: 63:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
      () () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/string.rs:63:13: 63:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:64:13: 64:17 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/string.rs:64:13: 64:17 (#0)"
      (> Var "from~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/string.rs:64:20: 64:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:64:20: 64:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:64:20: 64:24 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:65:13: 65:15 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/string.rs:65:13: 65:15 (#0)"
      (> Var "to~6") (Typ Int (IntRange USize))
     ) (@@ "pervasive/string.rs:65:19: 65:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:65:19: 65:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:65:19: 65:23 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/string.rs:67:13: 67:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:67:13: 67:17 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:67:13: 67:16 (#0)"
         (> Var "ret~45") (Typ StrSlice)))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
     ) (@@ "pervasive/string.rs:67:21: 67:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:67:21: 67:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:67:21: 67:25 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
        ) (@@ "pervasive/string.rs:67:36: 67:40 (#0)" (> Var "from~4") (Typ Int (IntRange USize))) (@@ "pervasive/string.rs:67:49: 67:51 (#0)"
         (> Var "to~6") (Typ Int (IntRange USize))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:68:13: 68:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:68:13: 68:27 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:68:13: 68:16 (#0)"
         (> Var "ret~45") (Typ StrSlice)))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:68:31: 68:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:68:31: 68:35 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:76:5: 76:79 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.substring_char.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:76:27: 76:32 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/string.rs:76:34: 76:45 (#0)" (Param :name "from~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/string.rs:76:47: 76:56 (#0)" (Param :name "to~6" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:76:67: 76:79 (#0)" (Param :name "ret~41" :typ (Typ StrSlice) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/string.rs:78:13: 78:17 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/string.rs:78:13: 78:17 (#0)"
      (> Var "from~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/string.rs:78:20: 78:31 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:78:20: 78:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:78:20: 78:24 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:79:13: 79:15 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/string.rs:79:13: 79:15 (#0)"
      (> Var "to~6") (Typ Int (IntRange USize))
     ) (@@ "pervasive/string.rs:79:19: 79:30 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:79:19: 79:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:79:19: 79:23 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/string.rs:81:13: 81:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:81:13: 81:17 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:81:13: 81:16 (#0)"
         (> Var "ret~41") (Typ StrSlice)))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
     ) (@@ "pervasive/string.rs:81:21: 81:59 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:81:21: 81:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:81:21: 81:25 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
        ) (@@ "pervasive/string.rs:81:36: 81:40 (#0)" (> Var "from~4") (Typ Int (IntRange USize))) (@@ "pervasive/string.rs:81:49: 81:51 (#0)"
         (> Var "to~6") (Typ Int (IntRange USize))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:82:13: 82:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:82:13: 82:27 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:82:13: 82:16 (#0)"
         (> Var "ret~41") (Typ StrSlice)))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:82:31: 82:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:82:31: 82:35 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:109:5: 109:43 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.to_string.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:109:22: 109:26 (#0)" (Param :name "self~2" :typ (Typ StrSlice) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:109:37: 109:43 (#0)" (Param :name "ret~10" :typ (Typ Datatype "vstd!string.String." ()) :mode
    Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:111:13: 111:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:111:13: 111:18 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:111:13: 111:17 (#0)"
         (> Var "self~2") (Typ StrSlice)))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
     ) (@@ "pervasive/string.rs:111:22: 111:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:111:22: 111:25 (#0)" (> Var "ret~10") (Typ Datatype "vstd!string.String." ())))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:112:13: 112:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:112:13: 112:28 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:112:13: 112:17 (#0)"
         (> Var "self~2") (Typ StrSlice)))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:112:32: 112:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.is_ascii.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:112:32: 112:35 (#0)" (> Var "ret~10") (Typ Datatype "vstd!string.String." ())))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/string.rs:113:5: 115:6 (#0)" (> Block () (@@ "pervasive/string.rs:114:9: 114:31 (#0)" (> Call (CallTarget
       Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.from_str.") () () (AutospecUsage Final)
      ) ((@@ "pervasive/string.rs:114:26: 114:30 (#0)" (> Var "self~2") (Typ StrSlice)))
     ) (Typ Datatype "vstd!string.String." ()))
   ) (Typ Datatype "vstd!string.String." ())
  ) :extra_dependencies ()))

(@ "pervasive/string.rs:118:5: 118:48 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.get_ascii.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:118:22: 118:27 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/string.rs:118:29: 118:37 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:118:46: 118:48 (#0)" (Param :name "b~23" :typ (Typ Int (IntRange U 8)) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require (
   (@@ "pervasive/string.rs:120:13: 120:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
      () () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/string.rs:120:13: 120:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/string.rs:122:13: 122:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:122:13: 122:17 (#0)" (> Unary
       (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/string.rs:122:13: 122:17 (#0)" (> Unary (UnaryOp CharToInt)
         (@@ "pervasive/string.rs:122:13: 122:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
            ((Typ Char)) () (AutospecUsage IfMarked)
           ) ((@@ "pervasive/string.rs:122:13: 122:24 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
               () () (AutospecUsage IfMarked)
              ) ((@@ "pervasive/string.rs:122:13: 122:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
             ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
            ) (@@ "pervasive/string.rs:122:31: 122:32 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
          ) (Typ Char))
        ) (Typ Int (IntRange U 8)))
      ) (Typ Int (IntRange U 8))
     ) (@@ "pervasive/string.rs:122:50: 122:51 (#0)" (> Var "b~23") (Typ Int (IntRange U 8)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:134:5: 134:44 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%0.as_bytes.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:134:21: 134:26 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ StrSlice)) :mode
     Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:134:37: 134:44 (#0)" (Param :name "ret~21" :typ (Typ Datatype "alloc!vec.Vec." ((Typ Int (IntRange
        U 8)
      ) (Typ Datatype "alloc!alloc.Global." ()))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/string.rs:136:13: 136:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
      () () (AutospecUsage IfMarked)
     ) ((@@ "pervasive/string.rs:136:13: 136:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/string.rs:138:13: 138:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:138:13: 138:23 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!std_specs.vec.impl&%0.view.") ((Typ Int (IntRange U 8)) (Typ Datatype
            "alloc!alloc.Global." ())
          ) ((tuple "A" "alloc!alloc.impl&%1.")))
        ) (Fun :path "vstd!std_specs.vec.VecAdditionalSpecFns.view.") ((Typ Datatype "alloc!vec.Vec." ((Typ Int (IntRange U 8)) (Typ
            Datatype "alloc!alloc.Global." ()))
         ) (Typ Int (IntRange U 8))
        ) ((tuple "Self%" "vstd!std_specs.vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:138:13: 138:16 (#0)" (> Var "ret~21") (Typ Datatype "alloc!vec.Vec." ((Typ Int (IntRange U 8)) (Typ
            Datatype "alloc!alloc.Global." ())))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8))))
     ) (@@ "pervasive/string.rs:138:27: 138:86 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.new.")
        ((Typ Int (IntRange U 8)) (Typ Lambda ((Typ Int (IntRange Int))) (Typ Int (IntRange U 8)))) ((tuple "impl%1" "builtin!impl&%49."))
        (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:138:36: 138:53 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
           ((Typ Char)) () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:138:36: 138:47 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
              () () (AutospecUsage IfMarked)
             ) ((@@ "pervasive/string.rs:138:36: 138:40 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
            ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
         ) (Typ Int (IntRange Nat))
        ) (@@ "pervasive/string.rs:138:55: 138:63 (#0)" (> Closure ((-> i~50 (Typ Int (IntRange Int)))) (@@ "pervasive/string.rs:138:59: 138:63 (#0)"
           (> Unary (UnaryOp Clip :range (IntRange U 8) :truncate false) (@@ "pervasive/string.rs:138:59: 138:63 (#0)" (> Unary (UnaryOp
               CharToInt
              ) (@@ "pervasive/string.rs:138:59: 138:79 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
                 ((Typ Char)) () (AutospecUsage IfMarked)
                ) ((@@ "pervasive/string.rs:138:59: 138:70 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
                    () () (AutospecUsage IfMarked)
                   ) ((@@ "pervasive/string.rs:138:59: 138:63 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ StrSlice))))
                  ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
                 ) (@@ "pervasive/string.rs:138:77: 138:78 (#0)" (> Var "i~50") (Typ Int (IntRange Int))))
               ) (Typ Char))
             ) (Typ Int (IntRange U 8)))
           ) (Typ Int (IntRange U 8)))
         ) (Typ Lambda ((Typ Int (IntRange Int))) (Typ Int (IntRange U 8)))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Int (IntRange U 8)))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:183:5: 183:41 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.view.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:183:22: 183:27 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:183:32: 183:41 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:185:5: 185:40 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.is_ascii.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:185:26: 185:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
       ())
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:185:36: 185:40 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:188:5: 188:57 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.from_str.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:188:25: 188:40 (#0)" (Param :name "s~2" :typ (Typ StrSlice) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:188:51: 188:57 (#0)" (Param :name "ret~10" :typ (Typ Datatype "vstd!string.String." ()) :mode
    Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:190:13: 190:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:190:13: 190:15 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:190:13: 190:14 (#0)"
         (> Var "s~2") (Typ StrSlice)))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
     ) (@@ "pervasive/string.rs:190:19: 190:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:190:19: 190:22 (#0)" (> Var "ret~10") (Typ Datatype "vstd!string.String." ())))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:191:13: 191:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:191:13: 191:25 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:191:13: 191:14 (#0)"
         (> Var "s~2") (Typ StrSlice)))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:191:29: 191:43 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.is_ascii.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:191:29: 191:32 (#0)" (> Var "ret~10") (Typ Datatype "vstd!string.String." ())))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:198:5: 198:54 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.as_str.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:198:23: 198:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:198:42: 198:54 (#0)" (Param :name "ret~10" :typ (Typ StrSlice) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:200:13: 200:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:200:13: 200:18 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:200:13: 200:17 (#0)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String." ()))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
     ) (@@ "pervasive/string.rs:200:22: 200:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:200:22: 200:25 (#0)" (> Var "ret~10") (Typ StrSlice)))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:201:13: 201:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:201:13: 201:28 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.is_ascii.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:201:13: 201:17 (#0)"
         (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String." ()))))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:201:32: 201:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:201:32: 201:35 (#0)" (> Var "ret~10") (Typ StrSlice)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:208:5: 208:61 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.append.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:208:27: 208:39 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!string.String." ()) :mode Exec
     :is_mut true :unwrapped_info None))
   (@ "pervasive/string.rs:208:41: 208:60 (#0)" (Param :name "other~4" :typ (Typ StrSlice) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:212:5: 212:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:210:13: 210:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:210:13: 210:18 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:210:13: 210:17 (#0)"
         (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!string.String." ()))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
     ) (@@ "pervasive/string.rs:210:22: 210:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:210:22: 210:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:210:22: 210:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!string.String." ()))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
        ) (@@ "pervasive/string.rs:210:35: 210:41 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:210:35: 210:40 (#0)" (> Var "other~4") (Typ StrSlice)))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:211:13: 211:72 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/string.rs:211:13: 211:17 (#0)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/string.rs:211:13: 211:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.is_ascii.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:211:13: 211:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!string.String."
             ()))))
        ) (Typ Bool)
       ) (@@ "pervasive/string.rs:211:32: 211:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.is_ascii.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:211:32: 211:41 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
             "vstd!string.String." ()))))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:211:56: 211:72 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:211:56: 211:61 (#0)" (> Var "other~4") (Typ StrSlice)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:217:5: 217:65 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.concat.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:217:23: 217:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!string.String." ()) :mode Exec
     :is_mut false :unwrapped_info None))
   (@ "pervasive/string.rs:217:29: 217:48 (#0)" (Param :name "other~4" :typ (Typ StrSlice) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:217:59: 217:65 (#0)" (Param :name "ret~12" :typ (Typ Datatype "vstd!string.String." ()) :mode
    Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:219:13: 219:16 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:219:13: 219:17 (#0)" (> Call
       (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.") () () (AutospecUsage IfMarked)) ((@@ "pervasive/string.rs:219:13: 219:16 (#0)"
         (> Var "ret~12") (Typ Datatype "vstd!string.String." ())))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
     ) (@@ "pervasive/string.rs:219:21: 219:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ Char)) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:219:21: 219:26 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:219:21: 219:25 (#0)" (> Var "self~2") (Typ Datatype "vstd!string.String." ())))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
        ) (@@ "pervasive/string.rs:219:29: 219:35 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
           () () (AutospecUsage IfMarked)
          ) ((@@ "pervasive/string.rs:219:29: 219:34 (#0)" (> Var "other~4") (Typ StrSlice)))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
    ) (Typ Bool))
   (@@ "pervasive/string.rs:220:13: 220:66 (#0)" (> Binary (BinaryOp And) (@@ "pervasive/string.rs:220:13: 220:16 (#0)" (> Binary
       (BinaryOp Eq Spec) (@@ "pervasive/string.rs:220:13: 220:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.is_ascii.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:220:13: 220:16 (#0)" (> Var "ret~12") (Typ Datatype "vstd!string.String." ())))
        ) (Typ Bool)
       ) (@@ "pervasive/string.rs:220:31: 220:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.is_ascii.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:220:31: 220:35 (#0)" (> Var "self~2") (Typ Datatype "vstd!string.String." ())))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:220:50: 220:66 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.is_ascii.")
        () () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/string.rs:220:50: 220:55 (#0)" (> Var "other~4") (Typ StrSlice)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:226:5: 226:47 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.eq.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:226:15: 226:20 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/string.rs:226:22: 226:34 (#0)" (Param :name "other~4" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:226:43: 226:47 (#0)" (Param :name "b~12" :typ (Typ Bool) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:227:17: 227:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:227:17: 227:18 (#0)" (> Var
       "b~12"
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:227:22: 227:51 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:227:23: 227:34 (#0)" (
         > Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.") () () (AutospecUsage IfMarked)) ((@@
           "pervasive/string.rs:227:23: 227:27 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
             ()))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
       ) (@@ "pervasive/string.rs:227:38: 227:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%1.view.")
          () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:227:38: 227:43 (#0)" (> Var "other~4") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
             ()))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ Char))))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:233:5: 233:43 (#0)" (Function
  :name (Fun :path "vstd!string.impl&%1.clone.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:233:18: 233:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
       ())
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/string.rs:233:37: 233:43 (#0)" (Param :name "result~10" :typ (Typ Datatype "vstd!string.String." ()) :mode
    Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:234:17: 234:23 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:234:17: 234:23 (#0)" (> Var
       "result~10"
      ) (Typ Datatype "vstd!string.String." ())
     ) (@@ "pervasive/string.rs:234:27: 234:31 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!string.String."
        ())))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:163:1: 163:61 (#0)" (Function
  :name (Fun :path "vstd!string.axiom_str_literal_is_ascii.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!string." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:163:45: 163:60 (#0)" (Param :name "s~2" :typ (Typ StrSlice) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:166:1: 166:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:165:9: 165:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:165:20: 165:32 (#0)" (> Unary
       (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/string.rs:165:20: 165:32 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!string.impl&%0.is_ascii.") () () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:165:20: 165:21 (#0)" (> Var "s~2") (Typ StrSlice)))
        ) (Typ Bool))
      ) (Typ Bool)
     ) (@@ "pervasive/string.rs:165:36: 165:65 (#0)" (> Unary (UnaryOp StrIsAscii) (@@ "pervasive/string.rs:165:63: 165:64 (#0)"
        (> Var "s~2") (Typ StrSlice))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:170:1: 170:56 (#0)" (Function
  :name (Fun :path "vstd!string.axiom_str_literal_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!string." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:170:40: 170:55 (#0)" (Param :name "s~2" :typ (Typ StrSlice) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:173:1: 173:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:172:9: 172:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:172:20: 172:28 (#0)" (> Unary
       (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/string.rs:172:20: 172:28 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!seq.Seq.len.") ((Typ Char)) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:172:20: 172:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/string.rs:172:20: 172:21 (#0)" (> Var "s~2") (Typ StrSlice)))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))))
        ) (Typ Int (IntRange Nat)))
      ) (Typ Int (IntRange Nat))
     ) (@@ "pervasive/string.rs:172:32: 172:56 (#0)" (> Unary (UnaryOp StrLen) (@@ "pervasive/string.rs:172:54: 172:55 (#0)" (> Var
         "s~2"
        ) (Typ StrSlice))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/string.rs:177:1: 177:69 (#0)" (Function
  :name (Fun :path "vstd!string.axiom_str_literal_get_char.") :proxy None :kind (FunctionKind Static) :visibility (Visibility
   :restricted_to None
  ) :owning_module "vstd!string." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "pervasive/string.rs:177:45: 177:60 (#0)" (Param :name "s~2" :typ (Typ StrSlice) :mode Spec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/string.rs:177:62: 177:68 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/string.rs:180:1: 180:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/string.rs:179:9: 179:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/string.rs:179:20: 179:31 (#0)" (> Unary
       (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "pervasive/string.rs:179:20: 179:31 (#0)" (> Call (CallTarget Fun (CallTargetKind
           Static
          ) (Fun :path "vstd!seq.Seq.index.") ((Typ Char)) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/string.rs:179:20: 179:22 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!string.impl&%0.view.")
             () () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/string.rs:179:20: 179:21 (#0)" (> Var "s~2") (Typ StrSlice)))
           ) (Typ Datatype "vstd!seq.Seq." ((Typ Char)))
          ) (@@ "pervasive/string.rs:179:29: 179:30 (#0)" (> Var "i~4") (Typ Int (IntRange Int))))
        ) (Typ Char))
      ) (Typ Char)
     ) (@@ "pervasive/string.rs:179:35: 179:67 (#0)" (> Binary (BinaryOp StrGetChar) (@@ "pervasive/string.rs:179:62: 179:63 (#0)"
        (> Var "s~2") (Typ StrSlice)
       ) (@@ "pervasive/string.rs:179:65: 179:66 (#0)" (> Var "i~4") (Typ Int (IntRange Int)))
      ) (Typ Char))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:34:10: 34:34 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%0.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!vec.impl&%0." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Datatype "vstd!vec.Vec." ((Typ
      TypParam "A")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:34:18: 34:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
       ((Typ TypParam "A")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:34:28: 34:34 (#0)" (Param :name "%return" :typ (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
    :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:39:5: 39:29 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.new.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/vec.rs:39:25: 39:29 (#0)" (Param :name "v~8" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam
       "A"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:41:13: 41:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:41:13: 41:15 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:41:13: 41:14 (#0)" (> Var "v~8") (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:41:19: 41:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:49:5: 49:54 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.with_capacity.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:49:26: 49:41 (#0)" (Param :name "capacity~2" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:49:50: 49:54 (#0)" (Param :name "v~10" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))
    :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:51:13: 51:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:51:13: 51:15 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:51:13: 51:14 (#0)" (> Var "v~10") (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:51:19: 51:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:61:5: 61:49 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.reserve.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:61:20: 61:29 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/vec.rs:61:31: 61:48 (#0)" (Param :name "additional~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:64:5: 64:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:63:13: 63:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:63:13: 63:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:63:13: 63:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:63:22: 63:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
          ((Typ TypParam "A")) ())
        ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
        (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:63:22: 63:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!vec.Vec." ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:68:5: 68:31 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.empty.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params () :ret (@ "pervasive/vec.rs:68:27: 68:31 (#0)" (Param :name "v~8" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam
       "A"))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:70:13: 70:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:70:13: 70:15 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:70:13: 70:14 (#0)" (> Var "v~8") (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:70:19: 70:36 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/vec.rs:71:5: 73:6 (#0)" (> Block () (@@ "pervasive/vec.rs:72:9: 72:19 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!vec.impl&%1.new.") ((Typ TypParam "A")) () (AutospecUsage Final)
      ) ()
     ) (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))))
   ) (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))
  ) :extra_dependencies ()))

(@ "pervasive/vec.rs:76:5: 76:37 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.push.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:76:17: 76:26 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/vec.rs:76:28: 76:36 (#0)" (Param :name "value~4" :typ (Typ TypParam "A") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/vec.rs:79:5: 79:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:78:13: 78:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:78:13: 78:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:78:13: 78:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:78:22: 78:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.push.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:78:22: 78:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:78:22: 78:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:78:38: 78:43 (#0)" (> Var "value~4") (Typ TypParam "A")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:84:5: 84:39 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.pop.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:84:16: 84:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:84:38: 84:39 (#0)" (Param :name "value~32" :typ (Typ TypParam "A") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/vec.rs:86:13: 86:16 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Gt)) (@@ "pervasive/vec.rs:86:13: 86:28 (#0)"
      (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
       ((@@ "pervasive/vec.rs:86:13: 86:22 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:86:31: 86:32 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/vec.rs:88:13: 88:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:88:13: 88:18 (#0)" (> Var "value~32")
      (Typ TypParam "A")
     ) (@@ "pervasive/vec.rs:88:22: 88:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:88:22: 88:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!vec.Vec." ((Typ TypParam "A"))))
        ) (@@ "pervasive/vec.rs:88:32: 88:35 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/vec.rs:88:32: 88:47 (#0)"
           (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked))
            ((@@ "pervasive/vec.rs:88:32: 88:41 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
                ((Typ TypParam "A"))))))
           ) (Typ Int (IntRange USize))
          ) (@@ "pervasive/vec.rs:88:50: 88:51 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
         ) (Typ Int (IntRange Int))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
   (@@ "pervasive/vec.rs:89:13: 89:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:89:13: 89:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:89:13: 89:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:89:22: 89:65 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.subrange.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:89:22: 89:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:89:22: 89:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:89:42: 89:43 (#0)" (> Const (Constant Int 0)) (Typ Int (IntRange Int))) (@@ "pervasive/vec.rs:89:45: 89:48 (#0)"
         (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "pervasive/vec.rs:89:45: 89:60 (#0)" (> Call (CallTarget Fun (CallTargetKind
              Static
             ) (Fun :path "vstd!vec.impl&%1.len.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
            ) ((@@ "pervasive/vec.rs:89:45: 89:54 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
                "vstd!vec.Vec." ((Typ TypParam "A"))))))
           ) (Typ Int (IntRange USize))
          ) (@@ "pervasive/vec.rs:89:63: 89:64 (#0)" (> Const (Constant Int 1)) (Typ Int (IntRange Nat)))
         ) (Typ Int (IntRange Int))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:97:5: 97:51 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.spec_index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:97:33: 97:37 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
   (@ "pervasive/vec.rs:97:39: 97:45 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/vec.rs:97:50: 97:51 (#0)" (Param :name "%return" :typ (Typ TypParam "A") :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish true :attrs (FunctionAttrs :uses_ghost_blocks true :inline true :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/vec.rs:97:52: 99:6 (#0)" (> Block () (@@ "pervasive/vec.rs:98:9: 98:13 (#0)" (> Call (CallTarget Fun (CallTargetKind
        Static
       ) (Fun :path "vstd!seq.impl&%0.spec_index.") ((Typ TypParam "A")) () (AutospecUsage IfMarked)
      ) ((@@ "pervasive/vec.rs:98:9: 98:14 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
            ((Typ TypParam "A")) ())
          ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
          (AutospecUsage IfMarked)
         ) ((@@ "pervasive/vec.rs:98:9: 98:13 (#0)" (> Var "self~2") (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))))
        ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
       ) (@@ "pervasive/vec.rs:98:15: 98:16 (#0)" (> Var "i~4") (Typ Int (IntRange Int))))
     ) (Typ TypParam "A"))
   ) (Typ TypParam "A")
  ) :extra_dependencies ()))

(@ "pervasive/vec.rs:102:5: 102:44 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.index.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:102:18: 102:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
       ((Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
   (@ "pervasive/vec.rs:102:25: 102:33 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/vec.rs:102:42: 102:44 (#0)" (Param :name "r~27" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "A"))
    :mode Exec :is_mut false :unwrapped_info None)
  ) :require (
   (@@ "pervasive/vec.rs:104:13: 104:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/vec.rs:104:13: 104:14 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:104:17: 104:27 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:104:17: 104:21 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/vec.rs:106:13: 106:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:106:14: 106:15 (#0)" (> Var "r~27")
      (Typ Decorate (TypDecoration Ref) (Typ TypParam "A"))
     ) (@@ "pervasive/vec.rs:106:19: 106:23 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:106:19: 106:23 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))
        ) (@@ "pervasive/vec.rs:106:24: 106:25 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:112:5: 112:42 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.set.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:112:16: 112:25 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/vec.rs:112:27: 112:35 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/vec.rs:112:37: 112:41 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/vec.rs:117:5: 117:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/vec.rs:114:13: 114:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/vec.rs:114:13: 114:14 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:114:17: 114:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:114:17: 114:26 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!vec.Vec." ((Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/vec.rs:116:13: 116:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:116:13: 116:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:116:13: 116:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:116:22: 116:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:116:22: 116:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:116:22: 116:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:116:40: 116:41 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/vec.rs:116:50: 116:51 (#0)"
         (> Var "a~6") (Typ TypParam "A")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:122:5: 122:48 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.swap.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:122:17: 122:26 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/vec.rs:122:28: 122:36 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/vec.rs:122:38: 122:47 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Exec :is_mut true :unwrapped_info
     None))
  ) :ret (@ "pervasive/vec.rs:128:5: 128:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/vec.rs:124:13: 124:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/vec.rs:124:13: 124:14 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:124:17: 124:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:124:17: 124:26 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!vec.Vec." ((Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/vec.rs:126:13: 126:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:126:13: 126:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:126:13: 126:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:126:22: 126:58 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.update.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:126:22: 126:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:126:22: 126:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:126:40: 126:41 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/vec.rs:126:51: 126:57 (#0)"
         (> VarAt "a~6" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ TypParam "A"))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
   (@@ "pervasive/vec.rs:127:13: 127:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:127:14: 127:15 (#0)" (> Var "a~6")
      (Typ Decorate (TypDecoration MutRef) (Typ TypParam "A"))
     ) (@@ "pervasive/vec.rs:127:19: 127:45 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:127:19: 127:29 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:127:19: 127:28 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:127:36: 127:37 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:133:5: 133:45 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.insert.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:133:19: 133:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/vec.rs:133:30: 133:38 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
   (@ "pervasive/vec.rs:133:40: 133:44 (#0)" (Param :name "a~6" :typ (Typ TypParam "A") :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/vec.rs:138:5: 138:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/vec.rs:135:13: 135:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Le)) (@@ "pervasive/vec.rs:135:13: 135:14 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:135:18: 135:33 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:135:18: 135:27 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!vec.Vec." ((Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/vec.rs:137:13: 137:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:137:13: 137:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:137:13: 137:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:137:22: 137:52 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.insert.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:137:22: 137:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:137:22: 137:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:137:40: 137:41 (#0)" (> Var "i~4") (Typ Int (IntRange USize))) (@@ "pervasive/vec.rs:137:50: 137:51 (#0)"
         (> Var "a~6") (Typ TypParam "A")))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:143:5: 143:48 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.remove.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:143:19: 143:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/vec.rs:143:30: 143:38 (#0)" (Param :name "i~4" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false :unwrapped_info
     None))
  ) :ret (@ "pervasive/vec.rs:143:47: 143:48 (#0)" (Param :name "r~30" :typ (Typ TypParam "A") :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require (
   (@@ "pervasive/vec.rs:145:13: 145:14 (#0)" (> Binary (BinaryOp Inequality (InequalityOp Lt)) (@@ "pervasive/vec.rs:145:13: 145:14 (#0)"
      (> Var "i~4") (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:145:17: 145:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:145:17: 145:26 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!vec.Vec." ((Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :ensure (
   (@@ "pervasive/vec.rs:147:13: 147:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:147:13: 147:14 (#0)" (> Var "r~30")
      (Typ TypParam "A")
     ) (@@ "pervasive/vec.rs:147:18: 147:21 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.spec_index.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:147:18: 147:27 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
           "vstd!vec.Vec." ((Typ TypParam "A"))))
        ) (@@ "pervasive/vec.rs:147:28: 147:29 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ TypParam "A"))
    ) (Typ Bool))
   (@@ "pervasive/vec.rs:148:13: 148:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:148:13: 148:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:148:13: 148:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:148:22: 148:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq_lib.impl&%0.remove.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:148:22: 148:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:148:22: 148:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:148:40: 148:41 (#0)" (> Var "i~4") (Typ Int (IntRange USize))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:153:5: 153:41 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.spec_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:153:26: 153:31 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
       ((Typ TypParam "A")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:153:36: 153:41 (#0)" (Param :name "%return" :typ (Typ Int (IntRange USize)) :mode Spec :is_mut
    false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:157:5: 157:35 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to None)
  :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:157:16: 157:21 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
       ((Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:157:30: 157:35 (#0)" (Param :name "l~10" :typ (Typ Int (IntRange USize)) :mode Exec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:159:13: 159:14 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:159:13: 159:14 (#0)" (> Var "l~10")
      (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:159:18: 159:28 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:159:18: 159:22 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Int (IntRange USize)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec (Fun :path "vstd!vec.impl&%1.spec_len.") :bit_vector false :atomic false :integer_ring
   false :is_decrease_by false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:165:5: 165:43 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.as_slice.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:165:21: 165:26 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
       ((Typ TypParam "A")))
     ) :mode Exec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:165:39: 165:43 (#0)" (Param :name "slice~10" :typ (Typ Decorate (TypDecoration Ref) (Typ Datatype
      "slice%." ((Typ TypParam "A")))
    ) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:166:17: 166:22 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:166:17: 166:23 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!slice.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!slice.SliceAdditionalSpecFns.view.")
        ((Typ Datatype "slice%." ((Typ TypParam "A"))) (Typ TypParam "A")) ((tuple "Self%" "vstd!slice.impl&%0.")) (AutospecUsage
         IfMarked)
       ) ((@@ "pervasive/vec.rs:166:17: 166:22 (#0)" (> Var "slice~10") (Typ Decorate (TypDecoration Ref) (Typ Datatype "slice%." ((Typ
             TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:166:27: 166:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
          ((Typ TypParam "A")) ())
        ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
        (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:166:27: 166:31 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:172:5: 172:28 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.clear.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:172:18: 172:27 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:174:5: 174:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:173:17: 173:21 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:173:17: 173:28 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:173:17: 173:21 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:173:32: 173:49 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:179:5: 179:49 (#0)" (Function
  :name (Fun :path "vstd!vec.impl&%1.append.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Exec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:179:19: 179:28 (#0)" (Param :name "self~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
   (@ "pervasive/vec.rs:179:30: 179:48 (#0)" (Param :name "other~4" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Exec :is_mut true :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:183:5: 183:5 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:181:13: 181:17 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:181:13: 181:18 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:181:13: 181:17 (#0)" (> Var "self~2") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:181:22: 181:25 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.impl&%0.spec_add.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:181:22: 181:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:181:22: 181:31 (#0)" (> VarAt "self~2" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
        ) (@@ "pervasive/vec.rs:181:35: 181:46 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:181:35: 181:45 (#0)" (> VarAt "other~4" (VarAt Pre)) (Typ Decorate (TypDecoration MutRef) (Typ Datatype
              "vstd!vec.Vec." ((Typ TypParam "A"))))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
   (@@ "pervasive/vec.rs:182:13: 182:18 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:182:13: 182:19 (#0)" (> Call (CallTarget
        Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.") ((Typ TypParam "A")) ())) (Fun :path "vstd!view.View.view.")
        ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0.")) (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:182:13: 182:18 (#0)" (> Var "other~4") (Typ Decorate (TypDecoration MutRef) (Typ Datatype "vstd!vec.Vec."
           ((Typ TypParam "A"))))))
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))
     ) (@@ "pervasive/vec.rs:182:23: 182:40 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.empty.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ()
      ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A"))))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/vec.rs:190:1: 190:42 (#0)" (Function
  :name (Fun :path "vstd!vec.axiom_spec_len.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   None
  ) :owning_module "vstd!vec." :mode Proof :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/vec.rs:190:32: 190:41 (#0)" (Param :name "v~2" :typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :mode
     Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/vec.rs:193:1: 193:1 (#0)" (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info
    None)
  ) :require () :ensure (
   (@@ "pervasive/vec.rs:192:9: 192:10 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "pervasive/vec.rs:192:20: 192:32 (#0)" (> Unary (UnaryOp
        Trigger (TriggerAnnotation Trigger None)
       ) (@@ "pervasive/vec.rs:192:20: 192:32 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!vec.impl&%1.spec_len.")
          ((Typ TypParam "A")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/vec.rs:192:20: 192:21 (#0)" (> Var "v~2") (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))))
        ) (Typ Int (IntRange USize)))
      ) (Typ Int (IntRange USize))
     ) (@@ "pervasive/vec.rs:192:36: 192:50 (#0)" (> Call (CallTarget Fun (CallTargetKind Static) (Fun :path "vstd!seq.Seq.len.")
        ((Typ TypParam "A")) () (AutospecUsage IfMarked)
       ) ((@@ "pervasive/vec.rs:192:36: 192:44 (#0)" (> Call (CallTarget Fun (CallTargetKind Method (tuple (Fun :path "vstd!vec.impl&%0.view.")
             ((Typ TypParam "A")) ())
           ) (Fun :path "vstd!view.View.view.") ((Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))) ((tuple "Self%" "vstd!vec.impl&%0."))
           (AutospecUsage IfMarked)
          ) ((@@ "pervasive/vec.rs:192:36: 192:37 (#0)" (> Var "v~2") (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A")))))
         ) (Typ Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))
      ) (Typ Int (IntRange Nat)))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall true :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/view.rs:15:10: 15:36 (#0)" (Function
  :name (Fun :path "vstd!view.View.view.") :proxy None :kind (FunctionKind TraitMethodDecl :trait_path "vstd!view.View.") :visibility
  (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "Self%" (GenericBound Traits ()))
  ) :params (
   (@ "pervasive/view.rs:15:18: 15:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "Self%"))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:15:28: 15:35 (#0)" (Param :name "%return" :typ (Typ Projection :self_typ (Typ TypParam "Self%")
     :trait_typ_args () :trait_path "vstd!view.View." :name "V"
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/view.rs:21:10: 21:32 (#0)" (Function
  :name (Fun :path "vstd!view.impl&%0.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%0." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Decorate (TypDecoration Ref)
    (Typ TypParam "A"))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:21:18: 21:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Decorate (TypDecoration
        Ref
       ) (Typ TypParam "A"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:21:28: 21:32 (#0)" (Param :name "%return" :typ (Typ Projection :self_typ (Typ TypParam "A") :trait_typ_args
     () :trait_path "vstd!view.View." :name "V"
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/view.rs:29:10: 29:32 (#0)" (Function
  :name (Fun :path "vstd!view.impl&%1.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%1." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Decorate (TypDecoration Box)
    (Typ TypParam "A"))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:29:18: 29:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Decorate (TypDecoration
        Box
       ) (Typ TypParam "A"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:29:28: 29:32 (#0)" (Param :name "%return" :typ (Typ Projection :self_typ (Typ TypParam "A") :trait_typ_args
     () :trait_path "vstd!view.View." :name "V"
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/view.rs:37:10: 37:32 (#0)" (Function
  :name (Fun :path "vstd!view.impl&%2.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%2." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Decorate (TypDecoration Rc)
    (Typ TypParam "A"))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:37:18: 37:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Decorate (TypDecoration
        Rc
       ) (Typ TypParam "A"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:37:28: 37:32 (#0)" (Param :name "%return" :typ (Typ Projection :self_typ (Typ TypParam "A") :trait_typ_args
     () :trait_path "vstd!view.View." :name "V"
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/view.rs:45:10: 45:32 (#0)" (Function
  :name (Fun :path "vstd!view.impl&%3.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%3." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Decorate (TypDecoration Arc)
    (Typ TypParam "A"))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:45:18: 45:23 (#0)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Decorate (TypDecoration
        Arc
       ) (Typ TypParam "A"))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:45:28: 45:32 (#0)" (Param :name "%return" :typ (Typ Projection :self_typ (Typ TypParam "A") :trait_typ_args
     () :trait_path "vstd!view.View." :name "V"
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body None :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#622)" (Function
  :name (Fun :path "vstd!view.impl&%4.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%4." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Bool)
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#622)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Bool)) :mode Spec
     :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:63:24: 63:28 (#0)" (Param :name "%return" :typ (Typ Bool) :mode Spec :is_mut false :unwrapped_info
    None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#622)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#622)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Bool)))
   ) (Typ Bool)
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#623)" (Function
  :name (Fun :path "vstd!view.impl&%5.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%5." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange U 8))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#623)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 8)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:64:24: 64:26 (#0)" (Param :name "%return" :typ (Typ Int (IntRange U 8)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#623)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#623)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 8))))
   ) (Typ Int (IntRange U 8))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#624)" (Function
  :name (Fun :path "vstd!view.impl&%6.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%6." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange U 16))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#624)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 16)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:65:24: 65:27 (#0)" (Param :name "%return" :typ (Typ Int (IntRange U 16)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#624)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#624)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 16))))
   ) (Typ Int (IntRange U 16))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#625)" (Function
  :name (Fun :path "vstd!view.impl&%7.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%7." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange U 32))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#625)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 32)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:66:24: 66:27 (#0)" (Param :name "%return" :typ (Typ Int (IntRange U 32)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#625)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#625)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 32))))
   ) (Typ Int (IntRange U 32))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#626)" (Function
  :name (Fun :path "vstd!view.impl&%8.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%8." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange U 64))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#626)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 64)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:67:24: 67:27 (#0)" (Param :name "%return" :typ (Typ Int (IntRange U 64)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#626)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#626)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 64))))
   ) (Typ Int (IntRange U 64))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#627)" (Function
  :name (Fun :path "vstd!view.impl&%9.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%9." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange U 128))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#627)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 128)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:68:24: 68:28 (#0)" (Param :name "%return" :typ (Typ Int (IntRange U 128)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#627)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#627)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange U 128))))
   ) (Typ Int (IntRange U 128))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#628)" (Function
  :name (Fun :path "vstd!view.impl&%10.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%10." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange USize))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#628)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange USize)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:69:24: 69:29 (#0)" (Param :name "%return" :typ (Typ Int (IntRange USize)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#628)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#628)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange USize))))
   ) (Typ Int (IntRange USize))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#629)" (Function
  :name (Fun :path "vstd!view.impl&%11.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%11." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange I 8))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#629)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 8)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:70:24: 70:26 (#0)" (Param :name "%return" :typ (Typ Int (IntRange I 8)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#629)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#629)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 8))))
   ) (Typ Int (IntRange I 8))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#630)" (Function
  :name (Fun :path "vstd!view.impl&%12.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%12." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange I 16))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#630)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 16)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:71:24: 71:27 (#0)" (Param :name "%return" :typ (Typ Int (IntRange I 16)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#630)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#630)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 16))))
   ) (Typ Int (IntRange I 16))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#631)" (Function
  :name (Fun :path "vstd!view.impl&%13.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%13." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange I 32))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#631)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 32)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:72:24: 72:27 (#0)" (Param :name "%return" :typ (Typ Int (IntRange I 32)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#631)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#631)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 32))))
   ) (Typ Int (IntRange I 32))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#632)" (Function
  :name (Fun :path "vstd!view.impl&%14.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%14." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange I 64))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#632)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 64)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:73:24: 73:27 (#0)" (Param :name "%return" :typ (Typ Int (IntRange I 64)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#632)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#632)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 64))))
   ) (Typ Int (IntRange I 64))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#633)" (Function
  :name (Fun :path "vstd!view.impl&%15.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%15." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange I 128))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#633)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 128)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:74:24: 74:28 (#0)" (Param :name "%return" :typ (Typ Int (IntRange I 128)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#633)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#633)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange I 128))))
   ) (Typ Int (IntRange I 128))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:55:13: 55:33 (#634)" (Function
  :name (Fun :path "vstd!view.impl&%16.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%16." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Int (IntRange ISize))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds () :params (
   (@ "pervasive/view.rs:55:21: 55:26 (#634)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange ISize)))
     :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:75:24: 75:29 (#0)" (Param :name "%return" :typ (Typ Int (IntRange ISize)) :mode Spec :is_mut false
    :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:55:34: 57:14 (#634)" (> Block () (@@ "pervasive/view.rs:56:18: 56:22 (#634)" (> Var "self~2")
     (Typ Decorate (TypDecoration Ref) (Typ Int (IntRange ISize))))
   ) (Typ Int (IntRange ISize))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:82:13: 82:44 (#635)" (Function
  :name (Fun :path "vstd!view.impl&%17.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%17." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Tuple ((Typ TypParam "A0")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:82:21: 82:26 (#635)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam
         "A0")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:82:31: 82:44 (#635)" (Param :name "%return" :typ (Typ Tuple ((Typ Projection :self_typ (Typ TypParam
        "A0"
       ) :trait_typ_args () :trait_path "vstd!view.View." :name "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:82:45: 84:14 (#635)" (> Block () (@@ "pervasive/view.rs:83:17: 83:39 (#635)" (> Tuple ((@@ "pervasive/view.rs:83:20: 83:34 (#635)"
        (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.") ((Typ TypParam "A0")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#635)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 1 :field 0) (@@ "pervasive/view.rs:83:20: 83:24 (#635)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0")))))
           ) (Typ TypParam "A0")))
        ) (Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
     ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V"))))
   ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:82:13: 82:44 (#636)" (Function
  :name (Fun :path "vstd!view.impl&%18.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%18." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Tuple ((Typ TypParam "A0")
     (Typ TypParam "A1")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A1" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:82:21: 82:26 (#636)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam
         "A0"
        ) (Typ TypParam "A1")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:82:31: 82:44 (#636)" (Param :name "%return" :typ (Typ Tuple ((Typ Projection :self_typ (Typ TypParam
        "A0"
       ) :trait_typ_args () :trait_path "vstd!view.View." :name "V"
      ) (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:82:45: 84:14 (#636)" (> Block () (@@ "pervasive/view.rs:83:17: 83:39 (#636)" (> Tuple ((@@ "pervasive/view.rs:83:20: 83:34 (#636)"
        (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.") ((Typ TypParam "A0")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#636)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 0) (@@ "pervasive/view.rs:83:20: 83:24 (#636)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1")))))
           ) (Typ TypParam "A0")))
        ) (Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V")
       ) (@@ "pervasive/view.rs:83:20: 83:34 (#636)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.")
          ((Typ TypParam "A1")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#636)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 2 :field 1) (@@ "pervasive/view.rs:83:20: 83:24 (#636)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1")))))
           ) (Typ TypParam "A1")))
        ) (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
     ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ
        Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V"))))
   ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ
      Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:82:13: 82:44 (#637)" (Function
  :name (Fun :path "vstd!view.impl&%19.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%19." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Tuple ((Typ TypParam "A0")
     (Typ TypParam "A1") (Typ TypParam "A2")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A1" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A2" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:82:21: 82:26 (#637)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam
         "A0"
        ) (Typ TypParam "A1") (Typ TypParam "A2")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:82:31: 82:44 (#637)" (Param :name "%return" :typ (Typ Tuple ((Typ Projection :self_typ (Typ TypParam
        "A0"
       ) :trait_typ_args () :trait_path "vstd!view.View." :name "V"
      ) (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ Projection
       :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:82:45: 84:14 (#637)" (> Block () (@@ "pervasive/view.rs:83:17: 83:39 (#637)" (> Tuple ((@@ "pervasive/view.rs:83:20: 83:34 (#637)"
        (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.") ((Typ TypParam "A0")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#637)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 3 :field 0) (@@ "pervasive/view.rs:83:20: 83:24 (#637)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2")))))
           ) (Typ TypParam "A0")))
        ) (Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V")
       ) (@@ "pervasive/view.rs:83:20: 83:34 (#637)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.")
          ((Typ TypParam "A1")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#637)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 3 :field 1) (@@ "pervasive/view.rs:83:20: 83:24 (#637)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2")))))
           ) (Typ TypParam "A1")))
        ) (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V")
       ) (@@ "pervasive/view.rs:83:20: 83:34 (#637)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.")
          ((Typ TypParam "A2")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#637)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 3 :field 2) (@@ "pervasive/view.rs:83:20: 83:24 (#637)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2")))))
           ) (Typ TypParam "A2")))
        ) (Typ Projection :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
     ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ
        Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V"
       ) (Typ Projection :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V"))))
   ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ
      Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V"
     ) (Typ Projection :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
  ) :extra_dependencies ()))

(@ "pervasive/view.rs:82:13: 82:44 (#638)" (Function
  :name (Fun :path "vstd!view.impl&%20.view.") :proxy None :kind (FunctionKind TraitMethodImpl :method (Fun :path "vstd!view.View.view.")
   :impl_path "vstd!view.impl&%20." :trait_path "vstd!view.View." :trait_typ_args () :self_typ (Typ Tuple ((Typ TypParam "A0")
     (Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam "A3")))
  ) :visibility (Visibility :restricted_to None) :owning_module "vstd!view." :mode Spec :fuel 1 :typ_bounds (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A1" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A2" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A3" (GenericBound Traits ("vstd!view.View.")))
  ) :params (
   (@ "pervasive/view.rs:82:21: 82:26 (#638)" (Param :name "self~2" :typ (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam
         "A0"
        ) (Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam "A3")))
     ) :mode Spec :is_mut false :unwrapped_info None))
  ) :ret (@ "pervasive/view.rs:82:31: 82:44 (#638)" (Param :name "%return" :typ (Typ Tuple ((Typ Projection :self_typ (Typ TypParam
        "A0"
       ) :trait_typ_args () :trait_path "vstd!view.View." :name "V"
      ) (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ Projection
       :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V"
      ) (Typ Projection :self_typ (Typ TypParam "A3") :trait_typ_args () :trait_path "vstd!view.View." :name "V"))
    ) :mode Spec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks false :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "pervasive/view.rs:82:45: 84:14 (#638)" (> Block () (@@ "pervasive/view.rs:83:17: 83:39 (#638)" (> Tuple ((@@ "pervasive/view.rs:83:20: 83:34 (#638)"
        (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.") ((Typ TypParam "A0")) () (AutospecUsage
           IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#638)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 4 :field 0) (@@ "pervasive/view.rs:83:20: 83:24 (#638)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2") (
                 Typ TypParam "A3")))))
           ) (Typ TypParam "A0")))
        ) (Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V")
       ) (@@ "pervasive/view.rs:83:20: 83:34 (#638)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.")
          ((Typ TypParam "A1")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#638)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 4 :field 1) (@@ "pervasive/view.rs:83:20: 83:24 (#638)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2") (
                 Typ TypParam "A3")))))
           ) (Typ TypParam "A1")))
        ) (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V")
       ) (@@ "pervasive/view.rs:83:20: 83:34 (#638)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.")
          ((Typ TypParam "A2")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#638)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 4 :field 2) (@@ "pervasive/view.rs:83:20: 83:24 (#638)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2") (
                 Typ TypParam "A3")))))
           ) (Typ TypParam "A2")))
        ) (Typ Projection :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V")
       ) (@@ "pervasive/view.rs:83:20: 83:34 (#638)" (> Call (CallTarget Fun (CallTargetKind Method None) (Fun :path "vstd!view.View.view.")
          ((Typ TypParam "A3")) () (AutospecUsage IfMarked)
         ) ((@@ "pervasive/view.rs:83:20: 83:24 (#638)" (> UnaryOpr (UnaryOpr TupleField :tuple_arity 4 :field 3) (@@ "pervasive/view.rs:83:20: 83:24 (#638)"
             (> Var "self~2") (Typ Decorate (TypDecoration Ref) (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2") (
                 Typ TypParam "A3")))))
           ) (Typ TypParam "A3")))
        ) (Typ Projection :self_typ (Typ TypParam "A3") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
     ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ
        Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V"
       ) (Typ Projection :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ Projection
        :self_typ (Typ TypParam "A3") :trait_typ_args () :trait_path "vstd!view.View." :name "V"))))
   ) (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ
      Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V"
     ) (Typ Projection :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ Projection
      :self_typ (Typ TypParam "A3") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))
  ) :extra_dependencies ()))

(@ "NonLinearArith/dist_boxed.rs:5:7: 5:34 (#0)" (Function
  :name (Fun :path "dist_boxed!lemma_mul_distributes1.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   "dist_boxed!."
  ) :owning_module "dist_boxed!." :mode Proof :fuel 1 :typ_bounds () :params () :ret (@ "NonLinearArith/dist_boxed.rs:9:1: 9:1 (#0)"
   (Param :name "%return" :typ (Typ Tuple ()) :mode Proof :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "NonLinearArith/dist_boxed.rs:7:9: 7:15 (#0)" (> Quant (Forall :boxed_params true) ((-> x~14 (Typ Int (IntRange Int))) (
       -> y~16 (Typ Int (IntRange Int))
      ) (-> z~18 (Typ Int (IntRange Int)))
     ) (@@ "NonLinearArith/dist_boxed.rs:7:41: 7:42 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "NonLinearArith/dist_boxed.rs:7:52: 7:65 (#0)"
        (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "NonLinearArith/dist_boxed.rs:7:52: 7:65 (#0)" (> Binary (BinaryOp
            Arith (ArithOp Mul) None
           ) (@@ "NonLinearArith/dist_boxed.rs:7:53: 7:60 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "NonLinearArith/dist_boxed.rs:7:54: 7:55 (#0)"
              (> Var "x~14") (Typ Int (IntRange Int))
             ) (@@ "NonLinearArith/dist_boxed.rs:7:58: 7:59 (#0)" (> Var "y~16") (Typ Int (IntRange Int)))
            ) (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:7:63: 7:64 (#0)" (> Var "z~18") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int))
       ) (@@ "NonLinearArith/dist_boxed.rs:7:69: 7:84 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "NonLinearArith/dist_boxed.rs:7:70: 7:71 (#0)"
          (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:7:70: 7:71 (#0)" (> Var "x~14") (Typ Int (IntRange
              Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:7:74: 7:75 (#0)" (> Var "z~18") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int))
         ) (@@ "NonLinearArith/dist_boxed.rs:7:78: 7:79 (#0)" (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:7:78: 7:79 (#0)"
            (> Var "y~16") (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:7:82: 7:83 (#0)" (> Var "z~18") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "NonLinearArith/dist_boxed.rs:8:9: 8:15 (#0)" (> Quant (Forall :boxed_params true) ((-> x~61 (Typ Int (IntRange Int))) (
       -> y~63 (Typ Int (IntRange Int))
      ) (-> z~65 (Typ Int (IntRange Int)))
     ) (@@ "NonLinearArith/dist_boxed.rs:8:41: 8:42 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "NonLinearArith/dist_boxed.rs:8:52: 8:65 (#0)"
        (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "NonLinearArith/dist_boxed.rs:8:52: 8:65 (#0)" (> Binary (BinaryOp
            Arith (ArithOp Mul) None
           ) (@@ "NonLinearArith/dist_boxed.rs:8:53: 8:60 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "NonLinearArith/dist_boxed.rs:8:54: 8:55 (#0)"
              (> Var "x~61") (Typ Int (IntRange Int))
             ) (@@ "NonLinearArith/dist_boxed.rs:8:58: 8:59 (#0)" (> Var "y~63") (Typ Int (IntRange Int)))
            ) (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:8:63: 8:64 (#0)" (> Var "z~65") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int))
       ) (@@ "NonLinearArith/dist_boxed.rs:8:69: 8:84 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "NonLinearArith/dist_boxed.rs:8:70: 8:71 (#0)"
          (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:8:70: 8:71 (#0)" (> Var "x~61") (Typ Int (IntRange
              Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:8:74: 8:75 (#0)" (> Var "z~65") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int))
         ) (@@ "NonLinearArith/dist_boxed.rs:8:78: 8:79 (#0)" (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:8:78: 8:79 (#0)"
            (> Var "y~63") (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:8:82: 8:83 (#0)" (> Var "z~65") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "NonLinearArith/dist_boxed.rs:9:1: 10:2 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies ()))

(@ "NonLinearArith/dist_boxed.rs:12:1: 12:10 (#0)" (Function
  :name (Fun :path "dist_boxed!main.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to "dist_boxed!.")
  :owning_module "dist_boxed!." :mode Exec :fuel 1 :typ_bounds () :params () :ret (@ "NonLinearArith/dist_boxed.rs:12:11: 12:11 (#0)"
   (Param :name "%return" :typ (Typ Tuple ()) :mode Exec :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "NonLinearArith/dist_boxed.rs:12:11: 12:13 (#0)" (> Block () None) (Typ Tuple ())) :extra_dependencies ()))

(trait "vstd!slice.SliceAdditionalSpecFns.")

(trait "vstd!invariant.InvariantPredicate.")

(trait "vstd!atomic_ghost.AtomicInvariantPredicate.")

(trait "vstd!view.View.")

(trait "vstd!std_specs.result.ResultAdditionalSpecFns.")

(trait "vstd!std_specs.option.OptionAdditionalFns.")

(trait "vstd!std_specs.vec.VecAdditionalSpecFns.")

(trait_impl "vstd!option.impl&%0." "core!marker.Copy.")

(trait_impl "vstd!slice.impl&%0." "vstd!slice.SliceAdditionalSpecFns.")

(trait_impl "vstd!cell.impl&%3." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%0." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%2." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%4." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%6." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%8." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%10." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%12." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%14." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%16." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%18." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%20." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!thread.impl&%1." "core!marker.Sync.")

(trait_impl "vstd!thread.impl&%2." "core!marker.Send.")

(trait_impl "vstd!thread.impl&%4." "core!marker.Copy.")

(trait_impl "vstd!vec.impl&%0." "vstd!view.View.")

(trait_impl "vstd!view.impl&%0." "vstd!view.View.")

(trait_impl "vstd!view.impl&%1." "vstd!view.View.")

(trait_impl "vstd!view.impl&%2." "vstd!view.View.")

(trait_impl "vstd!view.impl&%3." "vstd!view.View.")

(trait_impl "vstd!view.impl&%4." "vstd!view.View.")

(trait_impl "vstd!view.impl&%5." "vstd!view.View.")

(trait_impl "vstd!view.impl&%6." "vstd!view.View.")

(trait_impl "vstd!view.impl&%7." "vstd!view.View.")

(trait_impl "vstd!view.impl&%8." "vstd!view.View.")

(trait_impl "vstd!view.impl&%9." "vstd!view.View.")

(trait_impl "vstd!view.impl&%10." "vstd!view.View.")

(trait_impl "vstd!view.impl&%11." "vstd!view.View.")

(trait_impl "vstd!view.impl&%12." "vstd!view.View.")

(trait_impl "vstd!view.impl&%13." "vstd!view.View.")

(trait_impl "vstd!view.impl&%14." "vstd!view.View.")

(trait_impl "vstd!view.impl&%15." "vstd!view.View.")

(trait_impl "vstd!view.impl&%16." "vstd!view.View.")

(trait_impl "vstd!view.impl&%17." "vstd!view.View.")

(trait_impl "vstd!view.impl&%18." "vstd!view.View.")

(trait_impl "vstd!view.impl&%19." "vstd!view.View.")

(trait_impl "vstd!view.impl&%20." "vstd!view.View.")

(trait_impl "vstd!std_specs.result.impl&%0." "vstd!std_specs.result.ResultAdditionalSpecFns.")

(trait_impl "vstd!std_specs.option.impl&%0." "vstd!std_specs.option.OptionAdditionalFns.")

(trait_impl "vstd!std_specs.vec.impl&%0." "vstd!std_specs.vec.VecAdditionalSpecFns.")

(trait_impl "vstd!std_specs.vec.impl&%1." "vstd!std_specs.vec.VecAdditionalExecFns.")

(@ "pervasive/vec.rs:32:1: 35:2 (#0)" (AssocTypeImpl :name "V" :impl_path "vstd!vec.impl&%0." :typ_params (
   (tuple "A" (GenericBound Traits ()))
  ) :self_typ (Typ Datatype "vstd!vec.Vec." ((Typ TypParam "A"))) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ
   Datatype "vstd!seq.Seq." ((Typ TypParam "A")))))

(@ "pervasive/view.rs:18:1: 24:2 (#0)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%0." :typ_params (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Decorate (TypDecoration Ref) (Typ TypParam "A")) :trait_path "vstd!view.View." :trait_typ_args () :typ (
   Typ Projection :self_typ (Typ TypParam "A") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))

(@ "pervasive/view.rs:26:1: 32:2 (#0)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%1." :typ_params (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Decorate (TypDecoration Box) (Typ TypParam "A")) :trait_path "vstd!view.View." :trait_typ_args () :typ (
   Typ Projection :self_typ (Typ TypParam "A") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))

(@ "pervasive/view.rs:34:1: 40:2 (#0)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%2." :typ_params (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Decorate (TypDecoration Rc) (Typ TypParam "A")) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ
   Projection :self_typ (Typ TypParam "A") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))

(@ "pervasive/view.rs:42:1: 48:2 (#0)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%3." :typ_params (
   (tuple "A" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Decorate (TypDecoration Arc) (Typ TypParam "A")) :trait_path "vstd!view.View." :trait_typ_args () :typ (
   Typ Projection :self_typ (Typ TypParam "A") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))

(@ "pervasive/view.rs:52:9: 58:10 (#622)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%4." :typ_params () :self_typ
  (Typ Bool) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Bool)))

(@ "pervasive/view.rs:52:9: 58:10 (#623)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%5." :typ_params () :self_typ
  (Typ Int (IntRange U 8)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange U 8))))

(@ "pervasive/view.rs:52:9: 58:10 (#624)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%6." :typ_params () :self_typ
  (Typ Int (IntRange U 16)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange U 16))))

(@ "pervasive/view.rs:52:9: 58:10 (#625)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%7." :typ_params () :self_typ
  (Typ Int (IntRange U 32)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange U 32))))

(@ "pervasive/view.rs:52:9: 58:10 (#626)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%8." :typ_params () :self_typ
  (Typ Int (IntRange U 64)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange U 64))))

(@ "pervasive/view.rs:52:9: 58:10 (#627)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%9." :typ_params () :self_typ
  (Typ Int (IntRange U 128)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange U 128))))

(@ "pervasive/view.rs:52:9: 58:10 (#628)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%10." :typ_params () :self_typ
  (Typ Int (IntRange USize)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange USize))))

(@ "pervasive/view.rs:52:9: 58:10 (#629)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%11." :typ_params () :self_typ
  (Typ Int (IntRange I 8)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange I 8))))

(@ "pervasive/view.rs:52:9: 58:10 (#630)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%12." :typ_params () :self_typ
  (Typ Int (IntRange I 16)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange I 16))))

(@ "pervasive/view.rs:52:9: 58:10 (#631)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%13." :typ_params () :self_typ
  (Typ Int (IntRange I 32)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange I 32))))

(@ "pervasive/view.rs:52:9: 58:10 (#632)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%14." :typ_params () :self_typ
  (Typ Int (IntRange I 64)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange I 64))))

(@ "pervasive/view.rs:52:9: 58:10 (#633)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%15." :typ_params () :self_typ
  (Typ Int (IntRange I 128)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange I 128))))

(@ "pervasive/view.rs:52:9: 58:10 (#634)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%16." :typ_params () :self_typ
  (Typ Int (IntRange ISize)) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Int (IntRange ISize))))

(@ "pervasive/view.rs:79:9: 85:10 (#635)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%17." :typ_params (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Tuple ((Typ TypParam "A0"))) :trait_path "vstd!view.View." :trait_typ_args () :typ (Typ Tuple ((Typ Projection
     :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))))

(@ "pervasive/view.rs:79:9: 85:10 (#636)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%18." :typ_params (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A1" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1"))) :trait_path "vstd!view.View." :trait_typ_args () :typ (
   Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ Projection
     :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))))

(@ "pervasive/view.rs:79:9: 85:10 (#637)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%19." :typ_params (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A1" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A2" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2"))) :trait_path "vstd!view.View." :trait_typ_args
  () :typ (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View." :name "V")
    (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ Projection
     :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))))

(@ "pervasive/view.rs:79:9: 85:10 (#638)" (AssocTypeImpl :name "V" :impl_path "vstd!view.impl&%20." :typ_params (
   (tuple "A0" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A1" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A2" (GenericBound Traits ("vstd!view.View.")))
   (tuple "A3" (GenericBound Traits ("vstd!view.View.")))
  ) :self_typ (Typ Tuple ((Typ TypParam "A0") (Typ TypParam "A1") (Typ TypParam "A2") (Typ TypParam "A3"))) :trait_path "vstd!view.View."
  :trait_typ_args () :typ (Typ Tuple ((Typ Projection :self_typ (Typ TypParam "A0") :trait_typ_args () :trait_path "vstd!view.View."
     :name "V"
    ) (Typ Projection :self_typ (Typ TypParam "A1") :trait_typ_args () :trait_path "vstd!view.View." :name "V") (Typ Projection
     :self_typ (Typ TypParam "A2") :trait_typ_args () :trait_path "vstd!view.View." :name "V"
    ) (Typ Projection :self_typ (Typ TypParam "A3") :trait_typ_args () :trait_path "vstd!view.View." :name "V")))))

(module_id "vstd!std_specs.result.getters.")

(module_id "vstd!std_specs.option.getters.")

(module_id "vstd!std_specs.core.")

(module_id "vstd!std_specs.result.")

(module_id "vstd!std_specs.option.")

(module_id "vstd!std_specs.vec.")

(module_id "vstd!pervasive.")

(module_id "vstd!bytes.")

(module_id "vstd!calc_macro.")

(module_id "vstd!map.")

(module_id "vstd!option.")

(module_id "vstd!result.")

(module_id "vstd!seq.")

(module_id "vstd!seq_lib.")

(module_id "vstd!set.")

(module_id "vstd!set_lib.")

(module_id "vstd!slice.")

(module_id "vstd!cell.")

(module_id "vstd!invariant.")

(module_id "vstd!atomic.")

(module_id "vstd!atomic_ghost.")

(module_id "vstd!modes.")

(module_id "vstd!multiset.")

(module_id "vstd!function.")

(module_id "vstd!state_machine_internal.")

(module_id "vstd!thread.")

(module_id "vstd!ptr.")

(module_id "vstd!string.")

(module_id "vstd!vec.")

(module_id "vstd!view.")

(module_id "vstd!std_specs.")

(module_id "vstd!prelude.")

(module_id "vstd!.")

(module_id "dist_boxed!.")

(external_fn (Fun :path "vstd!invariant.open_atomic_invariant_begin."))

(external_fn (Fun :path "vstd!invariant.open_local_invariant_begin."))

(external_fn (Fun :path "vstd!invariant.open_invariant_end."))

(external_fn (Fun :path "vstd!string.impl&%0.from_rust_str."))

(external_fn (Fun :path "vstd!string.impl&%0.into_rust_str."))

(external_fn (Fun :path "vstd!string.impl&%1.from_rust_string."))

(external_fn (Fun :path "vstd!string.impl&%1.into_rust_string."))

(external_fn (Fun :path "vstd!string.impl&%1.as_rust_string_ref."))

(external_fn (Fun :path "vstd!string.new_strlit."))

