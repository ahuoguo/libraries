(@ "no location" (Datatype :path "tuple%0." :proxy None :owning_module None :visibility (Visibility :restricted_to None) :transparency
  (DatatypeTransparency WhenVisible (Visibility :restricted_to None)) :typ_params () :variants (
   (-> tuple%0 ())
  ) :mode Exec :ext_equal false))

(@ "NonLinearArith/dist_boxed.rs:5:7: 5:34 (#0)" (Function
  :name (Fun :path "dist_boxed!lemma_mul_distributes1.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to
   "dist_boxed!."
  ) :owning_module "dist_boxed!." :mode Proof :fuel 1 :typ_bounds () :params (
   (@ "NonLinearArith/dist_boxed.rs:5:7: 5:34 (#0)" (Param :name "no%param" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut false
     :unwrapped_info None))
  ) :ret (@ "NonLinearArith/dist_boxed.rs:9:1: 9:1 (#0)" (Param :name "%return" :typ (Typ Datatype "tuple%0." ()) :mode Proof
    :is_mut false :unwrapped_info None)
  ) :require () :ensure (
   (@@ "NonLinearArith/dist_boxed.rs:7:9: 7:15 (#0)" (> Quant (Forall :boxed_params true) ((-> x~14 (Typ Int (IntRange Int))) (
       -> y~16 (Typ Int (IntRange Int))
      ) (-> z~18 (Typ Int (IntRange Int)))
     ) (@@ "NonLinearArith/dist_boxed.rs:7:41: 7:42 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "NonLinearArith/dist_boxed.rs:7:52: 7:65 (#0)"
        (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "NonLinearArith/dist_boxed.rs:7:52: 7:65 (#0)" (> Binary (BinaryOp
            Arith (ArithOp Mul) None
           ) (@@ "NonLinearArith/dist_boxed.rs:7:53: 7:60 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "NonLinearArith/dist_boxed.rs:7:54: 7:55 (#0)"
              (> Var "x~14") (Typ Int (IntRange Int))
             ) (@@ "NonLinearArith/dist_boxed.rs:7:58: 7:59 (#0)" (> Var "y~16") (Typ Int (IntRange Int)))
            ) (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:7:63: 7:64 (#0)" (> Var "z~18") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int))
       ) (@@ "NonLinearArith/dist_boxed.rs:7:69: 7:84 (#0)" (> Binary (BinaryOp Arith (ArithOp Add) None) (@@ "NonLinearArith/dist_boxed.rs:7:70: 7:71 (#0)"
          (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:7:70: 7:71 (#0)" (> Var "x~14") (Typ Int (IntRange
              Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:7:74: 7:75 (#0)" (> Var "z~18") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int))
         ) (@@ "NonLinearArith/dist_boxed.rs:7:78: 7:79 (#0)" (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:7:78: 7:79 (#0)"
            (> Var "y~16") (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:7:82: 7:83 (#0)" (> Var "z~18") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
   (@@ "NonLinearArith/dist_boxed.rs:8:9: 8:15 (#0)" (> Quant (Forall :boxed_params true) ((-> x~61 (Typ Int (IntRange Int))) (
       -> y~63 (Typ Int (IntRange Int))
      ) (-> z~65 (Typ Int (IntRange Int)))
     ) (@@ "NonLinearArith/dist_boxed.rs:8:41: 8:42 (#0)" (> Binary (BinaryOp Eq Spec) (@@ "NonLinearArith/dist_boxed.rs:8:52: 8:65 (#0)"
        (> Unary (UnaryOp Trigger (TriggerAnnotation Trigger None)) (@@ "NonLinearArith/dist_boxed.rs:8:52: 8:65 (#0)" (> Binary (BinaryOp
            Arith (ArithOp Mul) None
           ) (@@ "NonLinearArith/dist_boxed.rs:8:53: 8:60 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "NonLinearArith/dist_boxed.rs:8:54: 8:55 (#0)"
              (> Var "x~61") (Typ Int (IntRange Int))
             ) (@@ "NonLinearArith/dist_boxed.rs:8:58: 8:59 (#0)" (> Var "y~63") (Typ Int (IntRange Int)))
            ) (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:8:63: 8:64 (#0)" (> Var "z~65") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int))
       ) (@@ "NonLinearArith/dist_boxed.rs:8:69: 8:84 (#0)" (> Binary (BinaryOp Arith (ArithOp Sub) None) (@@ "NonLinearArith/dist_boxed.rs:8:70: 8:71 (#0)"
          (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:8:70: 8:71 (#0)" (> Var "x~61") (Typ Int (IntRange
              Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:8:74: 8:75 (#0)" (> Var "z~65") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int))
         ) (@@ "NonLinearArith/dist_boxed.rs:8:78: 8:79 (#0)" (> Binary (BinaryOp Arith (ArithOp Mul) None) (@@ "NonLinearArith/dist_boxed.rs:8:78: 8:79 (#0)"
            (> Var "y~63") (Typ Int (IntRange Int))
           ) (@@ "NonLinearArith/dist_boxed.rs:8:82: 8:83 (#0)" (> Var "z~65") (Typ Int (IntRange Int)))
          ) (Typ Int (IntRange Int)))
        ) (Typ Int (IntRange Int)))
      ) (Typ Bool))
    ) (Typ Bool))
  ) :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec) :is_const false
  :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false :no_auto_trigger
   false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by false :check_recommends
   false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "NonLinearArith/dist_boxed.rs:9:1: 10:2 (#0)" (> Block () None) (Typ Datatype "tuple%0." ())) :extra_dependencies
  ()))

(@ "NonLinearArith/dist_boxed.rs:12:1: 12:10 (#0)" (Function
  :name (Fun :path "dist_boxed!main.") :proxy None :kind (FunctionKind Static) :visibility (Visibility :restricted_to "dist_boxed!.")
  :owning_module "dist_boxed!." :mode Exec :fuel 1 :typ_bounds () :params (
   (@ "NonLinearArith/dist_boxed.rs:12:1: 12:10 (#0)" (Param :name "no%param" :typ (Typ Int (IntRange Int)) :mode Spec :is_mut
     false :unwrapped_info None))
  ) :ret (@ "NonLinearArith/dist_boxed.rs:12:11: 12:11 (#0)" (Param :name "%return" :typ (Typ Datatype "tuple%0." ()) :mode Exec
    :is_mut false :unwrapped_info None)
  ) :require () :ensure () :decrease () :decrease_when None :decrease_by None :broadcast_forall None :mask_spec (MaskSpec NoSpec)
  :is_const false :publish None :attrs (FunctionAttrs :uses_ghost_blocks true :inline false :hidden () :broadcast_forall false
   :no_auto_trigger false :custom_req_err None :autospec None :bit_vector false :atomic false :integer_ring false :is_decrease_by
   false :check_recommends false :nonlinear false :spinoff_prover false :memoize false
  ) :body (@@ "NonLinearArith/dist_boxed.rs:12:11: 12:13 (#0)" (> Block () None) (Typ Datatype "tuple%0." ())) :extra_dependencies
  ()))

(trait "vstd!slice.SliceAdditionalSpecFns.")

(trait "vstd!invariant.InvariantPredicate.")

(trait "vstd!atomic_ghost.AtomicInvariantPredicate.")

(trait "vstd!view.View.")

(trait "vstd!std_specs.result.ResultAdditionalSpecFns.")

(trait "vstd!std_specs.option.OptionAdditionalFns.")

(trait "vstd!std_specs.vec.VecAdditionalSpecFns.")

(trait_impl "vstd!option.impl&%0." "core!marker.Copy.")

(trait_impl "vstd!slice.impl&%0." "vstd!slice.SliceAdditionalSpecFns.")

(trait_impl "vstd!cell.impl&%3." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%0." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%2." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%4." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%6." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%8." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%10." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%12." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%14." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%16." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%18." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!atomic_ghost.impl&%20." "vstd!invariant.InvariantPredicate.")

(trait_impl "vstd!thread.impl&%1." "core!marker.Sync.")

(trait_impl "vstd!thread.impl&%2." "core!marker.Send.")

(trait_impl "vstd!thread.impl&%4." "core!marker.Copy.")

(trait_impl "vstd!vec.impl&%0." "vstd!view.View.")

(trait_impl "vstd!view.impl&%0." "vstd!view.View.")

(trait_impl "vstd!view.impl&%1." "vstd!view.View.")

(trait_impl "vstd!view.impl&%2." "vstd!view.View.")

(trait_impl "vstd!view.impl&%3." "vstd!view.View.")

(trait_impl "vstd!view.impl&%4." "vstd!view.View.")

(trait_impl "vstd!view.impl&%5." "vstd!view.View.")

(trait_impl "vstd!view.impl&%6." "vstd!view.View.")

(trait_impl "vstd!view.impl&%7." "vstd!view.View.")

(trait_impl "vstd!view.impl&%8." "vstd!view.View.")

(trait_impl "vstd!view.impl&%9." "vstd!view.View.")

(trait_impl "vstd!view.impl&%10." "vstd!view.View.")

(trait_impl "vstd!view.impl&%11." "vstd!view.View.")

(trait_impl "vstd!view.impl&%12." "vstd!view.View.")

(trait_impl "vstd!view.impl&%13." "vstd!view.View.")

(trait_impl "vstd!view.impl&%14." "vstd!view.View.")

(trait_impl "vstd!view.impl&%15." "vstd!view.View.")

(trait_impl "vstd!view.impl&%16." "vstd!view.View.")

(trait_impl "vstd!view.impl&%17." "vstd!view.View.")

(trait_impl "vstd!view.impl&%18." "vstd!view.View.")

(trait_impl "vstd!view.impl&%19." "vstd!view.View.")

(trait_impl "vstd!view.impl&%20." "vstd!view.View.")

(trait_impl "vstd!std_specs.result.impl&%0." "vstd!std_specs.result.ResultAdditionalSpecFns.")

(trait_impl "vstd!std_specs.option.impl&%0." "vstd!std_specs.option.OptionAdditionalFns.")

(trait_impl "vstd!std_specs.vec.impl&%0." "vstd!std_specs.vec.VecAdditionalSpecFns.")

(trait_impl "vstd!std_specs.vec.impl&%1." "vstd!std_specs.vec.VecAdditionalExecFns.")

(module_id "vstd!std_specs.result.getters.")

(module_id "vstd!std_specs.option.getters.")

(module_id "vstd!std_specs.core.")

(module_id "vstd!std_specs.result.")

(module_id "vstd!std_specs.option.")

(module_id "vstd!std_specs.vec.")

(module_id "vstd!pervasive.")

(module_id "vstd!bytes.")

(module_id "vstd!calc_macro.")

(module_id "vstd!map.")

(module_id "vstd!option.")

(module_id "vstd!result.")

(module_id "vstd!seq.")

(module_id "vstd!seq_lib.")

(module_id "vstd!set.")

(module_id "vstd!set_lib.")

(module_id "vstd!slice.")

(module_id "vstd!cell.")

(module_id "vstd!invariant.")

(module_id "vstd!atomic.")

(module_id "vstd!atomic_ghost.")

(module_id "vstd!modes.")

(module_id "vstd!multiset.")

(module_id "vstd!function.")

(module_id "vstd!state_machine_internal.")

(module_id "vstd!thread.")

(module_id "vstd!ptr.")

(module_id "vstd!string.")

(module_id "vstd!vec.")

(module_id "vstd!view.")

(module_id "vstd!std_specs.")

(module_id "vstd!prelude.")

(module_id "vstd!.")

(module_id "dist_boxed!.")

(external_fn (Fun :path "vstd!invariant.open_atomic_invariant_begin."))

(external_fn (Fun :path "vstd!invariant.open_local_invariant_begin."))

(external_fn (Fun :path "vstd!invariant.open_invariant_end."))

(external_fn (Fun :path "vstd!string.impl&%0.from_rust_str."))

(external_fn (Fun :path "vstd!string.impl&%0.into_rust_str."))

(external_fn (Fun :path "vstd!string.impl&%1.from_rust_string."))

(external_fn (Fun :path "vstd!string.impl&%1.into_rust_string."))

(external_fn (Fun :path "vstd!string.impl&%1.as_rust_string_ref."))

(external_fn (Fun :path "vstd!string.new_strlit."))

